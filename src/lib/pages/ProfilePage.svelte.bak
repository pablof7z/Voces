<script lang="ts">
  import { page } from '$app/stores';
  import { ndk } from '$lib/ndk.svelte';
  import { NDKKind, NDKArticle, type NDKEvent } from '@nostr-dev-kit/ndk';
  import { Avatar } from '@nostr-dev-kit/svelte';
  import { EventContent } from '@nostr-dev-kit/svelte';
  import NoteCard from '$lib/components/NoteCard.svelte';
  import FollowButton from '$lib/components/FollowButton.svelte';
  import ShareProfileModal from '$lib/components/ShareProfileModal.svelte';
  import MediaGrid from '$lib/components/MediaGrid.svelte';
  import ArticleList from '$lib/components/ArticleList.svelte';
  import HighlightList from '$lib/components/HighlightList.svelte';
  import PackCard from '$lib/components/PackCard.svelte';
  import LoadMoreTrigger from '$lib/components/LoadMoreTrigger.svelte';
  import CreateFollowPackDialog from '$lib/components/CreateFollowPackDialog.svelte';
  import { createLazyFeed } from '$lib/utils/lazyFeed.svelte';
  import { toast } from '$lib/stores/toast.svelte';
  import { layoutMode } from '$lib/stores/layoutMode.svelte';
  import { t } from 'svelte-i18n';

  const identifier = $derived($page.params.identifier || '');
  const user = ndk.$fetchUser(() => identifier);
  const profile = ndk.$fetchProfile(() => user?.pubkey);
  const pubkey = $derived(user?.pubkey || '');
  const currentUser = ndk.$currentUser;
  const isOwnProfile = $derived(currentUser?.pubkey === pubkey);

  let activeTab = $state<'notes' | 'replies' | 'media' | 'articles' | 'highlights' | 'packs'>('notes');
  let isShareModalOpen = $state(false);
  let packFilter = $state<'all' | 'created' | 'appears'>('all');
  let isCreatePackDialogOpen = $state(false);
  let isFollowDropdownOpen = $state(false);
  let dropdownRef: HTMLDivElement;

  const allTextEventsFeed = createLazyFeed(
    ndk,
    () => pubkey ? { filters: [{ kinds: [NDKKind.Text], authors: [pubkey], limit: 200 }] } : undefined,
    { initialLimit: 20, pageSize: 20 }
  );

  const nip68MediaFeed = createLazyFeed(
    ndk,
    () => activeTab === 'media' && pubkey ? {
      filters: [{ kinds: [20, 21, 22], authors: [pubkey], limit: 200 }]
    } : undefined,
    { initialLimit: 30, pageSize: 30 }
  );

  const articlesFeed = createLazyFeed(
    ndk,
    () => activeTab === 'articles' && pubkey ? {
      filters: [{ kinds: [NDKKind.Article], authors: [pubkey], limit: 100 }]
    } : undefined,
    { initialLimit: 10, pageSize: 10 }
  );

  const highlightsFeed = createLazyFeed(
    ndk,
    () => activeTab === 'highlights' && pubkey ? {
      filters: [{ kinds: [9802], authors: [pubkey], limit: 100 }]
    } : undefined,
    { initialLimit: 10, pageSize: 10 }
  );

  const createdPacksFeed = createLazyFeed(
    ndk,
    () => activeTab === 'packs' && pubkey ? {
      filters: [{ kinds: [39089, 39092], authors: [pubkey], limit: 100 }]
    } : undefined,
    { initialLimit: 20, pageSize: 20 }
  );

  const appearsPacksFeed = createLazyFeed(
    ndk,
    () => activeTab === 'packs' && pubkey ? {
      filters: [{ kinds: [39089, 39092], '#p': [pubkey], limit: 100 }]
    } : undefined,
    { initialLimit: 20, pageSize: 20 }
  );

  const contactListSubscription = ndk.$subscribe(
    () => pubkey ? ({
      filters: [{ kinds: [3], authors: [pubkey], limit: 1 }],
      bufferMs: 100,
    }) : undefined
  );

  const followingCount = $derived.by(() => {
    const contactList = contactListSubscription.events[0];
    if (!contactList) return 0;
    return contactList.tags.filter(tag => tag[0] === 'p').length;
  });

  const notes = $derived.by(() => allTextEventsFeed.events.filter(event => !event.tags.some(tag => tag[0] === 'e')));
  const replies = $derived.by(() => allTextEventsFeed.events.filter(event => event.tags.some(tag => tag[0] === 'e')));

  function hasMediaUrl(content: string): boolean {
    const urlRegex = /(https?:\/\/[^\s]+\.(jpg|jpeg|png|gif|webp|svg|avif|mp4|webm|mov|avi|mkv))/gi;
    return urlRegex.test(content);
  }

  const textMediaEvents = $derived.by(() => allTextEventsFeed.allEvents.filter(event => hasMediaUrl(event.content)));
  const allMediaEvents = $derived.by(() => [...nip68MediaFeed.events, ...textMediaEvents]);

  const articles = $derived.by(() => articlesFeed.events.map(e => NDKArticle.from(e)));
  const highlights = $derived(highlightsFeed.events);

  interface Pack {
    id: string;
    title: string;
    description?: string;
    image?: string;
    pubkeys: string[];
    encode: () => string;
    kind: number;
    pubkey: string;
    created_at: number;
  }

  const createdPacks = $derived.by((): Pack[] => {
    return createdPacksFeed.events.map(event => ({
      id: event.id || '',
      title: event.tagValue('title') || 'Untitled Pack',
      description: event.tagValue('description'),
      image: event.tagValue('image'),
      pubkeys: event.tags.filter(t => t[0] === 'p').map(t => t[1]),
      encode: () => event.encode(),
      kind: event.kind || 39089,
      pubkey: event.pubkey,
      created_at: event.created_at || 0,
    }));
  });

  const appearsPacks = $derived.by((): Pack[] => {
    return appearsPacksFeed.events.map(event => ({
      id: event.id || '',
      title: event.tagValue('title') || 'Untitled Pack',
      description: event.tagValue('description'),
      image: event.tagValue('image'),
      pubkeys: event.tags.filter(t => t[0] === 'p').map(t => t[1]),
      encode: () => event.encode(),
      kind: event.kind || 39089,
      pubkey: event.pubkey,
      created_at: event.created_at || 0,
    }));
  });

  const allPacks = $derived.by(() => [...createdPacks, ...appearsPacks]);

  const packs = $derived.by(() =>
    packFilter === 'created' ? createdPacks :
    packFilter === 'appears' ? appearsPacks :
    allPacks
  );

  const npub = $derived(user?.npub || '');

  function handleLoadMore() {
    if (activeTab === 'notes' || activeTab === 'replies') {
      allTextEventsFeed.loadMore();
    } else if (activeTab === 'media') {
      nip68MediaFeed.loadMore();
    } else if (activeTab === 'articles') {
      articlesFeed.loadMore();
    } else if (activeTab === 'highlights') {
      highlightsFeed.loadMore();
    } else if (activeTab === 'packs') {
      if (packFilter === 'created') {
        createdPacksFeed.loadMore();
      } else if (packFilter === 'appears') {
        appearsPacksFeed.loadMore();
      } else {
        createdPacksFeed.loadMore();
        appearsPacksFeed.loadMore();
      }
    }
  }

  const hasMore = $derived.by(() => {
    if (activeTab === 'notes' || activeTab === 'replies') {
      return allTextEventsFeed.hasMore;
    } else if (activeTab === 'media') {
      return nip68MediaFeed.hasMore;
    } else if (activeTab === 'articles') {
      return articlesFeed.hasMore;
    } else if (activeTab === 'highlights') {
      return highlightsFeed.hasMore;
    } else if (activeTab === 'packs') {
      if (packFilter === 'created') {
        return createdPacksFeed.hasMore;
      } else if (packFilter === 'appears') {
        return appearsPacksFeed.hasMore;
      } else {
        return createdPacksFeed.hasMore || appearsPacksFeed.hasMore;
      }
    }
    return false;
  });

  const isLoading = $derived.by(() => {
    if (activeTab === 'notes' || activeTab === 'replies') {
      return allTextEventsFeed.isLoading;
    } else if (activeTab === 'media') {
      return nip68MediaFeed.isLoading;
    } else if (activeTab === 'articles') {
      return articlesFeed.isLoading;
    } else if (activeTab === 'highlights') {
      return highlightsFeed.isLoading;
    } else if (activeTab === 'packs') {
      return createdPacksFeed.isLoading || appearsPacksFeed.isLoading;
    }
    return false;
  });

  // Fetch user's created follow packs
  const userPacksFeed = createLazyFeed(
    ndk,
    () => currentUser?.pubkey ? {
      filters: [{ kinds: [39089, 39092], authors: [currentUser.pubkey], limit: 100 }]
    } : undefined,
    { initialLimit: 100, pageSize: 100 }
  );

  interface UserPack {
    id: string;
    title: string;
    pubkeys: string[];
  }

  const userPacks = $derived.by((): UserPack[] => {
    return userPacksFeed.events.map(event => ({
      id: event.id || '',
      title: event.tagValue('title') || 'Untitled Pack',
      pubkeys: event.tags.filter(t => t[0] === 'p').map(t => t[1]),
    }));
  });

  function handleClickOutside(event: MouseEvent) {
    if (dropdownRef && !dropdownRef.contains(event.target as Node)) {
      isFollowDropdownOpen = false;
    }
  }

  function openCreatePackWithUser() {
    isFollowDropdownOpen = false;
    isCreatePackDialogOpen = true;
  }

  async function addToExistingPack(packId: string) {
    if (!pubkey) return;

    const packEvent = userPacksFeed.events.find(e => e.id === packId);
    if (!packEvent) return;

    try {
      const existingPubkeys = packEvent.tags.filter(t => t[0] === 'p').map(t => t[1]);
      if (existingPubkeys.includes(pubkey)) {
        return;
      }

      packEvent.tags.push(['p', pubkey]);
      await packEvent.sign();
      await packEvent.publishReplaceable();

      if (packEvent.publishStatus === 'error') {
        const error = packEvent.publishError;
        const relayErrors = error?.relayErrors || {};
        const errorMessages = Object.entries(relayErrors)
          .map(([relay, err]) => `${relay}: ${err}`)
          .join('\n');
        toast.error(`Failed to publish:\n${errorMessages || 'Unknown error'}`);
        return;
      }

      isFollowDropdownOpen = false;
    } catch (error) {
      console.error('Failed to add to pack:', error);
      toast.error(`Failed to add to pack: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  // Set profile layout mode
  $effect(() => {
    layoutMode.setProfileMode();
    return () => {
      layoutMode.reset();
    };
  });
</script>

<svelte:window onclick={handleClickOutside} />

<div class="w-full">
  <!-- Profile header -->
  <div class="bg-black border-b border-neutral-800">
    <!-- Cover image -->
    <div class="h-48 sm:h-64 bg-gradient-to-br from-orange-500 to-red-500 relative">
      {#if profile?.banner}
        <img
          src={profile.banner}
          alt="Banner"
          class="w-full h-full object-cover"
        />
      {/if}
    </div>

    <!-- Profile info -->
    <div class="px-4 sm:px-6 pb-4 pt-4">
      <!-- Avatar -->
      <div class="relative -mt-24 sm:-mt-28 mb-4">
        <Avatar {ndk} {pubkey} size="sm" class="w-48 h-48 sm:w-48 sm:h-48 rounded-full border-4 border-black" />
      </div>

      <!-- Name and bio -->
      <div class="mb-4">
        <div class="flex items-start justify-between gap-4">
          <div class="flex-1">
            <h1 class="text-xl sm:text-2xl font-bold text-neutral-100">
              {profile?.name || 'Anonymous'}
            </h1>
            <div class="flex items-center gap-2">
              <p class="text-neutral-400">
                {profile?.nip05 ? `@${profile.nip05.split('@')[0]}` : `${pubkey.slice(0, 12)}...`}
              </p>
              <button
                onclick={() => isShareModalOpen = true}
                class="p-1 text-neutral-400 hover:text-neutral-300 transition-colors"
                aria-label="Share profile"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                </svg>
              </button>
            </div>
          </div>
          <div class="flex items-center gap-2">
            <FollowButton {pubkey} />
            {#if !isOwnProfile && currentUser}
              <div class="relative" bind:this={dropdownRef}>
                <button
                  onclick={(e) => {
                    e.stopPropagation();
                    isFollowDropdownOpen = !isFollowDropdownOpen;
                  }}
                  class="p-2 rounded-full border border-neutral-600 text-neutral-300 hover:bg-neutral-800 transition-colors"
                  aria-label="More options"
                >
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>

                {#if isFollowDropdownOpen}
                  <div class="absolute right-0 mt-2 w-64 bg-neutral-900 border border-neutral-800 rounded-lg shadow-xl overflow-hidden z-50">
                    <div class="py-1">
                      <button
                        onclick={openCreatePackWithUser}
                        class="w-full px-4 py-3 text-left text-sm text-neutral-300 hover:bg-neutral-800 transition-colors flex items-center gap-3"
                      >
                        <svg class="w-5 h-5 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        {$t('followPacks.createNew')}
                      </button>

                      {#if userPacks.length > 0}
                        <div class="border-t border-neutral-800 mt-1 pt-1">
                          <div class="px-4 py-2 text-xs text-neutral-500 font-medium">
                            {$t('followPacks.addToExisting')}
                          </div>
                          {#each userPacks as pack (pack.id)}
                            {@const alreadyInPack = pack.pubkeys.includes(pubkey)}
                            <button
                              onclick={() => addToExistingPack(pack.id)}
                              disabled={alreadyInPack}
                              class="w-full px-4 py-2.5 text-left text-sm text-neutral-300 hover:bg-neutral-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-between gap-2"
                            >
                              <span class="truncate">{pack.title}</span>
                              {#if alreadyInPack}
                                <svg class="w-4 h-4 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                              {/if}
                            </button>
                          {/each}
                        </div>
                      {/if}
                    </div>
                  </div>
                {/if}
              </div>
            {/if}
          </div>
        </div>
        {#if profile?.about}
          <div class="mt-3">
            <EventContent
              content={profile.about}
              class="text-neutral-300"
            />
          </div>
        {/if}
      </div>

      <!-- Meta info -->
      <div class="flex flex-wrap gap-4 text-sm text-neutral-400">
        {#if profile?.website}
          <a
            href={profile.website}
            target="_blank"
            rel="noopener noreferrer"
            class="flex items-center gap-1 hover:text-orange-500"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
            </svg>
            <span>{profile.website.replace(/^https?:\/\//, '')}</span>
          </a>
        {/if}
      </div>

      <!-- Stats -->
      <div class="flex gap-6 mt-4">
        <div>
          <span class="font-semibold text-neutral-100">{notes.length}</span>
          <span class="text-neutral-400 ml-1">{$t('profile.tabs.notes')}</span>
        </div>
        <div>
          <span class="font-semibold text-neutral-100">{followingCount}</span>
          <span class="text-neutral-400 ml-1">{$t('profile.following')}</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Tabs -->
  <div class="sticky top-0 z-30 bg-black/80 backdrop-blur-sm border-b border-neutral-800">
    <div class="flex justify-around lg:justify-start px-2 lg:px-4 overflow-x-auto">
      <button
        onclick={() => activeTab = 'notes'}
        class={`flex items-center justify-center lg:justify-start gap-1.5 px-3 lg:px-4 py-3 font-medium whitespace-nowrap ${
          activeTab === 'notes'
            ? 'text-orange-500 border-b-2 border-orange-500'
            : 'text-neutral-400 hover:text-neutral-300'
        }`}
        aria-label="Notes"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
        </svg>
        <span class="hidden lg:inline">{$t('profile.tabs.notes')}</span>
      </button>
      <button
        onclick={() => activeTab = 'replies'}
        class={`flex items-center justify-center lg:justify-start gap-1.5 px-3 lg:px-4 py-3 font-medium whitespace-nowrap ${
          activeTab === 'replies'
            ? 'text-orange-500 border-b-2 border-orange-500'
            : 'text-neutral-400 hover:text-neutral-300'
        }`}
        aria-label="Replies"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" />
        </svg>
        <span class="hidden lg:inline">{$t('profile.tabs.replies')}</span>
      </button>
      <button
        onclick={() => activeTab = 'media'}
        class={`flex items-center justify-center lg:justify-start gap-1.5 px-3 lg:px-4 py-3 font-medium whitespace-nowrap ${
          activeTab === 'media'
            ? 'text-orange-500 border-b-2 border-orange-500'
            : 'text-neutral-400 hover:text-neutral-300'
        }`}
        aria-label="Media"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
        <span class="hidden lg:inline">{$t('profile.tabs.media')}</span>
      </button>
      <button
        onclick={() => activeTab = 'articles'}
        class={`flex items-center justify-center lg:justify-start gap-1.5 px-3 lg:px-4 py-3 font-medium whitespace-nowrap ${
          activeTab === 'articles'
            ? 'text-orange-500 border-b-2 border-orange-500'
            : 'text-neutral-400 hover:text-neutral-300'
        }`}
        aria-label="Articles"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <span class="hidden lg:inline">{$t('profile.tabs.articles')}</span>
      </button>
      <button
        onclick={() => activeTab = 'highlights'}
        class={`flex items-center justify-center lg:justify-start gap-1.5 px-3 lg:px-4 py-3 font-medium whitespace-nowrap ${
          activeTab === 'highlights'
            ? 'text-orange-500 border-b-2 border-orange-500'
            : 'text-neutral-400 hover:text-neutral-300'
        }`}
        aria-label="Highlights"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
        </svg>
        <span class="hidden lg:inline">{$t('profile.tabs.highlights')}</span>
      </button>
      <button
        onclick={() => activeTab = 'packs'}
        class={`flex items-center justify-center lg:justify-start gap-1.5 px-3 lg:px-4 py-3 font-medium whitespace-nowrap ${
          activeTab === 'packs'
            ? 'text-orange-500 border-b-2 border-orange-500'
            : 'text-neutral-400 hover:text-neutral-300'
        }`}
        aria-label="Follow Packs"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
        </svg>
        <span class="hidden lg:inline">{$t('profile.tabs.followPacks')}</span>
      </button>
    </div>
  </div>

  <!-- Tab content -->
  <div>
    {#if activeTab === 'notes'}
      {#if notes.length === 0}
        <div class="text-center py-8 text-neutral-400">{$t('profile.emptyStates.noNotes')}</div>
      {:else}
        <div class="divide-y divide-neutral-800/50">
          {#each notes as note (note.id)}
            <NoteCard event={note} />
          {/each}
        </div>
      {/if}
      <LoadMoreTrigger
        onIntersect={handleLoadMore}
        {hasMore}
        {isLoading}
      />
    {/if}

    {#if activeTab === 'replies'}
      {#if replies.length === 0}
        <div class="text-center py-8 text-neutral-400">{$t('profile.emptyStates.noReplies')}</div>
      {:else}
        <div class="divide-y divide-neutral-800/50">
          {#each replies as reply (reply.id)}
            <NoteCard event={reply} />
          {/each}
        </div>
      {/if}
      <LoadMoreTrigger
        onIntersect={handleLoadMore}
        {hasMore}
        {isLoading}
      />
    {/if}

    {#if activeTab === 'media'}
      <div class="p-4">
        <MediaGrid events={allMediaEvents} />
      </div>
      <LoadMoreTrigger
        onIntersect={handleLoadMore}
        {hasMore}
        {isLoading}
      />
    {/if}

    {#if activeTab === 'articles'}
      <ArticleList
        {articles}
        emptyMessage={isOwnProfile ? $t('profile.emptyStates.noArticlesOwn') : $t('profile.emptyStates.noArticlesUser')}
      />
      <LoadMoreTrigger
        onIntersect={handleLoadMore}
        {hasMore}
        {isLoading}
      />
    {/if}

    {#if activeTab === 'highlights'}
      <HighlightList
        {highlights}
        emptyMessage={isOwnProfile ? $t('profile.emptyStates.noHighlightsOwn') : $t('profile.emptyStates.noHighlightsUser')}
      />
      <LoadMoreTrigger
        onIntersect={handleLoadMore}
        {hasMore}
        {isLoading}
      />
    {/if}

    {#if activeTab === 'packs'}
      <div class="p-4 space-y-4">
        <div class="flex gap-2 mb-4">
          <button
            onclick={() => packFilter = 'all'}
            class={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              packFilter === 'all'
                ? 'bg-orange-600 text-white'
                : 'bg-black text-neutral-300 hover:bg-neutral-900'
            }`}
          >
            {$t('profile.tabs.all')}
          </button>
          <button
            onclick={() => packFilter = 'created'}
            class={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              packFilter === 'created'
                ? 'bg-orange-600 text-white'
                : 'bg-black text-neutral-300 hover:bg-neutral-900'
            }`}
          >
            {isOwnProfile ? $t('profile.tabs.byYou') : $t('profile.tabs.byUser', { username: profile?.name || profile?.displayName || pubkey.slice(0, 8) })}
          </button>
          <button
            onclick={() => packFilter = 'appears'}
            class={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
              packFilter === 'appears'
                ? 'bg-orange-600 text-white'
                : 'bg-black text-neutral-300 hover:bg-neutral-900'
            }`}
          >
            {isOwnProfile ? $t('profile.tabs.withYou') : $t('profile.tabs.withUser', { username: profile?.name || profile?.displayName || pubkey.slice(0, 8) })}
          </button>
        </div>

        {#if packs.length > 0}
          <div class="grid gap-4 md:grid-cols-2">
            {#each packs as pack (pack.id)}
              <PackCard {pack} variant="compact" />
            {/each}
          </div>
        {:else}
          <div class="text-center py-8 text-neutral-400">
            {packFilter === 'created'
              ? (isOwnProfile
                  ? $t('profile.emptyStates.noPacksCreatedOwn')
                  : $t('profile.emptyStates.noPacksCreatedUser', { username: profile?.name || 'user' }))
              : packFilter === 'appears'
              ? (isOwnProfile
                  ? $t('profile.emptyStates.noPacksAppearsOwn')
                  : $t('profile.emptyStates.noPacksAppearsUser', { username: profile?.name || 'user' }))
              : $t('profile.emptyStates.noPacksFound')}
          </div>
        {/if}
      </div>
      <LoadMoreTrigger
        onIntersect={handleLoadMore}
        {hasMore}
        {isLoading}
      />
    {/if}
  </div>

  <ShareProfileModal
    isOpen={isShareModalOpen}
    onClose={() => isShareModalOpen = false}
    {pubkey}
    {npub}
  />

  <CreateFollowPackDialog
    bind:open={isCreatePackDialogOpen}
    initialPubkey={pubkey}
    onPublished={() => {
      // The newly published pack will be picked up automatically by the userPacksFeed subscription
      // No need to manually restart - NDK will broadcast the event and the subscription will receive it
    }}
  />
</div>
