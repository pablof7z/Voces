This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo, **/certdata.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
context/
  PROJECT.md
public/
  vite.svg
src/
  components/
    content/
      ContentRenderer.tsx
      ContentRendererDemo.tsx
      EmbeddedArticle.tsx
      EmbeddedNote.tsx
      index.ts
      MediaEmbed.tsx
    layout/
      Layout.tsx
    navigation/
      BottomNav.tsx
      RelaySelector.tsx
      Sidebar.tsx
    nostr/
    ui/
      Avatar.tsx
      button.tsx
      card.tsx
      FAB.tsx
      input.tsx
      label.tsx
      select.tsx
      tabs.tsx
      textarea.tsx
      UserAvatar.tsx
    wallet/
      index.ts
      MintConfiguration.tsx
      ProfessionalWallet.tsx
      QRScanner.tsx
      README.md
      TransactionButton.tsx
      TransactionModal.tsx
      Wallet.tsx
      WalletBalance.tsx
      WalletBalanceBadge.tsx
      WalletIntegration.tsx
      WalletWidget.tsx
      ZapButton.tsx
  config/
    ndk.ts
  contexts/
  features/
    auth/
      LoginButton.tsx
    classifieds/
      components/
        CategorySection.tsx
        FilterButton.tsx
        ListingCard.tsx
        ListingForm.tsx
        ListingGrid.tsx
        PriceTag.tsx
      hooks/
        useCreateListing.ts
        useListings.ts
      types.ts
    feed/
      ComposeNote.tsx
      NoteCard.tsx
      NoteFeed.tsx
    followPacks/
      components/
        FollowPackCard.tsx
        ProfileAvatar.tsx
      hooks/
        useFollowPacks.ts
      types.ts
    profile/
      ProfileEditor.tsx
    settings/
      BlossomSettings.tsx
      FollowPacksSettings.tsx
      NotificationSettings.tsx
      PrivacySettings.tsx
      ProfileSettings.tsx
      RelaySettings.tsx
      ThemeSettings.tsx
    trades/
      CompactFilters.tsx
      CreateOrderModal.tsx
      MobileFilters.tsx
      OrderBook.tsx
      OrderCard.tsx
      QuickFilters.tsx
      TakeOrderModal.tsx
      TradeFilters.tsx
  hooks/
  i18n/
    locales/
      en.json
      es.json
    config.ts
  lib/
    utils.ts
  pages/
    marketplace/
      CreateListingPage.tsx
      ListingDetailPage.tsx
      MarketplacePage.tsx
    ComposePage.tsx
    FollowPackDetailPage.tsx
    FollowPacksPage.tsx
    HomePage.tsx
    NoteDetailPage.tsx
    NotificationsPage.tsx
    ProfilePage.tsx
    SettingsPage.tsx
    TradePage.tsx
    WalletPage.tsx
  stores/
    followPacksStore.ts
    settingsStore.ts
  styles/
  tools/
    dynamic/
  types/
  utils/
  .repomix-output.txt
  app.css
  App.tsx
  index.css
  main.tsx
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/pages/NoteDetailPage.tsx">
import { useParams, useNavigate } from 'react-router-dom';
import { useEvent, useProfile, useNDK, useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent, NDKKind } from '@nostr-dev-kit/ndk-hooks';
import { nip19 } from 'nostr-tools';
import { ArrowLeft } from 'lucide-react';
import { NoteCard } from '@/features/feed/NoteCard';
import { useState, useEffect } from 'react';
import { ContentRenderer } from '@/components/content/ContentRenderer';
import { UserAvatar } from '@/components/ui/UserAvatar';
export function NoteDetailPage() {
  const { nevent } = useParams<{ nevent: string }>();
  const navigate = useNavigate();
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const [replies, setReplies] = useState<NDKEvent[]>([]);
  const [replyContent, setReplyContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  // Decode the nevent to get the event ID
  let eventId: string | null = null;
  if (nevent) {
    try {
      const decoded = nip19.decode(nevent);
      if (decoded.type === 'nevent') {
        eventId = decoded.data.id;
      }
    } catch (error) {
      console.error('Failed to decode nevent:', error);
    }
  }
  // Fetch the main event
  const event = useEvent(eventId || '');
  const profile = useProfile(event?.author?.pubkey);
  // Fetch replies
  useEffect(() => {
    if (!event || !ndk) return;
    const fetchReplies = async () => {
      const replyEvents = await ndk.fetchEvents({
        kinds: [NDKKind.Text],
        '#e': [event.id],
      });
      const replyArray = Array.from(replyEvents);
      // Sort by creation time (newest first)
      replyArray.sort((a, b) => (b.created_at || 0) - (a.created_at || 0));
      setReplies(replyArray);
    };
    fetchReplies();
  }, [event, ndk]);
  const handleReply = async () => {
    if (!currentUser || !ndk || !event || !replyContent.trim()) return;
    setIsSubmitting(true);
    try {
      const reply = new NDKEvent(ndk);
      reply.kind = NDKKind.Text;
      reply.content = replyContent;
      reply.tags = [
        ['e', event.id, '', 'reply'],
        ['p', event.pubkey]
      ];
      // Add root tag if this event is also a reply
      const rootTag = event.tags.find(tag => tag[0] === 'e' && tag[3] === 'root');
      if (rootTag) {
        reply.tags.push(['e', rootTag[1], '', 'root']);
      } else {
        reply.tags.push(['e', event.id, '', 'root']);
      }
      await reply.publish();
      // Add the new reply to the list
      setReplies(prev => [reply, ...prev]);
      setReplyContent('');
    } catch (error) {
      console.error('Failed to publish reply:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  if (!eventId) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">Invalid Note</h1>
        <p className="text-gray-600 dark:text-gray-400">The note ID is invalid or malformed.</p>
        <button
          onClick={() => navigate('/')}
          className="mt-4 px-4 py-2 bg-accent-600 text-white rounded-lg hover:bg-accent-700"
        >
          Go Home
        </button>
      </div>
    );
  }
  if (!event) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
        <p className="mt-4 text-gray-600 dark:text-gray-400">Loading note...</p>
      </div>
    );
  }
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-950">
      {/* Header */}
      <header className="sticky top-0 z-10 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800">
        <div className="flex items-center gap-4 px-4 py-3">
          <button
            onClick={() => navigate(-1)}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h1 className="text-xl font-semibold">Thread</h1>
        </div>
      </header>
      {/* Main Content */}
      <main className="max-w-2xl mx-auto">
        {/* Main Note */}
        <NoteCard event={event} />
        {/* Reply Box */}
        {currentUser && (
          <div className="border-b border-gray-200 dark:border-gray-800 p-4">
            <div className="flex gap-3">
              <UserAvatar
                pubkey={currentUser.pubkey}
                size="md"
                className="w-10 h-10 flex-shrink-0"
              />
              <div className="flex-1">
                <textarea
                  value={replyContent}
                  onChange={(e) => setReplyContent(e.target.value)}
                  placeholder={`Reply to ${profile?.name || 'this note'}...`}
                  className="w-full min-h-[100px] p-3 bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-accent-500"
                  disabled={isSubmitting}
                />
                <div className="flex justify-end mt-2">
                  <button
                    onClick={handleReply}
                    disabled={!replyContent.trim() || isSubmitting}
                    className="px-4 py-2 bg-accent-600 text-white rounded-lg hover:bg-accent-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    {isSubmitting ? 'Posting...' : 'Reply'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        {/* Replies */}
        <div>
          {replies.length > 0 ? (
            <>
              <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-800">
                <h2 className="font-semibold text-gray-900 dark:text-white">
                  {replies.length} {replies.length === 1 ? 'Reply' : 'Replies'}
                </h2>
              </div>
              {replies.map(reply => (
                <NoteCard key={reply.id} event={reply} />
              ))}
            </>
          ) : (
            <div className="p-8 text-center text-gray-500 dark:text-gray-400">
              No replies yet. Be the first to reply!
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
</file>

<file path="context/PROJECT.md">
# Voces - NDK Nostr App

A modern React-based Nostr client built with NDK (Nostr Development Kit), Vite, shadcn/ui, and TypeScript.

## Project Overview

Voces is a Nostr client application that allows users to authenticate with Nostr extensions or private keys, publish notes to the Nostr network, and view a real-time feed of notes from followed users. The application follows modern React best practices with a clean, modular architecture and a minimalistic, responsive UI.

## Technology Stack

- **Framework**: React 19 with TypeScript
- **Build Tool**: Vite
- **Nostr SDK**: @nostr-dev-kit/ndk with React hooks
- **UI Components**: shadcn/ui with Radix UI primitives
- **Styling**: Tailwind CSS
- **State Management**: React Context API for NDK state, Zustand (included for future use)
- **Data Fetching**: TanStack Query (React Query) for server state
- **Database**: Dexie (IndexedDB wrapper) for caching
- **Routing**: React Router DOM

## Project Structure

```
src/
├── components/       # Reusable UI components
│   ├── ui/          # shadcn/ui components (Button, Card, etc.)
│   ├── navigation/  # Navigation components (Sidebar, BottomNav)
│   ├── layout/      # Layout components
│   └── nostr/      # Nostr-specific components
├── features/        # Feature-based modules
│   ├── auth/        # Authentication features (LoginButton)
│   ├── feed/        # Feed and notes features (NoteFeed, ComposeNote)
│   └── profile/     # User profile features
├── hooks/           # Custom React hooks
├── lib/             # Utility functions
├── contexts/        # React contexts (NDK provider, etc.)
├── types/           # TypeScript type definitions
├── utils/           # Helper functions
├── config/          # Configuration files (NDK setup, etc.)
├── pages/           # Page components for routing
└── index.css        # Global styles and theme configuration
```

## NDK Integration

### NDK Context
The application uses a React Context (`NDKContext`) to provide a single source of truth for the NDK instance, relays, and the signed-in user. This allows any component to access NDK functionality through the `useNDK()` hook.

### Key Components
1. **LoginButton** - Handles authentication via NIP-07 browser extensions or private key
2. **NoteFeed** - Displays a real-time feed of Nostr notes using NDK subscription hooks
3. **ComposeNote** - Allows users to publish new notes to the Nostr network
4. **NoteCard** - Displays individual notes with engagement features (like, repost, reply)

### Configuration
The NDK instance is configured with:
- Multiple default relays (Damus, Nostr.band, nos.lol, Snort, Primal)
- Dexie cache adapter for performance
- Auto-connection to user relays
- Outbox model support
- Auto-fetching of user mutelist

## Key Features

- **Nostr Authentication**: Login with NIP-07 browser extensions or private key
- **Real-time Feed**: View notes from followed users with live updates
- **Note Publishing**: Compose and publish text notes to the Nostr network
- **Modern UI**: Clean, responsive interface built with shadcn/ui components
- **Caching**: Dexie-based caching for improved performance
- **Type Safety**: Full TypeScript coverage throughout the application
- **Responsive Design**: Mobile-first approach with dedicated mobile navigation
- **Dark Mode**: Automatic dark/light mode based on system preferences

## UI/UX Improvements

### Navigation
- **Desktop**: Persistent sidebar navigation with user profile information
- **Mobile**: Bottom navigation bar for easy thumb access
- **Responsive**: Adapts seamlessly between mobile and desktop layouts
- **Intuitive**: Clear visual hierarchy and consistent navigation patterns

### Visual Design
- **Minimalist**: Clean interface with ample whitespace
- **Consistent**: Unified design language throughout the application
- **Accessible**: Proper contrast ratios and semantic HTML
- **Animated**: Subtle transitions and loading states for enhanced user experience

### User Experience
- **Real-time Updates**: Live feed updates without page refresh
- **Character Counter**: Visual feedback for note composition with color-coded limits
- **Profile Integration**: User avatars and names throughout the interface
- **Contextual Actions**: Relevant actions available for each note

## Development

The application is ready for development with:
- Hot module replacement via Vite
- Tailwind CSS for styling
- Path aliases for clean imports
- ESLint and TypeScript for code quality
- Pre-configured shadcn/ui components

## Future Improvements

1. Enhanced error handling and user feedback
2. Testing framework implementation
3. Environment-specific configuration
4. Additional state management for complex features
5. Accessibility improvements
6. Advanced profile customization
7. Notification system implementation
8. Media attachment support
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/components/content/ContentRenderer.tsx">
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { nip19 } from 'nostr-tools';
import { Fragment, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { EmbeddedNote } from './EmbeddedNote';
import { EmbeddedArticle } from './EmbeddedArticle';
import { MediaEmbed } from './MediaEmbed';
interface ContentRendererProps {
  content: string;
  className?: string;
}
interface ParsedSegment {
  type: 'text' | 'npub' | 'nprofile' | 'note' | 'nevent' | 'naddr' | 'link' | 'media';
  content: string;
  data?: any;
}
export function ContentRenderer({ content, className = '' }: ContentRendererProps) {
  const segments = useMemo(() => {
    const parsed: ParsedSegment[] = [];
    // Combined regex for all patterns
    const patterns = [
      // Nostr URIs (nostr:npub, nostr:note, etc.)
      /nostr:(npub1[a-z0-9]{58}|nprofile1[a-z0-9]+|note1[a-z0-9]{58}|nevent1[a-z0-9]+|naddr1[a-z0-9]+)/gi,
      // Direct media files
      /https?:\/\/[^\s<>"]+\.(jpg|jpeg|png|gif|webp|svg|mp4|webm|mov|mp3|wav|ogg|m4a)(\?[^\s<>"]*)?/gi,
      // YouTube URLs
      /https?:\/\/(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([a-zA-Z0-9_-]{11})[^\s<>"]*/gi,
      // Regular links
      /https?:\/\/[^\s<>"]+/gi,
    ];
    let lastIndex = 0;
    const allMatches: Array<{ match: RegExpExecArray; pattern: RegExp }> = [];
    // Collect all matches
    for (const pattern of patterns) {
      pattern.lastIndex = 0; // Reset regex state
      let match;
      while ((match = pattern.exec(content)) !== null) {
        allMatches.push({ match, pattern });
      }
    }
    // Sort matches by position
    allMatches.sort((a, b) => a.match.index - b.match.index);
    // Process matches without overlaps
    for (const { match } of allMatches) {
      const matchStart = match.index;
      const matchEnd = match.index + match[0].length;
      // Skip if this match overlaps with already processed content
      if (matchStart < lastIndex) continue;
      // Add text before the match
      if (matchStart > lastIndex) {
        parsed.push({
          type: 'text',
          content: content.slice(lastIndex, matchStart),
        });
      }
      const matchedText = match[0];
      // Process the match
      if (matchedText.startsWith('nostr:')) {
        const uri = matchedText.slice(6); // Remove 'nostr:' prefix
        try {
          if (uri.startsWith('npub1')) {
            const decoded = nip19.decode(uri);
            parsed.push({
              type: 'npub',
              content: uri,
              data: decoded.data,
            });
          } else if (uri.startsWith('nprofile1')) {
            const decoded = nip19.decode(uri);
            parsed.push({
              type: 'nprofile',
              content: uri,
              data: decoded.data,
            });
          } else if (uri.startsWith('note1')) {
            const decoded = nip19.decode(uri);
            parsed.push({
              type: 'note',
              content: uri,
              data: decoded.data,
            });
          } else if (uri.startsWith('nevent1')) {
            const decoded = nip19.decode(uri);
            parsed.push({
              type: 'nevent',
              content: uri,
              data: decoded.data,
            });
          } else if (uri.startsWith('naddr1')) {
            const decoded = nip19.decode(uri);
            parsed.push({
              type: 'naddr',
              content: uri,
              data: decoded.data,
            });
          }
        } catch (e) {
          // If decoding fails, treat as text
          parsed.push({
            type: 'text',
            content: matchedText,
          });
        }
      } else if (/\.(jpg|jpeg|png|gif|webp|svg|mp4|webm|mov|mp3|wav|ogg|m4a)(\?|$)/i.test(matchedText)) {
        parsed.push({
          type: 'media',
          content: matchedText,
        });
      } else if (/youtube\.com|youtu\.be/i.test(matchedText)) {
        parsed.push({
          type: 'media',
          content: matchedText,
        });
      } else if (matchedText.startsWith('http')) {
        parsed.push({
          type: 'link',
          content: matchedText,
        });
      }
      lastIndex = matchEnd;
    }
    // Add remaining text
    if (lastIndex < content.length) {
      parsed.push({
        type: 'text',
        content: content.slice(lastIndex),
      });
    }
    return parsed;
  }, [content]);
  return (
    <div className={className}>
      {segments.map((segment, index) => (
        <Fragment key={index}>
          {segment.type === 'text' && (
            <span className="whitespace-pre-wrap break-words">{segment.content}</span>
          )}
          {segment.type === 'npub' && (
            <UserMention pubkey={segment.data as string} />
          )}
          {segment.type === 'nprofile' && (
            <UserMention pubkey={(segment.data as any).pubkey} />
          )}
          {segment.type === 'note' && (
            <EmbeddedNote eventId={segment.data as string} />
          )}
          {segment.type === 'nevent' && (
            <EmbeddedNote eventId={(segment.data as any).id} />
          )}
          {segment.type === 'naddr' && (
            <EmbeddedArticle naddr={segment.data} />
          )}
          {segment.type === 'link' && (
            <a
              href={segment.content}
              target="_blank"
              rel="noopener noreferrer"
              className="text-accent-600 dark:text-accent-400 hover:underline break-all"
              onClick={(e) => e.stopPropagation()}
            >
              {segment.content}
            </a>
          )}
          {segment.type === 'media' && (
            <MediaEmbed url={segment.content} />
          )}
        </Fragment>
      ))}
    </div>
  );
}
interface UserMentionProps {
  pubkey: string;
}
function UserMention({ pubkey }: UserMentionProps) {
  const profile = useProfile(pubkey);
  const npub = nip19.npubEncode(pubkey);
  const displayName = profile?.name || profile?.displayName || `@${npub.slice(0, 8)}...`;
  return (
    <Link
      to={`/p/${npub}`}
      className="inline-flex items-center gap-0.5 text-accent-600 dark:text-accent-400 hover:underline font-medium"
      onClick={(e) => e.stopPropagation()}
    >
      @{displayName}
    </Link>
  );
}
</file>

<file path="src/components/content/ContentRendererDemo.tsx">
import { ContentRenderer } from './ContentRenderer';
export function ContentRendererDemo() {
  const sampleContent = `
Check out this image: https://nostr.build/i/example.jpg
Here's a YouTube video: https://www.youtube.com/watch?v=dQw4w9WgXcQ
Mentioned user: nostr:npub1l2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqutajft
A quoted note: nostr:note1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq
Regular link: https://github.com/nostr-protocol/nips
Some audio: https://example.com/podcast.mp3
And a video: https://example.com/video.mp4
`;
  return (
    <div className="max-w-2xl mx-auto p-8">
      <h2 className="text-2xl font-bold mb-4">Content Renderer Demo</h2>
      <div className="border border-neutral-200 dark:border-neutral-800 rounded-lg p-4">
        <ContentRenderer content={sampleContent} />
      </div>
    </div>
  );
}
</file>

<file path="src/components/content/EmbeddedArticle.tsx">
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { NDKKind } from '@nostr-dev-kit/ndk';
import { FileText, Clock } from 'lucide-react';
import { Link } from 'react-router-dom';
import { nip19 } from 'nostr-tools';
interface EmbeddedArticleProps {
  naddr: any; // naddr decoded data
}
export function EmbeddedArticle({ naddr }: EmbeddedArticleProps) {
  // For kind:30023 (long-form content), we'll show a preview
  const profile = useProfile(naddr.pubkey);
  const displayName = profile?.name || profile?.displayName || 'Anonymous';
  // Parse tags if available
  const title = naddr.identifier || 'Untitled Article';
  return (
    <div className="my-3 border border-neutral-200 dark:border-neutral-800 rounded-xl bg-white dark:bg-neutral-900/50 hover:bg-neutral-50 dark:hover:bg-neutral-900/70 transition-colors overflow-hidden">
      <Link
        to={`/article/${nip19.naddrEncode(naddr)}`}
        className="block p-4"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-start gap-3">
          <div className="flex-shrink-0 w-12 h-12 bg-accent-100 dark:bg-accent-900/20 rounded-lg flex items-center justify-center">
            <FileText className="w-6 h-6 text-accent-600 dark:text-accent-400" />
          </div>
          <div className="flex-1 min-w-0">
            <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 line-clamp-2 mb-1">
              {title}
            </h3>
            {profile?.about && (
              <p className="text-sm text-neutral-600 dark:text-neutral-400 line-clamp-2 mb-2">
                {profile.about}
              </p>
            )}
            <div className="flex items-center gap-3 text-xs text-neutral-500 dark:text-neutral-500">
              <span className="font-medium">{displayName}</span>
              {naddr.kind === NDKKind.Article && (
                <>
                  <span className="text-neutral-300 dark:text-neutral-700">·</span>
                  <span className="flex items-center gap-1">
                    <Clock className="w-3 h-3" />
                    Long-form article
                  </span>
                </>
              )}
            </div>
          </div>
        </div>
      </Link>
    </div>
  );
}
</file>

<file path="src/components/content/EmbeddedNote.tsx">
import { useEvent, useProfile } from '@nostr-dev-kit/ndk-hooks';
import { formatDistanceToNow } from 'date-fns';
import { UserAvatar } from '@/components/ui/UserAvatar';
import { Link, useNavigate } from 'react-router-dom';
import { nip19 } from 'nostr-tools';
interface EmbeddedNoteProps {
  eventId: string;
}
export function EmbeddedNote({ eventId }: EmbeddedNoteProps) {
  const event = useEvent(eventId);
  const loading = !event;
  const error = false;
  const profile = useProfile(event?.author?.pubkey);
  const navigate = useNavigate();
  if (loading) {
    return (
      <div className="my-3 p-4 border border-neutral-200 dark:border-neutral-800 rounded-xl bg-neutral-50 dark:bg-neutral-900/50 animate-pulse">
        <div className="h-4 bg-neutral-200 dark:bg-neutral-800 rounded w-3/4 mb-2"></div>
        <div className="h-4 bg-neutral-200 dark:bg-neutral-800 rounded w-1/2"></div>
      </div>
    );
  }
  if (error || !event) {
    return null;
  }
  const npub = event.author?.npub || (event.pubkey ? nip19.npubEncode(event.pubkey) : '');
  const displayName = profile?.name || profile?.displayName || 'Anonymous';
  const handle = profile?.nip05 ? `@${profile.nip05.split('@')[0]}` : `@${npub.slice(5, 12)}`;
  return (
    <div className="my-3 p-4 border border-neutral-200 dark:border-neutral-800 rounded-xl bg-neutral-50 dark:bg-neutral-900/50 hover:bg-neutral-100 dark:hover:bg-neutral-900/70 transition-colors cursor-pointer"
         onClick={(e) => {
           e.stopPropagation();
           const neventId = event.encode();
           navigate(`/e/${neventId}`);
         }}>
      <div className="flex items-start gap-3">
        <Link to={`/p/${npub}`} onClick={(e) => e.stopPropagation()}>
          <UserAvatar
            pubkey={event.pubkey}
            size="sm"
            className="w-9 h-9"
          />
        </Link>
        <div className="flex-1 min-w-0">
          <div className="flex items-center gap-2 text-sm">
            <Link
              to={`/p/${npub}`}
              className="font-semibold text-neutral-900 dark:text-neutral-100 hover:underline"
              onClick={(e) => e.stopPropagation()}
            >
              {displayName}
            </Link>
            <span className="text-neutral-500 dark:text-neutral-500">
              {handle}
            </span>
            <span className="text-neutral-300 dark:text-neutral-700">·</span>
            <time className="text-neutral-500 dark:text-neutral-500 text-xs">
              {formatDistanceToNow(new Date(event.created_at! * 1000), { addSuffix: true })}
            </time>
          </div>
          <div className="mt-1">
            <p className="text-neutral-700 dark:text-neutral-300 text-sm leading-relaxed whitespace-pre-wrap break-words line-clamp-4">
              {event.content}
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/content/index.ts">
export { ContentRenderer } from './ContentRenderer';
export { EmbeddedNote } from './EmbeddedNote';
export { EmbeddedArticle } from './EmbeddedArticle';
export { MediaEmbed } from './MediaEmbed';
</file>

<file path="src/components/content/MediaEmbed.tsx">
import { useState, useMemo } from 'react';
import { Play, Volume2, VolumeX, Image as ImageIcon } from 'lucide-react';
interface MediaEmbedProps {
  url: string;
  className?: string;
}
export function MediaEmbed({ url, className = '' }: MediaEmbedProps) {
  const [showMedia, setShowMedia] = useState(false);
  const [muted, setMuted] = useState(true);
  const [imageError, setImageError] = useState(false);
  const mediaType = useMemo(() => {
    const lowerUrl = url.toLowerCase();
    // Image formats
    if (/\.(jpg|jpeg|png|gif|webp|svg)(\?|$)/i.test(lowerUrl)) {
      return 'image';
    }
    // Video formats
    if (/\.(mp4|webm|mov)(\?|$)/i.test(lowerUrl)) {
      return 'video';
    }
    // Audio formats
    if (/\.(mp3|wav|ogg|m4a)(\?|$)/i.test(lowerUrl)) {
      return 'audio';
    }
    // YouTube
    if (/youtube\.com\/watch\?v=([a-zA-Z0-9_-]+)|youtu\.be\/([a-zA-Z0-9_-]+)/i.test(lowerUrl)) {
      return 'youtube';
    }
    return 'unknown';
  }, [url]);
  const getYouTubeId = (url: string) => {
    const match = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/);
    return match ? match[1] : null;
  };
  if (mediaType === 'image') {
    if (imageError) {
      return (
        <div className="my-2 p-4 bg-neutral-100 dark:bg-neutral-900 rounded-lg flex items-center gap-2 text-sm text-neutral-600 dark:text-neutral-400">
          <ImageIcon className="w-4 h-4" />
          <span>Image could not be loaded</span>
        </div>
      );
    }
    return (
      <div className={`my-2 ${className}`}>
        <img
          src={url}
          alt="Embedded content"
          className="max-w-full h-auto rounded-lg cursor-pointer hover:opacity-95 transition-opacity"
          loading="lazy"
          onError={() => setImageError(true)}
          onClick={(e) => {
            e.stopPropagation();
            window.open(url, '_blank');
          }}
        />
      </div>
    );
  }
  if (mediaType === 'video') {
    if (!showMedia) {
      return (
        <div className={`my-2 ${className}`}>
          <div
            className="relative bg-neutral-900 rounded-lg aspect-video flex items-center justify-center cursor-pointer group"
            onClick={(e) => {
              e.stopPropagation();
              setShowMedia(true);
            }}
          >
            <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black/30 rounded-lg"></div>
            <button className="relative z-10 w-16 h-16 bg-white/90 rounded-full flex items-center justify-center group-hover:bg-white transition-colors">
              <Play className="w-8 h-8 text-neutral-900 ml-1" fill="currentColor" />
            </button>
            <div className="absolute bottom-4 left-4 text-white text-sm font-medium">
              Click to play video
            </div>
          </div>
        </div>
      );
    }
    return (
      <div className={`my-2 relative ${className}`}>
        <video
          src={url}
          controls
          autoPlay
          muted={muted}
          className="max-w-full h-auto rounded-lg"
          onClick={(e) => e.stopPropagation()}
        />
        <button
          className="absolute top-4 right-4 p-2 bg-black/50 rounded-lg text-white hover:bg-black/70 transition-colors"
          onClick={(e) => {
            e.stopPropagation();
            setMuted(!muted);
          }}
        >
          {muted ? <VolumeX className="w-5 h-5" /> : <Volume2 className="w-5 h-5" />}
        </button>
      </div>
    );
  }
  if (mediaType === 'audio') {
    return (
      <div className={`my-2 ${className}`}>
        <audio
          src={url}
          controls
          className="w-full max-w-md"
          onClick={(e) => e.stopPropagation()}
        />
      </div>
    );
  }
  if (mediaType === 'youtube') {
    const videoId = getYouTubeId(url);
    if (!videoId) return null;
    if (!showMedia) {
      return (
        <div className={`my-2 ${className}`}>
          <div
            className="relative bg-neutral-900 rounded-lg aspect-video flex items-center justify-center cursor-pointer group"
            style={{
              backgroundImage: `url(https://img.youtube.com/vi/${videoId}/maxresdefault.jpg)`,
              backgroundSize: 'cover',
              backgroundPosition: 'center',
            }}
            onClick={(e) => {
              e.stopPropagation();
              setShowMedia(true);
            }}
          >
            <div className="absolute inset-0 bg-black/40 rounded-lg"></div>
            <button className="relative z-10 w-16 h-16 bg-red-600 rounded-full flex items-center justify-center group-hover:bg-red-700 transition-colors">
              <Play className="w-8 h-8 text-white ml-1" fill="currentColor" />
            </button>
          </div>
        </div>
      );
    }
    return (
      <div className={`my-2 ${className}`}>
        <div className="relative aspect-video">
          <iframe
            src={`https://www.youtube.com/embed/${videoId}?autoplay=1`}
            title="YouTube video player"
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowFullScreen
            className="absolute inset-0 w-full h-full rounded-lg"
            onClick={(e) => e.stopPropagation()}
          />
        </div>
      </div>
    );
  }
  return null;
}
</file>

<file path="src/components/layout/Layout.tsx">
import { Outlet, useNavigate } from 'react-router-dom';
import { Sidebar } from '@/components/navigation/Sidebar';
import { BottomNav } from '@/components/navigation/BottomNav';
import { LoginButton } from '@/features/auth/LoginButton';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { FAB } from '@/components/ui/FAB';
import { Bell } from 'lucide-react';
import { RelaySelector } from '@/components/navigation/RelaySelector';
export function Layout() {
  const currentUser = useNDKCurrentUser();
  const navigate = useNavigate();
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Sidebar for desktop */}
      <Sidebar />
      {/* Main content area */}
      <div className="md:ml-64 lg:ml-72 flex flex-col min-h-screen">
        {/* Mobile header */}
        <header className="md:hidden sticky top-0 z-50 bg-white/80 dark:bg-black/80 backdrop-blur-xl border-b border-gray-200 dark:border-gray-800">
          <div className="flex items-center justify-between px-4 h-14">
            <h1 className="text-lg font-bold text-gray-900 dark:text-white">
              Voces
            </h1>
            <div className="flex items-center gap-2">
              <RelaySelector />
              {currentUser && (
                <button
                  onClick={() => navigate('/notifications')}
                  className="relative p-2 hover:bg-neutral-200/50 dark:hover:bg-neutral-800/50 rounded-lg transition-all duration-200"
                >
                  <Bell className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
                  {/* Subtle notification dot */}
                  <span className="absolute top-1.5 right-1.5 w-1.5 h-1.5 bg-accent-500 rounded-full" />
                </button>
              )}
              {!currentUser && <LoginButton />}
            </div>
          </div>
        </header>
        {/* Desktop header */}
        <header className="hidden md:block sticky top-0 z-40 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
          <div className="flex items-center justify-between px-6 py-4">
            <RelaySelector />
            <div className="flex-1" />
            <LoginButton />
          </div>
        </header>
        {/* Page content */}
        <main className="flex-1 pb-20 md:pb-0">
          <Outlet />
        </main>
      </div>
      {/* Bottom navigation for mobile - always show */}
      <BottomNav />
      {/* FAB for compose */}
      {currentUser && <FAB />}
    </div>
  );
}
</file>

<file path="src/components/navigation/BottomNav.tsx">
import { Home, Store, Wallet, TrendingUp, User } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';
import { cn } from '@/lib/utils';
import { useTranslation } from 'react-i18next';
const navItemsConfig = [
  { path: '/', icon: Home, key: 'feed' },
  { path: '/marketplace', icon: Store, key: 'marketplace' },
  { path: '/wallet', icon: Wallet, key: 'wallet' },
  { path: '/trades', icon: TrendingUp, key: 'trades' },
  { path: '/profile', icon: User, key: 'profile' },
];
export function BottomNav() {
  const { t } = useTranslation();
  const location = useLocation();
  const navItems = navItemsConfig.map(item => ({
    ...item,
    label: t(`navigation.${item.key}`)
  }));
  return (
    <nav className="fixed bottom-0 left-0 right-0 md:hidden z-40">
      {/* Clean bottom nav */}
      <div className="bg-white dark:bg-black border-t border-gray-200 dark:border-gray-800">
        <div className="flex items-center justify-around h-16 px-3">
          {navItems.map(({ path, icon: Icon, label }) => {
            const isActive = location.pathname === path;
            return (
              <Link
                key={path}
                to={path}
                className="relative flex flex-col items-center justify-center gap-1 w-full h-full group"
              >
                <div className="relative">
                  <Icon
                    className={cn(
                      'w-5 h-5 transition-colors duration-200',
                      isActive
                        ? 'text-blue-600 dark:text-blue-400'
                        : 'text-gray-400 dark:text-gray-500'
                    )}
                    strokeWidth={isActive ? 2 : 1.5}
                  />
                </div>
                <span className={cn(
                  'text-xs font-medium transition-colors duration-200 mt-0.5',
                  isActive
                    ? 'text-blue-600 dark:text-blue-400'
                    : 'text-gray-500 dark:text-gray-400'
                )}>
                  {label}
                </span>
              </Link>
            );
          })}
        </div>
      </div>
    </nav>
  );
}
</file>

<file path="src/components/navigation/RelaySelector.tsx">
import { ChevronDown, Globe, Circle, Check } from "lucide-react";
import { useState, useRef, useEffect } from "react";
import { useSettingsStore } from "@/stores/settingsStore";
import { useNavigate } from "react-router-dom";
export function RelaySelector() {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();
  const { relays, selectedRelay, setSelectedRelay } = useSettingsStore();
  const enabledRelays = relays.filter(r => r.enabled);
  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  const handleRelaySelect = (relayUrl: string | null) => {
    setSelectedRelay(relayUrl);
    setIsOpen(false);
  };
  const getRelayDisplayName = (url: string) => {
    try {
      const urlObj = new URL(url);
      return urlObj.hostname.replace("wss://", "").replace("ws://", "");
    } catch {
      return url.replace("wss://", "").replace("ws://", "");
    }
  };
  const currentRelayDisplay = selectedRelay
    ? getRelayDisplayName(selectedRelay)
    : `All Relays (${enabledRelays.length})`;
  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-1.5 px-2 py-1 text-sm text-gray-600 dark:text-gray-400
                   hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
      >
        <Globe className="h-4 w-4" />
        <span className="max-w-[140px] truncate font-normal">{currentRelayDisplay}</span>
        <ChevronDown className={`h-3 w-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      {isOpen && (
        <div className="absolute top-full mt-2 right-0 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-lg
                        border border-gray-200 dark:border-gray-700 overflow-hidden z-50">
          <div className="py-1">
            {/* All Relays option */}
            <button
              onClick={() => handleRelaySelect(null)}
              className="w-full flex items-center justify-between px-4 py-2 text-sm text-gray-700 dark:text-gray-200
                         hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            >
              <div className="flex items-center gap-2">
                <Globe className="h-4 w-4 text-blue-500" />
                <span>All Relays ({enabledRelays.length})</span>
              </div>
              {!selectedRelay && <Check className="h-4 w-4 text-green-500" />}
            </button>
            {/* Divider */}
            <div className="h-px bg-gray-200 dark:bg-gray-700 my-1" />
            {/* Individual relays */}
            {enabledRelays.length > 0 ? (
              enabledRelays.map((relay) => (
                <button
                  key={relay.url}
                  onClick={() => handleRelaySelect(relay.url)}
                  className="w-full flex items-center justify-between px-4 py-2 text-sm text-gray-700 dark:text-gray-200
                             hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                >
                  <div className="flex items-center gap-2">
                    <Circle
                      className={`h-2 w-2 ${relay.write && relay.read ? 'fill-green-500 text-green-500' :
                                             relay.read ? 'fill-blue-500 text-blue-500' :
                                             'fill-orange-500 text-orange-500'}`}
                    />
                    <span className="truncate">{getRelayDisplayName(relay.url)}</span>
                  </div>
                  {selectedRelay === relay.url && <Check className="h-4 w-4 text-green-500" />}
                </button>
              ))
            ) : (
              <div className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">
                No relays enabled
              </div>
            )}
            {/* Divider */}
            <div className="h-px bg-gray-200 dark:bg-gray-700 my-1" />
            {/* Settings link */}
            <button
              onClick={() => {
                setIsOpen(false);
                navigate('/settings');
              }}
              className="w-full flex items-center px-4 py-2 text-sm text-blue-600 dark:text-blue-400
                         hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            >
              Manage Relays →
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/navigation/Sidebar.tsx">
import { Home, Edit3, Bell, User, Wallet, TrendingUp, Settings, ShoppingBag, Package } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';
import { cn } from '@/lib/utils';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { useTranslation } from 'react-i18next';
import { WalletWidget } from '../wallet/WalletWidget';
import { UserAvatar } from '../ui/UserAvatar';
const navItemsConfig = [
  { path: '/', icon: Home, key: 'feed' },
  { path: '/compose', icon: Edit3, key: 'compose' },
  { path: '/notifications', icon: Bell, key: 'notifications' },
  { path: '/profile', icon: User, key: 'profile' },
  { path: '/packs', icon: Package, key: 'followPacks' },
  { path: '/marketplace', icon: ShoppingBag, key: 'marketplace' },
  { path: '/wallet', icon: Wallet, key: 'wallet' },
  { path: '/trades', icon: TrendingUp, key: 'trades' },
];
export function Sidebar() {
  const { t } = useTranslation();
  const location = useLocation();
  const currentUser = useNDKCurrentUser();
  const profile = useProfile(currentUser?.pubkey);
  const navItems = navItemsConfig.map(item => ({
    ...item,
    label: item.key === 'compose' ? 'Compose' : t(`navigation.${item.key}`)
  }));
  return (
    <aside className="hidden md:flex md:w-64 lg:w-72 flex-col h-screen fixed left-0 top-0 bg-black border-r border-neutral-800/50">
      {/* Clean logo without gradients */}
      <div className="flex items-center gap-3 px-6 py-6 border-b border-neutral-800/50">
        <h1 className="text-xl font-medium tracking-tight text-white">
          Voces
        </h1>
      </div>
      <nav className="flex-1 px-3 py-6">
        <div className="space-y-1">
          {navItems.map(({ path, icon: Icon, label }) => {
            const isActive = location.pathname === path ||
                           (path === '/packs' && location.pathname.startsWith('/packs/'));
            return (
              <Link
                key={path}
                to={path}
                className={cn(
                  'flex items-center gap-3 px-3 py-2.5 rounded-lg transition-all font-medium text-sm',
                  isActive
                    ? 'bg-neutral-900 text-white'
                    : 'text-neutral-400 hover:bg-neutral-900/50 hover:text-neutral-200'
                )}
              >
                <Icon className="w-5 h-5" strokeWidth={isActive ? 2 : 1.5} />
                <span>{label}</span>
              </Link>
            );
          })}
        </div>
      </nav>
      {/* Wallet Widget */}
      <div className="px-3 mb-4">
        <WalletWidget />
      </div>
      {currentUser && (
        <div className="border-t border-neutral-800/50 p-4">
          <div className="flex items-center gap-3 mb-4">
            <UserAvatar pubkey={currentUser.pubkey} size="md" />
            <div className="flex-1 min-w-0">
              <p className="font-medium text-sm truncate text-white">
                {profile?.name || 'Anonymous'}
              </p>
              <p className="text-xs text-neutral-500 truncate">
                {profile?.nip05 || currentUser.npub?.slice(0, 16) + '...'}
              </p>
            </div>
          </div>
          <div className="space-y-1">
            <Link
              to="/settings"
              className="flex items-center gap-3 px-3 py-2 rounded-lg text-neutral-400 hover:bg-neutral-900/50 hover:text-neutral-200 transition-colors"
            >
              <Settings className="w-4 h-4" />
              <span className="text-sm">{t('navigation.settings')}</span>
            </Link>
          </div>
        </div>
      )}
    </aside>
  );
}
</file>

<file path="src/components/ui/Avatar.tsx">
import { cn } from '@/lib/utils';
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
interface AvatarProps {
  pubkey?: string;
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  className?: string;
  fallback?: string;
}
const sizeClasses = {
  xs: 'w-8 h-8 text-xs',
  sm: 'w-10 h-10 text-sm',
  md: 'w-12 h-12 text-base',
  lg: 'w-16 h-16 text-lg',
  xl: 'w-20 h-20 text-xl',
};
export function Avatar({ pubkey, size = 'md', className, fallback }: AvatarProps) {
  const profile = useProfile(pubkey);
  const imageUrl = profile?.image || profile?.picture;
  const displayName = profile?.displayName || profile?.name || fallback || '?';
  const initials = displayName.slice(0, 2).toUpperCase();
  if (imageUrl) {
    return (
      <img
        src={imageUrl}
        alt={displayName}
        className={cn(
          'rounded-full object-cover bg-neutral-100 dark:bg-neutral-900',
          sizeClasses[size],
          className
        )}
        loading="lazy"
      />
    );
  }
  // Minimal, monochrome fallback
  return (
    <div
      className={cn(
        'rounded-full bg-neutral-200 dark:bg-neutral-800 flex items-center justify-center text-neutral-600 dark:text-neutral-400 font-medium',
        sizeClasses[size],
        className
      )}
    >
      {initials}
    </div>
  );
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"
export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"
const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"
const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"
const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"
const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"
const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/FAB.tsx">
import { motion } from 'framer-motion';
import { Plus, Edit3, TrendingUp, ShoppingBag } from 'lucide-react';
import { useLocation } from 'react-router-dom';
import { cn } from '@/lib/utils';
import { useState } from 'react';
import { CreateOrderModal } from '@/features/trades/CreateOrderModal';
import { useNavigate } from 'react-router-dom';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
interface FABProps {
  className?: string;
  icon?: 'plus' | 'edit';
}
export function FAB({ className }: FABProps) {
  const navigate = useNavigate();
  const location = useLocation();
  const currentUser = useNDKCurrentUser();
  const [showCreateOrderModal, setShowCreateOrderModal] = useState(false);
  // Determine FAB action and icon based on current route
  const getFABConfig = () => {
    const path = location.pathname;
    if (path.startsWith('/trades')) {
      return {
        icon: TrendingUp,
        label: 'Create Trade',
        action: () => setShowCreateOrderModal(true),
        requiresAuth: true
      };
    }
    if (path.startsWith('/marketplace')) {
      return {
        icon: ShoppingBag,
        label: 'List Item',
        action: () => navigate('/marketplace/create'),
        requiresAuth: true
      };
    }
    if (path.startsWith('/wallet')) {
      return {
        icon: Plus,
        label: 'Add Funds',
        action: () => {}, // TODO: Implement wallet action
        requiresAuth: false
      };
    }
    // Default to compose for feed/home
    return {
      icon: Edit3,
      label: 'Compose',
      action: () => navigate('/compose'),
      requiresAuth: true
    };
  };
  const config = getFABConfig();
  const Icon = config.icon;
  // Don't show FAB if auth is required but user not logged in
  if (config.requiresAuth && !currentUser) {
    return null;
  }
  const handleClick = () => {
    config.action();
  };
  return (
    <>
      <motion.button
        onClick={handleClick}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", stiffness: 300, damping: 20 }}
        className={cn(
          "fixed bottom-20 right-4 z-40",
          "w-14 h-14 rounded-full",
          "bg-black dark:bg-white",
          "shadow-lg shadow-black/25 dark:shadow-white/10",
          "flex items-center justify-center",
          "md:hidden", // Only show on mobile
          className
        )}
        aria-label={config.label}
      >
        <Icon className="w-6 h-6 text-white" />
      </motion.button>
      {/* Modal for trades page */}
      {showCreateOrderModal && (
        <CreateOrderModal onClose={() => setShowCreateOrderModal(false)} />
      )}
    </>
  );
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from 'react';
import { cn } from '@/lib/utils';
export type InputProps = React.InputHTMLAttributes<HTMLInputElement>
const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus-visible:ring-purple-400',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';
export { Input };
</file>

<file path="src/components/ui/label.tsx">
import * as React from 'react';
import { cn } from '@/lib/utils';
export type LabelProps = React.LabelHTMLAttributes<HTMLLabelElement>
const Label = React.forwardRef<HTMLLabelElement, LabelProps>(
  ({ className, ...props }, ref) => {
    return (
      <label
        ref={ref}
        className={cn(
          'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
          className
        )}
        {...props}
      />
    );
  }
);
Label.displayName = 'Label';
export { Label };
</file>

<file path="src/components/ui/select.tsx">
import * as React from 'react';
import { ChevronDown } from 'lucide-react';
import { cn } from '@/lib/utils';
const SelectContext = React.createContext<{
  value: string;
  onValueChange: (value: string) => void;
  open: boolean;
  setOpen: (open: boolean) => void;
}>({
  value: '',
  onValueChange: () => {},
  open: false,
  setOpen: () => {},
});
interface SelectProps {
  value?: string;
  onValueChange?: (value: string) => void;
  children: React.ReactNode;
}
export function Select({ value = '', onValueChange = () => {}, children }: SelectProps) {
  const [open, setOpen] = React.useState(false);
  return (
    <SelectContext.Provider value={{ value, onValueChange, open, setOpen }}>
      <div className="relative">
        {children}
      </div>
    </SelectContext.Provider>
  );
}
interface SelectTriggerProps {
  className?: string;
  children: React.ReactNode;
}
export const SelectTrigger = React.forwardRef<HTMLButtonElement, SelectTriggerProps>(
  ({ className, children, ...props }, ref) => {
    const { open, setOpen } = React.useContext(SelectContext);
    return (
      <button
        ref={ref}
        type="button"
        onClick={() => setOpen(!open)}
        className={cn(
          'flex h-10 w-full items-center justify-between rounded-md border border-gray-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus:ring-purple-400',
          className
        )}
        {...props}
      >
        {children}
        <ChevronDown className="h-4 w-4 opacity-50" />
      </button>
    );
  }
);
SelectTrigger.displayName = 'SelectTrigger';
export function SelectValue({ placeholder }: { placeholder?: string }) {
  const { value } = React.useContext(SelectContext);
  return <span>{value || placeholder || 'Select...'}</span>;
}
interface SelectContentProps {
  className?: string;
  children: React.ReactNode;
}
export function SelectContent({ className, children }: SelectContentProps) {
  const { open, setOpen } = React.useContext(SelectContext);
  const ref = React.useRef<HTMLDivElement>(null);
  React.useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setOpen(false);
      }
    }
    if (open) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [open, setOpen]);
  if (!open) return null;
  return (
    <div
      ref={ref}
      className={cn(
        'absolute z-50 mt-1 max-h-60 w-full overflow-auto rounded-md border border-gray-200 bg-white py-1 text-sm shadow-lg dark:border-gray-800 dark:bg-gray-950',
        className
      )}
    >
      {children}
    </div>
  );
}
interface SelectItemProps {
  value: string;
  className?: string;
  children: React.ReactNode;
}
export function SelectItem({ value, className, children }: SelectItemProps) {
  const { value: selectedValue, onValueChange, setOpen } = React.useContext(SelectContext);
  const isSelected = selectedValue === value;
  return (
    <div
      onClick={() => {
        onValueChange(value);
        setOpen(false);
      }}
      className={cn(
        'relative cursor-pointer select-none px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800',
        isSelected && 'bg-gray-100 dark:bg-gray-800',
        className
      )}
    >
      {children}
    </div>
  );
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"
const Tabs = TabsPrimitive.Root
const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-500 dark:bg-gray-800 dark:text-gray-400",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName
const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:text-gray-950 data-[state=active]:shadow-sm dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300 dark:data-[state=active]:bg-gray-950 dark:data-[state=active]:text-gray-50",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName
export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from 'react';
import { cn } from '@/lib/utils';
export type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>
const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus-visible:ring-purple-400',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';
export { Textarea };
</file>

<file path="src/components/ui/UserAvatar.tsx">
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { cn } from '@/lib/utils';
interface UserAvatarProps {
  pubkey?: string;
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  className?: string;
}
const sizeClasses = {
  xs: 'w-8 h-8 text-xs',
  sm: 'w-10 h-10 text-sm',
  md: 'w-12 h-12 text-base',
  lg: 'w-16 h-16 text-lg',
  xl: 'w-20 h-20 text-xl',
};
export function UserAvatar({ pubkey, size = 'md', className }: UserAvatarProps) {
  const profile = useProfile(pubkey);
  // Try multiple image sources
  const imageUrl = profile?.picture || profile?.image || profile?.banner;
  const displayName = profile?.displayName || profile?.name || 'Anonymous';
  // Generate initials from name
  const initials = displayName
    .split(' ')
    .map(n => n[0])
    .slice(0, 2)
    .join('')
    .toUpperCase() || '?';
  if (imageUrl) {
    return (
      <img
        src={imageUrl}
        alt={displayName}
        className={cn(
          'rounded-full object-cover bg-neutral-100 dark:bg-neutral-900',
          sizeClasses[size],
          className
        )}
        loading="lazy"
        onError={(e) => {
          // Hide broken images
          (e.target as HTMLImageElement).style.display = 'none';
        }}
      />
    );
  }
  // Consistent color based on pubkey for fallback
  const colors = [
    'bg-blue-500',
    'bg-green-500',
    'bg-yellow-500',
    'bg-red-500',
    'bg-purple-500',
    'bg-indigo-500',
    'bg-pink-500',
    'bg-teal-500',
  ];
  const colorIndex = pubkey ?
    parseInt(pubkey.slice(0, 8), 16) % colors.length :
    0;
  const bgColor = colors[colorIndex];
  return (
    <div
      className={cn(
        'rounded-full flex items-center justify-center text-white font-semibold',
        bgColor,
        sizeClasses[size],
        className
      )}
    >
      {initials}
    </div>
  );
}
</file>

<file path="src/components/wallet/index.ts">
export { Wallet } from './Wallet';
export type { WalletVariant } from './Wallet';
export { WalletBalance } from './WalletBalance';
export { MintConfiguration } from './MintConfiguration';
export { TransactionButton } from './TransactionButton';
export { QRScanner } from './QRScanner';
export { TransactionModal } from './TransactionModal';
export { ProfessionalWallet } from './ProfessionalWallet';
</file>

<file path="src/components/wallet/MintConfiguration.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Settings, Plus, Trash2, Info, Check, X } from 'lucide-react';
interface Mint {
  id: string;
  url: string;
  name: string;
  balance?: number;
  isActive: boolean;
}
interface MintConfigurationProps {
  variant?: 'minimal' | 'detailed' | 'card';
}
export function MintConfiguration({ variant = 'minimal' }: MintConfigurationProps) {
  const [mints, setMints] = useState<Mint[]>([
    { id: '1', url: 'https://mint.minibits.cash', name: 'Minibits', balance: 10000, isActive: true },
    { id: '2', url: 'https://stablenut.umint.cash', name: 'Stablenut', balance: 5000, isActive: false },
  ]);
  const [isExpanded, setIsExpanded] = useState(false);
  const [newMintUrl, setNewMintUrl] = useState('');
  const [showTooltip, setShowTooltip] = useState(false);
  const addMint = () => {
    if (newMintUrl) {
      const newMint: Mint = {
        id: Date.now().toString(),
        url: newMintUrl,
        name: new URL(newMintUrl).hostname,
        balance: 0,
        isActive: false
      };
      setMints([...mints, newMint]);
      setNewMintUrl('');
    }
  };
  const removeMint = (id: string) => {
    setMints(mints.filter(m => m.id !== id));
  };
  const toggleMint = (id: string) => {
    setMints(mints.map(m => 
      m.id === id ? { ...m, isActive: !m.isActive } : m
    ));
  };
  if (variant === 'card') {
    return (
      <motion.div
        className="bg-white rounded-2xl shadow-sm border border-gray-100 p-6"
        whileHover={{ y: -2 }}
        transition={{ type: "spring", stiffness: 300 }}
      >
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium text-gray-900">Cashu Mints</h3>
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="p-2 hover:bg-gray-50 rounded-lg transition-colors"
          >
            <Settings className="w-5 h-5 text-gray-600" />
          </button>
        </div>
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="space-y-3 overflow-hidden"
            >
              {mints.map((mint) => (
                <MintItem
                  key={mint.id}
                  mint={mint}
                  onToggle={() => toggleMint(mint.id)}
                  onRemove={() => removeMint(mint.id)}
                />
              ))}
              <AddMintInput
                value={newMintUrl}
                onChange={setNewMintUrl}
                onAdd={addMint}
              />
            </motion.div>
          )}
        </AnimatePresence>
        {!isExpanded && (
          <div className="text-sm text-gray-600">
            {mints.filter(m => m.isActive).length} active mints
          </div>
        )}
      </motion.div>
    );
  }
  if (variant === 'detailed') {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <h3 className="text-sm font-medium text-gray-700">Mints</h3>
            <button
              onMouseEnter={() => setShowTooltip(true)}
              onMouseLeave={() => setShowTooltip(false)}
              className="relative"
            >
              <Info className="w-4 h-4 text-gray-400" />
              <AnimatePresence>
                {showTooltip && (
                  <motion.div
                    initial={{ opacity: 0, y: 5 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 5 }}
                    className="absolute left-6 top-0 bg-gray-800 text-white text-xs px-2 py-1 rounded-md whitespace-nowrap z-10"
                  >
                    Cashu mint (server)
                  </motion.div>
                )}
              </AnimatePresence>
            </button>
          </div>
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="text-sm text-blue-600 hover:text-blue-700"
          >
            {isExpanded ? 'Close' : 'Configure'}
          </button>
        </div>
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="space-y-2 overflow-hidden"
            >
              {mints.map((mint) => (
                <MintItem
                  key={mint.id}
                  mint={mint}
                  onToggle={() => toggleMint(mint.id)}
                  onRemove={() => removeMint(mint.id)}
                  variant="detailed"
                />
              ))}
              <AddMintInput
                value={newMintUrl}
                onChange={setNewMintUrl}
                onAdd={addMint}
                variant="inline"
              />
            </motion.div>
          )}
        </AnimatePresence>
        {!isExpanded && (
          <div className="flex gap-2 flex-wrap">
            {mints.filter(m => m.isActive).map((mint) => (
              <span
                key={mint.id}
                className="text-xs bg-green-50 text-green-700 px-2 py-1 rounded-full"
              >
                {mint.name}
              </span>
            ))}
          </div>
        )}
      </div>
    );
  }
  // Minimal variant (default)
  return (
    <button
      onClick={() => setIsExpanded(!isExpanded)}
      onMouseEnter={() => setShowTooltip(true)}
      onMouseLeave={() => setShowTooltip(false)}
      className="relative flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
    >
      <Settings className="w-4 h-4" />
      <span>Mint</span>
      <AnimatePresence>
        {showTooltip && (
          <motion.div
            initial={{ opacity: 0, y: 5 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 5 }}
            className="absolute left-0 top-10 bg-gray-800 text-white text-xs px-2 py-1 rounded-md whitespace-nowrap z-10"
          >
            Cashu mint (server)
          </motion.div>
        )}
      </AnimatePresence>
    </button>
  );
}
interface MintItemProps {
  mint: Mint;
  onToggle: () => void;
  onRemove: () => void;
  variant?: 'compact' | 'detailed';
}
function MintItem({ mint, onToggle, onRemove, variant = 'compact' }: MintItemProps) {
  if (variant === 'detailed') {
    return (
      <motion.div
        initial={{ x: -10, opacity: 0 }}
        animate={{ x: 0, opacity: 1 }}
        className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
      >
        <div className="flex items-center gap-3">
          <button
            onClick={onToggle}
            className={`w-5 h-5 rounded-full border-2 flex items-center justify-center transition-all ${
              mint.isActive
                ? 'bg-green-500 border-green-500'
                : 'bg-white border-gray-300'
            }`}
          >
            {mint.isActive && <Check className="w-3 h-3 text-white" />}
          </button>
          <div>
            <div className="text-sm font-medium text-gray-900">{mint.name}</div>
            <div className="text-xs text-gray-500">{mint.url}</div>
            {mint.balance && (
              <div className="text-xs text-gray-600 mt-1">
                Balance: {mint.balance.toLocaleString()} sats
              </div>
            )}
          </div>
        </div>
        <button
          onClick={onRemove}
          className="p-1 hover:bg-gray-200 rounded transition-colors"
        >
          <Trash2 className="w-4 h-4 text-gray-500" />
        </button>
      </motion.div>
    );
  }
  return (
    <motion.div
      initial={{ x: -10, opacity: 0 }}
      animate={{ x: 0, opacity: 1 }}
      className="flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg"
    >
      <div className="flex items-center gap-2">
        <button
          onClick={onToggle}
          className={`w-4 h-4 rounded-full border-2 ${
            mint.isActive
              ? 'bg-green-500 border-green-500'
              : 'bg-white border-gray-300'
          }`}
        />
        <span className="text-sm text-gray-700">{mint.name}</span>
      </div>
      <button
        onClick={onRemove}
        className="p-1 hover:bg-gray-100 rounded"
      >
        <X className="w-3 h-3 text-gray-500" />
      </button>
    </motion.div>
  );
}
interface AddMintInputProps {
  value: string;
  onChange: (value: string) => void;
  onAdd: () => void;
  variant?: 'default' | 'inline';
}
function AddMintInput({ value, onChange, onAdd, variant = 'default' }: AddMintInputProps) {
  if (variant === 'inline') {
    return (
      <div className="flex gap-2">
        <input
          type="url"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder="https://mint.example.com"
          className="flex-1 px-3 py-2 text-sm border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500"
        />
        <button
          onClick={onAdd}
          disabled={!value}
          className="px-3 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Add
        </button>
      </div>
    );
  }
  return (
    <div className="flex items-center gap-2 p-2 border border-dashed border-gray-300 rounded-lg">
      <Plus className="w-4 h-4 text-gray-400" />
      <input
        type="url"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        onKeyDown={(e) => e.key === 'Enter' && onAdd()}
        placeholder="Add mint URL"
        className="flex-1 text-sm bg-transparent focus:outline-none"
      />
    </div>
  );
}
</file>

<file path="src/components/wallet/ProfessionalWallet.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  ArrowUpRight,
  ArrowDownLeft,
  Zap,
  Coffee,
  TrendingUp,
  TrendingDown,
  Clock,
  ChevronRight,
  Activity,
  Shield,
  Eye,
  EyeOff
} from 'lucide-react';
interface Transaction {
  id: string;
  type: 'sent' | 'received' | 'zap';
  description: string;
  amount: number;
  timestamp: string;
  icon?: 'zap' | 'coffee' | 'default';
  to?: string;
  from?: string;
  status?: 'pending' | 'completed';
}
export function ProfessionalWallet() {
  const [balance] = useState(21000);
  const [balanceHidden, setBalanceHidden] = useState(false);
  const [dailyChange] = useState(2500);
  const [selectedTab, setSelectedTab] = useState<'activity' | 'stats'>('activity');
  const transactions: Transaction[] = [
    {
      id: '1',
      type: 'zap',
      description: 'Zapped @jack',
      amount: -100,
      timestamp: '1h ago',
      icon: 'zap',
      to: 'jack',
      status: 'completed'
    },
    {
      id: '2',
      type: 'received',
      description: 'Payment received',
      amount: 500,
      timestamp: '2h ago',
      from: 'anon',
      status: 'completed'
    },
    {
      id: '3',
      type: 'sent',
      description: 'Coffee payment',
      amount: -250,
      timestamp: '3h ago',
      icon: 'coffee',
      to: 'Blue Bottle Coffee',
      status: 'completed'
    },
    {
      id: '4',
      type: 'zap',
      description: 'Zapped @fiatjaf',
      amount: -1000,
      timestamp: '1d ago',
      icon: 'zap',
      to: 'fiatjaf',
      status: 'completed'
    }
  ];
  const getTransactionIcon = (transaction: Transaction) => {
    if (transaction.icon === 'zap') {
      return <Zap className="w-5 h-5" />;
    }
    if (transaction.icon === 'coffee') {
      return <Coffee className="w-5 h-5" />;
    }
    if (transaction.type === 'sent') {
      return <ArrowUpRight className="w-5 h-5" />;
    }
    return <ArrowDownLeft className="w-5 h-5" />;
  };
  const getTransactionColor = (transaction: Transaction) => {
    if (transaction.type === 'received') {
      return 'text-emerald-400';
    }
    if (transaction.type === 'zap') {
      return 'text-purple-400';
    }
    return 'text-orange-400';
  };
  const getIconBgColor = (transaction: Transaction) => {
    if (transaction.type === 'received') {
      return 'bg-emerald-400/10 border-emerald-400/20';
    }
    if (transaction.type === 'zap') {
      return 'bg-purple-400/10 border-purple-400/20';
    }
    return 'bg-orange-400/10 border-orange-400/20';
  };
  return (
    <div className="w-full min-h-screen bg-gradient-to-b from-neutral-50 to-white dark:from-neutral-950 dark:to-black">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="max-w-lg mx-auto"
      >
        {/* Balance Section */}
        <div className="px-5 pt-8 pb-6">
          <div className="text-center">
            <div className="text-2xs uppercase tracking-wider text-neutral-500 mb-3 flex items-center justify-center gap-2">
              <span>Total Balance</span>
              <button
                onClick={() => setBalanceHidden(!balanceHidden)}
                className="p-1 hover:bg-neutral-200/50 dark:hover:bg-neutral-800/30 rounded-md transition-all"
              >
                {balanceHidden ? (
                  <Eye className="w-3.5 h-3.5" />
                ) : (
                  <EyeOff className="w-3.5 h-3.5" />
                )}
              </button>
            </div>
            <motion.div
              key={balanceHidden ? 'hidden' : 'visible'}
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="mb-3"
            >
              {balanceHidden ? (
                <div className="text-4xl font-light text-neutral-400 dark:text-neutral-600">•••••</div>
              ) : (
                <>
                  <div className="text-5xl font-light text-neutral-900 dark:text-neutral-50 tracking-tight">
                    {balance.toLocaleString()}
                  </div>
                  <div className="text-sm text-neutral-500 mt-1">sats</div>
                </>
              )}
            </motion.div>
            <div className={`inline-flex items-center gap-1 px-2.5 py-1 rounded-full text-xs font-medium ${
              dailyChange >= 0
                ? 'bg-success-50 text-success-700 dark:bg-success-950/30 dark:text-success-400'
                : 'bg-danger-50 text-danger-700 dark:bg-danger-950/30 dark:text-danger-400'
            }`}>
              {dailyChange >= 0 ? (
                <TrendingUp className="w-3 h-3" />
              ) : (
                <TrendingDown className="w-3 h-3" />
              )}
              <span>{dailyChange >= 0 ? '+' : ''}{dailyChange.toLocaleString()} today</span>
            </div>
          </div>
          {/* Action Buttons */}
          <div className="flex gap-3 mt-8">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="flex-1 bg-neutral-900 dark:bg-neutral-50 text-neutral-50 dark:text-neutral-900 py-3.5 rounded-xl font-medium transition-all flex items-center justify-center gap-2 min-h-[52px]"
            >
              <ArrowUpRight className="w-4 h-4" strokeWidth={2} />
              Send
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="flex-1 bg-neutral-100 dark:bg-neutral-900 text-neutral-900 dark:text-neutral-100 border border-neutral-200 dark:border-neutral-800 py-3.5 rounded-xl font-medium transition-all flex items-center justify-center gap-2 min-h-[52px]"
            >
              <ArrowDownLeft className="w-4 h-4" strokeWidth={2} />
              Receive
            </motion.button>
          </div>
        </div>
        {/* Quick Actions */}
        <div className="px-6 pb-4">
          <div className="grid grid-cols-2 gap-3">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="bg-gray-800/50 hover:bg-gray-800 border border-gray-700/50 rounded-xl p-3 flex items-center justify-between transition-all"
            >
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 bg-yellow-400/10 rounded-lg flex items-center justify-center">
                  <Activity className="w-4 h-4 text-yellow-400" />
                </div>
                <span className="text-sm text-gray-300">Mint</span>
              </div>
              <ChevronRight className="w-4 h-4 text-gray-500" />
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="bg-gray-800/50 hover:bg-gray-800 border border-gray-700/50 rounded-xl p-3 flex items-center justify-between transition-all"
            >
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 bg-blue-400/10 rounded-lg flex items-center justify-center">
                  <Shield className="w-4 h-4 text-blue-400" />
                </div>
                <span className="text-sm text-gray-300">Backup</span>
              </div>
              <ChevronRight className="w-4 h-4 text-gray-500" />
            </motion.button>
          </div>
        </div>
        {/* Tabs */}
        <div className="px-6">
          <div className="flex gap-1 p-1 bg-gray-800/30 rounded-xl">
            <button
              onClick={() => setSelectedTab('activity')}
              className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all ${
                selectedTab === 'activity'
                  ? 'bg-gray-700 text-white'
                  : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              Recent Activity
            </button>
            <button
              onClick={() => setSelectedTab('stats')}
              className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all ${
                selectedTab === 'stats'
                  ? 'bg-gray-700 text-white'
                  : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              Statistics
            </button>
          </div>
        </div>
        {/* Transactions List */}
        <div className="px-6 py-4">
          <AnimatePresence mode="wait">
            {selectedTab === 'activity' && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="space-y-3"
              >
                {transactions.map((transaction, index) => (
                  <motion.div
                    key={transaction.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.05 }}
                    whileHover={{ x: 4 }}
                    className="flex items-center justify-between p-3 rounded-xl hover:bg-gray-800/30 transition-all cursor-pointer group"
                  >
                    <div className="flex items-center gap-3">
                      <div className={`w-10 h-10 rounded-xl flex items-center justify-center border ${getIconBgColor(transaction)}`}>
                        <div className={getTransactionColor(transaction)}>
                          {getTransactionIcon(transaction)}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm font-medium text-gray-200">
                          {transaction.description}
                        </div>
                        <div className="flex items-center gap-2 text-xs text-gray-500">
                          <Clock className="w-3 h-3" />
                          <span>{transaction.timestamp}</span>
                          {transaction.status === 'pending' && (
                            <span className="px-1.5 py-0.5 bg-yellow-400/10 text-yellow-400 rounded text-xs">
                              Pending
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className={`text-sm font-semibold ${
                        transaction.amount > 0 ? 'text-emerald-400' : 'text-gray-300'
                      }`}>
                        {transaction.amount > 0 ? '+' : ''}{Math.abs(transaction.amount).toLocaleString()} sats
                      </div>
                      <div className="text-xs text-gray-500 opacity-0 group-hover:opacity-100 transition-opacity">
                        View details
                      </div>
                    </div>
                  </motion.div>
                ))}
              </motion.div>
            )}
            {selectedTab === 'stats' && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="space-y-4"
              >
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50">
                    <div className="text-xs text-gray-500 mb-1">Total Sent</div>
                    <div className="text-lg font-semibold text-orange-400">1,350 sats</div>
                    <div className="text-xs text-gray-500 mt-1">4 transactions</div>
                  </div>
                  <div className="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50">
                    <div className="text-xs text-gray-500 mb-1">Total Received</div>
                    <div className="text-lg font-semibold text-emerald-400">3,850 sats</div>
                    <div className="text-xs text-gray-500 mt-1">8 transactions</div>
                  </div>
                </div>
                <div className="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50">
                  <div className="flex items-center justify-between mb-3">
                    <div className="text-xs text-gray-500">Weekly Activity</div>
                    <TrendingUp className="w-4 h-4 text-emerald-400" />
                  </div>
                  <div className="flex items-end gap-1 h-12">
                    {[40, 65, 30, 80, 45, 90, 70].map((height, i) => (
                      <div
                        key={i}
                        className="flex-1 bg-gradient-to-t from-purple-500 to-purple-400 rounded-t"
                        style={{ height: `${height}%` }}
                      />
                    ))}
                  </div>
                  <div className="flex justify-between mt-2 text-xs text-gray-500">
                    <span>Mon</span>
                    <span>Sun</span>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
        {/* Footer */}
        <div className="px-6 pb-6">
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="w-full py-3 bg-gray-800/50 hover:bg-gray-800 border border-gray-700/50 rounded-xl text-sm text-gray-400 hover:text-gray-300 transition-all"
          >
            View All Transactions
          </motion.button>
        </div>
      </motion.div>
    </div>
  );
}
</file>

<file path="src/components/wallet/QRScanner.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Camera, X, Clipboard, QrCode } from 'lucide-react';
interface QRScannerProps {
  onScan: (data: string) => void;
  variant?: 'minimal' | 'detailed' | 'modal';
}
export function QRScanner({ onScan, variant = 'minimal' }: QRScannerProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [pasteValue, setPasteValue] = useState('');
  const [showPasteInput, setShowPasteInput] = useState(false);
  const handlePaste = () => {
    if (pasteValue) {
      onScan(pasteValue);
      setPasteValue('');
      setShowPasteInput(false);
      setIsOpen(false);
    }
  };
  const handleQuickPaste = async () => {
    try {
      const text = await navigator.clipboard.readText();
      if (text) {
        onScan(text);
        setIsOpen(false);
      }
    } catch (_err) {
      setShowPasteInput(true);
    }
  };
  if (variant === 'modal') {
    return (
      <>
        <motion.button
          onClick={() => setIsOpen(true)}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="p-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-colors"
        >
          <QrCode className="w-5 h-5" />
        </motion.button>
        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
              onClick={() => setIsOpen(false)}
            >
              <motion.div
                initial={{ scale: 0.9, y: 20 }}
                animate={{ scale: 1, y: 0 }}
                exit={{ scale: 0.9, y: 20 }}
                className="bg-white rounded-3xl p-6 max-w-md w-full shadow-2xl"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-xl font-semibold text-gray-900">Scan or Paste</h3>
                  <button
                    onClick={() => setIsOpen(false)}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <X className="w-5 h-5 text-gray-500" />
                  </button>
                </div>
                <div className="space-y-4">
                  <div className="bg-gray-100 rounded-2xl p-8 flex flex-col items-center justify-center">
                    <Camera className="w-12 h-12 text-gray-400 mb-3" />
                    <p className="text-sm text-gray-600 text-center">
                      Camera access needed for QR scanning
                    </p>
                    <button className="mt-4 text-sm text-purple-600 hover:text-purple-700">
                      Enable Camera
                    </button>
                  </div>
                  <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                      <div className="w-full border-t border-gray-200" />
                    </div>
                    <div className="relative flex justify-center text-sm">
                      <span className="bg-white px-3 text-gray-500">or</span>
                    </div>
                  </div>
                  <div className="space-y-3">
                    <button
                      onClick={handleQuickPaste}
                      className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-gray-50 hover:bg-gray-100 rounded-xl transition-colors"
                    >
                      <Clipboard className="w-4 h-4 text-gray-600" />
                      <span className="text-gray-700">Paste from Clipboard</span>
                    </button>
                    <AnimatePresence>
                      {showPasteInput && (
                        <motion.div
                          initial={{ height: 0, opacity: 0 }}
                          animate={{ height: "auto", opacity: 1 }}
                          exit={{ height: 0, opacity: 0 }}
                          className="overflow-hidden"
                        >
                          <input
                            type="text"
                            value={pasteValue}
                            onChange={(e) => setPasteValue(e.target.value)}
                            onKeyDown={(e) => e.key === 'Enter' && handlePaste()}
                            placeholder="Paste invoice here..."
                            className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:border-purple-500"
                            autoFocus
                          />
                          <button
                            onClick={handlePaste}
                            disabled={!pasteValue}
                            className="w-full mt-3 px-4 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                          >
                            Process Invoice
                          </button>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </>
    );
  }
  if (variant === 'detailed') {
    return (
      <div className="space-y-3">
        <button
          onClick={() => setShowPasteInput(!showPasteInput)}
          className="w-full flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl hover:from-purple-100 hover:to-pink-100 transition-all"
        >
          <div className="flex items-center gap-3">
            <QrCode className="w-5 h-5 text-purple-600" />
            <span className="text-gray-700 font-medium">Scan QR Code</span>
          </div>
          <span className="text-xs text-gray-500">Tap to paste</span>
        </button>
        <AnimatePresence>
          {showPasteInput && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="overflow-hidden"
            >
              <div className="flex gap-2">
                <input
                  type="text"
                  value={pasteValue}
                  onChange={(e) => setPasteValue(e.target.value)}
                  placeholder="Paste Lightning invoice..."
                  className="flex-1 px-3 py-2 text-sm border border-gray-200 rounded-lg focus:outline-none focus:border-purple-500"
                />
                <button
                  onClick={handlePaste}
                  disabled={!pasteValue}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg text-sm hover:bg-purple-700 disabled:opacity-50"
                >
                  Pay
                </button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    );
  }
  // Minimal variant (default)
  return (
    <div className="relative">
      <button
        onClick={() => setShowPasteInput(!showPasteInput)}
        className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
      >
        <Camera className="w-4 h-4" />
        <span>Scan</span>
      </button>
      <AnimatePresence>
        {showPasteInput && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute top-full left-0 mt-2 p-3 bg-white rounded-lg shadow-lg border border-gray-200 z-10"
          >
            <div className="flex gap-2">
              <input
                type="text"
                value={pasteValue}
                onChange={(e) => setPasteValue(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && handlePaste()}
                placeholder="Paste invoice"
                className="px-2 py-1 text-sm border border-gray-200 rounded focus:outline-none focus:border-blue-500"
                autoFocus
              />
              <button
                onClick={handlePaste}
                disabled={!pasteValue}
                className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 disabled:opacity-50"
              >
                Pay
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="src/components/wallet/README.md">
# NIP-60 Lightning Wallet UI Components

A gorgeous, elegant, and minimalist wallet UI for NIP-60 Lightning transactions with Cashu mint support.

## Features

- **5 Design Variations**: Choose from minimal light, minimal dark, card elegant, gradient modern, or compact styles
- **Cashu Mint Configuration**: Add and manage multiple Cashu mints with tooltips
- **QR Code Scanner**: Scan Lightning invoices with paste fallback option
- **Send & Receive**: Intuitive transaction modals with mock functionality
- **Subtle Animations**: Smooth Framer Motion animations throughout
- **Responsive Design**: Works beautifully on desktop and mobile

## Components

### Main Components

- `Wallet` - Main wallet component with variant selection
- `WalletBalance` - Displays balance with optional animations
- `MintConfiguration` - Manage Cashu mints configuration
- `TransactionButton` - Send/Receive action buttons
- `QRScanner` - QR code scanning with paste fallback
- `TransactionModal` - Modal for send/receive transactions

### Usage

```tsx
import { Wallet } from '@/components/wallet';

// Basic usage with default minimal-light variant
<Wallet />

// With specific variant
<Wallet variant="gradient-modern" />

// Available variants:
// - 'minimal-light' (default)
// - 'minimal-dark'
// - 'card-elegant'
// - 'gradient-modern'
// - 'compact'
```

## Design Variations

### Minimal Light (Default)
Clean and minimal design with light theme. Features subtle borders and elegant typography.

### Minimal Dark
Sleek dark theme with yellow accents inspired by Lightning. Perfect for dark mode applications.

### Card Elegant
Sophisticated card design with gradient accents and detailed balance display including daily changes.

### Gradient Modern
Bold animated gradient background with glassmorphism effects. Eye-catching and modern.

### Compact
Space-efficient inline design perfect for embedding in sidebars or headers.

## Mock Functionality

All components include mock functionality ready for integration:

- Balance tracking with animated updates
- Mint configuration with add/remove/toggle
- Invoice generation and QR codes
- Clipboard integration for paste functionality
- Transaction processing animations

## Integration with NIP-60

The wallet is designed to integrate with NIP-60 protocol for Cashu ecash wallets:

1. **Mint Management**: Configure and connect to multiple Cashu mints
2. **Balance Aggregation**: Track total balance across all mints
3. **Lightning Integration**: Send/receive via Lightning Network
4. **Zap Support**: Ready for Nostr zap integration

## Customization

Components use Tailwind CSS and can be easily customized:

- Colors can be adjusted via Tailwind classes
- Animations powered by Framer Motion
- Icons from Lucide React
- Fully typed with TypeScript

## Example Integration

See `WalletIntegration.tsx` for a complete example of how to integrate the wallet with zapping functionality.

## Development

To view all wallet variations:
1. Navigate to `/wallet` in your browser
2. Click on different variant buttons to see each design
3. Interact with buttons to see animations and modals

The wallet page showcases all features and variations in an interactive demo.
</file>

<file path="src/components/wallet/TransactionButton.tsx">
import { motion } from 'framer-motion';
import { Send, Download, ArrowUpRight, ArrowDownLeft } from 'lucide-react';
interface TransactionButtonProps {
  type: 'send' | 'receive';
  onClick: () => void;
  variant?: 'minimal' | 'detailed' | 'icon';
  disabled?: boolean;
}
export function TransactionButton({ 
  type, 
  onClick, 
  variant = 'minimal',
  disabled = false 
}: TransactionButtonProps) {
  const isSend = type === 'send';
  const icons = {
    minimal: isSend ? <Send className="w-4 h-4" /> : <Download className="w-4 h-4" />,
    detailed: isSend ? <ArrowUpRight className="w-5 h-5" /> : <ArrowDownLeft className="w-5 h-5" />,
    icon: isSend ? <Send className="w-5 h-5" /> : <Download className="w-5 h-5" />
  };
  const labels = {
    send: 'Send',
    receive: 'Receive'
  };
  if (variant === 'icon') {
    return (
      <motion.button
        onClick={onClick}
        disabled={disabled}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        className={`
          p-3 rounded-full transition-all
          ${isSend 
            ? 'bg-blue-600 hover:bg-blue-700 text-white' 
            : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
          }
          ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
        `}
      >
        {icons[variant]}
      </motion.button>
    );
  }
  if (variant === 'detailed') {
    return (
      <motion.button
        onClick={onClick}
        disabled={disabled}
        whileHover={{ scale: 1.02, y: -2 }}
        whileTap={{ scale: 0.98 }}
        className={`
          flex flex-col items-center justify-center p-6 rounded-2xl transition-all w-full
          ${isSend 
            ? 'bg-gradient-to-br from-blue-500 to-blue-600 text-white shadow-lg shadow-blue-500/20' 
            : 'bg-white border-2 border-gray-200 text-gray-700 hover:border-gray-300'
          }
          ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
        `}
      >
        <motion.div
          initial={{ rotate: 0 }}
          whileHover={{ rotate: isSend ? -45 : 45 }}
          transition={{ type: "spring", stiffness: 300 }}
        >
          {icons[variant]}
        </motion.div>
        <span className="mt-2 text-sm font-medium">{labels[type]}</span>
      </motion.button>
    );
  }
  // Minimal variant (default)
  return (
    <motion.button
      onClick={onClick}
      disabled={disabled}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      transition={{ type: "spring", stiffness: 400, damping: 17 }}
      className={`
        flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all
        ${isSend 
          ? 'bg-gray-900 hover:bg-gray-800 text-white' 
          : 'bg-white hover:bg-gray-50 text-gray-900 border border-gray-200'
        }
        ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
      `}
    >
      {icons[variant]}
      <span>{labels[type]}</span>
    </motion.button>
  );
}
</file>

<file path="src/components/wallet/TransactionModal.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Copy, Check, Zap, QrCode, Loader2 } from 'lucide-react';
interface TransactionModalProps {
  type: 'send' | 'receive';
  isOpen: boolean;
  onClose: () => void;
  balance: number;
  variant?: 'light' | 'dark' | 'gradient';
}
export function TransactionModal({
  type,
  isOpen,
  onClose,
  balance,
  variant = 'light'
}: TransactionModalProps) {
  const [amount, setAmount] = useState('');
  const [description, setDescription] = useState('');
  const [invoice, setInvoice] = useState('');
  const [copied, setCopied] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const isSend = type === 'send';
  const handleCopy = () => {
    // Mock invoice
    const mockInvoice = 'lnbc21000n1pj9xyz...mockInvoice';
    navigator.clipboard.writeText(mockInvoice);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };
  const handleSubmit = () => {
    setIsProcessing(true);
    // Mock transaction
    setTimeout(() => {
      setIsProcessing(false);
      onClose();
    }, 2000);
  };
  const getModalStyles = () => {
    switch (variant) {
      case 'dark':
        return 'bg-gray-900 text-white';
      case 'gradient':
        return 'bg-gradient-to-br from-purple-600 to-pink-600 text-white';
      default:
        return 'bg-white';
    }
  };
  const getInputStyles = () => {
    switch (variant) {
      case 'dark':
        return 'bg-gray-800 border-gray-700 text-white placeholder-gray-400';
      case 'gradient':
        return 'bg-white/20 border-white/30 text-white placeholder-white/70 backdrop-blur-sm';
      default:
        return 'bg-white border-gray-200 text-gray-900';
    }
  };
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, y: 20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.9, y: 20 }}
            className={`rounded-3xl p-6 max-w-md w-full shadow-2xl ${getModalStyles()}`}
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold">
                {isSend ? 'Send Payment' : 'Receive Payment'}
              </h3>
              <button
                onClick={onClose}
                className={`p-2 rounded-lg transition-colors ${
                  variant === 'dark' ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
                }`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            {/* Content */}
            {isSend ? (
              <div className="space-y-4">
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Invoice
                  </label>
                  <textarea
                    value={invoice}
                    onChange={(e) => setInvoice(e.target.value)}
                    placeholder="Paste Lightning invoice or LNURL..."
                    className={`w-full p-3 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                    rows={3}
                  />
                </div>
                <div className="text-center py-2">
                  <span className={`text-sm ${variant === 'dark' ? 'text-gray-500' : 'text-gray-400'}`}>or</span>
                </div>
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Amount (sats)
                  </label>
                  <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="0"
                    className={`w-full p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                  />
                  <div className={`text-xs mt-1 ${variant === 'dark' ? 'text-gray-500' : 'text-gray-500'}`}>
                    Available: {balance.toLocaleString()} sats
                  </div>
                </div>
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Note (optional)
                  </label>
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Coffee tip"
                    className={`w-full p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                  />
                </div>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleSubmit}
                  disabled={!invoice && !amount}
                  className={`w-full py-3 rounded-xl font-medium transition-all flex items-center justify-center gap-2 ${
                    variant === 'gradient'
                      ? 'bg-white text-purple-600 hover:bg-white/90'
                      : variant === 'dark'
                      ? 'bg-yellow-500 text-gray-900 hover:bg-yellow-400'
                      : 'bg-gray-900 text-white hover:bg-gray-800'
                  } disabled:opacity-50 disabled:cursor-not-allowed`}
                >
                  {isProcessing ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span>Processing...</span>
                    </>
                  ) : (
                    <>
                      <Zap className="w-4 h-4" />
                      <span>Send Payment</span>
                    </>
                  )}
                </motion.button>
              </div>
            ) : (
              <div className="space-y-4">
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Amount (sats)
                  </label>
                  <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="0"
                    className={`w-full p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                  />
                </div>
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Description
                  </label>
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="What's this payment for?"
                    className={`w-full p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                  />
                </div>
                {amount && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    className="space-y-4"
                  >
                    <div className={`p-4 rounded-xl ${
                      variant === 'dark' ? 'bg-gray-800' : 'bg-gray-50'
                    }`}>
                      <div className="flex items-center justify-center mb-4">
                        <div className="p-8 bg-white rounded-2xl">
                          <QrCode className="w-32 h-32 text-gray-900" />
                        </div>
                      </div>
                      <div className={`text-xs ${
                        variant === 'dark' ? 'text-gray-400' : 'text-gray-500'
                      } text-center break-all`}>
                        lnbc{amount}n1pj9xyz...mockInvoice
                      </div>
                    </div>
                    <button
                      onClick={handleCopy}
                      className={`w-full py-3 rounded-xl font-medium transition-all flex items-center justify-center gap-2 ${
                        variant === 'gradient'
                          ? 'bg-white/20 text-white hover:bg-white/30'
                          : variant === 'dark'
                          ? 'bg-gray-800 text-white hover:bg-gray-700'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {copied ? (
                        <>
                          <Check className="w-4 h-4" />
                          <span>Copied!</span>
                        </>
                      ) : (
                        <>
                          <Copy className="w-4 h-4" />
                          <span>Copy Invoice</span>
                        </>
                      )}
                    </button>
                  </motion.div>
                )}
                {!amount && (
                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => setAmount('1000')}
                    className={`w-full py-3 rounded-xl font-medium transition-all ${
                      variant === 'gradient'
                        ? 'bg-white text-purple-600 hover:bg-white/90'
                        : variant === 'dark'
                        ? 'bg-yellow-500 text-gray-900 hover:bg-yellow-400'
                        : 'bg-gray-900 text-white hover:bg-gray-800'
                    }`}
                  >
                    Generate Invoice
                  </motion.button>
                )}
              </div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="src/components/wallet/Wallet.tsx">
import { useState } from 'react';
import { motion } from 'framer-motion';
import { WalletBalance } from './WalletBalance';
import { MintConfiguration } from './MintConfiguration';
import { TransactionButton } from './TransactionButton';
import { QRScanner } from './QRScanner';
import { TransactionModal } from './TransactionModal';
import { Zap, History, MoreHorizontal } from 'lucide-react';
export type WalletVariant = 'minimal-light' | 'minimal-dark' | 'card-elegant' | 'gradient-modern' | 'compact';
interface WalletProps {
  variant?: WalletVariant;
}
export function Wallet({ variant = 'minimal-light' }: WalletProps) {
  const [balance] = useState(21000);
  const [showSendModal, setShowSendModal] = useState(false);
  const [showReceiveModal, setShowReceiveModal] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  const handleScan = (data: string) => {
    console.log('Scanned:', data);
    // Mock: Parse lightning invoice and open send modal
    setShowSendModal(true);
  };
  const handleSend = () => {
    setShowSendModal(true);
  };
  const handleReceive = () => {
    setShowReceiveModal(true);
  };
  // Minimal Light Variant (Default)
  if (variant === 'minimal-light') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100"
        >
          <div className="flex justify-between items-start mb-6">
            <h2 className="text-lg font-medium text-gray-900">Wallet</h2>
            <div className="flex items-center gap-2">
              <QRScanner onScan={handleScan} variant="minimal" />
              <MintConfiguration variant="minimal" />
            </div>
          </div>
          <WalletBalance amount={balance} variant="minimal" />
          <div className="flex gap-3 mt-6">
            <TransactionButton type="send" onClick={handleSend} variant="minimal" />
            <TransactionButton type="receive" onClick={handleReceive} variant="minimal" />
          </div>
          <button
            onClick={() => setShowHistory(!showHistory)}
            className="w-full mt-4 text-sm text-gray-500 hover:text-gray-700 transition-colors"
          >
            View History
          </button>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
        />
      </>
    );
  }
  // Minimal Dark Variant
  if (variant === 'minimal-dark') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          className="bg-gray-900 rounded-3xl p-8 shadow-2xl"
        >
          <div className="flex justify-between items-center mb-8">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center">
                <Zap className="w-5 h-5 text-gray-900" />
              </div>
              <h2 className="text-white font-light text-xl">Lightning Wallet</h2>
            </div>
            <button className="p-2 hover:bg-gray-800 rounded-lg transition-colors">
              <MoreHorizontal className="w-5 h-5 text-gray-400" />
            </button>
          </div>
          <div className="text-center mb-8">
            <div className="text-5xl font-thin text-white mb-2">
              {balance.toLocaleString()}
            </div>
            <div className="text-gray-400 text-sm">satoshis</div>
          </div>
          <div className="grid grid-cols-2 gap-4 mb-6">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={handleSend}
              className="py-4 bg-yellow-500 text-gray-900 rounded-xl font-medium hover:bg-yellow-400 transition-colors"
            >
              Send
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={handleReceive}
              className="py-4 bg-gray-800 text-white rounded-xl font-medium hover:bg-gray-700 transition-colors"
            >
              Receive
            </motion.button>
          </div>
          <div className="flex items-center justify-between pt-6 border-t border-gray-800">
            <button
              onClick={() => setShowHistory(!showHistory)}
              className="flex items-center gap-2 text-gray-400 hover:text-gray-300 text-sm"
            >
              <History className="w-4 h-4" />
              <span>History</span>
            </button>
            <button className="text-gray-400 hover:text-gray-300 text-sm">
              Settings
            </button>
          </div>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
          variant="dark"
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
          variant="dark"
        />
      </>
    );
  }
  // Card Elegant Variant
  if (variant === 'card-elegant') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ type: "spring", stiffness: 200, damping: 20 }}
          className="max-w-md mx-auto"
        >
          <motion.div
            className="bg-gradient-to-br from-white to-gray-50 rounded-3xl p-8 shadow-xl border border-gray-100"
            whileHover={{ y: -5 }}
            transition={{ type: "spring", stiffness: 300 }}
          >
            <div className="flex items-center justify-between mb-8">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <Zap className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">NIP-60 Wallet</h2>
                  <p className="text-xs text-gray-500">Lightning Network</p>
                </div>
              </div>
            </div>
            <WalletBalance amount={balance} variant="detailed" showChange changeAmount={2500} />
            <div className="mt-8 space-y-4">
              <MintConfiguration variant="detailed" />
              <QRScanner onScan={handleScan} variant="detailed" />
            </div>
            <div className="flex gap-4 mt-8">
              <TransactionButton type="send" onClick={handleSend} variant="detailed" />
              <TransactionButton type="receive" onClick={handleReceive} variant="detailed" />
            </div>
            <div className="mt-8 pt-6 border-t border-gray-200">
              <button
                onClick={() => setShowHistory(!showHistory)}
                className="w-full flex items-center justify-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors"
              >
                <History className="w-4 h-4" />
                <span>Transaction History</span>
              </button>
            </div>
          </motion.div>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
        />
      </>
    );
  }
  // Gradient Modern Variant
  if (variant === 'gradient-modern') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="relative overflow-hidden rounded-3xl"
        >
          {/* Animated gradient background */}
          <div className="absolute inset-0 bg-gradient-to-br from-purple-600 via-pink-500 to-orange-500">
            <motion.div
              className="absolute inset-0 bg-gradient-to-tr from-blue-600/30 via-purple-600/30 to-pink-600/30"
              animate={{
                x: [0, 100, 0],
                y: [0, -100, 0],
              }}
              transition={{
                duration: 20,
                repeat: Infinity,
                ease: "linear"
              }}
            />
          </div>
          <div className="relative backdrop-blur-sm bg-white/10 p-8">
            <div className="text-center mb-8">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ type: "spring", stiffness: 200, delay: 0.2 }}
                className="inline-block"
              >
                <div className="text-6xl font-bold text-white mb-2">
                  {balance.toLocaleString()}
                </div>
                <div className="text-white/80 text-sm uppercase tracking-wide">Satoshis</div>
              </motion.div>
            </div>
            <div className="grid grid-cols-3 gap-3 mb-8">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleSend}
                className="bg-white/20 backdrop-blur-md text-white p-4 rounded-2xl hover:bg-white/30 transition-all"
              >
                <Zap className="w-6 h-6 mx-auto mb-2" />
                <div className="text-xs">Zap</div>
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleSend}
                className="bg-white/20 backdrop-blur-md text-white p-4 rounded-2xl hover:bg-white/30 transition-all"
              >
                <History className="w-6 h-6 mx-auto mb-2" />
                <div className="text-xs">History</div>
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => {}}
                className="bg-white/20 backdrop-blur-md text-white p-4 rounded-2xl hover:bg-white/30 transition-all"
              >
                <MoreHorizontal className="w-6 h-6 mx-auto mb-2" />
                <div className="text-xs">More</div>
              </motion.button>
            </div>
            <div className="flex gap-3">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={handleSend}
                className="flex-1 py-4 bg-white text-purple-600 rounded-2xl font-semibold hover:bg-white/90 transition-all"
              >
                Send
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={handleReceive}
                className="flex-1 py-4 bg-white/20 backdrop-blur-md text-white rounded-2xl font-semibold hover:bg-white/30 transition-all"
              >
                Receive
              </motion.button>
            </div>
          </div>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
          variant="gradient"
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
          variant="gradient"
        />
      </>
    );
  }
  // Compact Variant
  if (variant === 'compact') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="bg-white rounded-xl p-4 shadow-sm border border-gray-100"
        >
          <div className="flex items-center justify-between">
            <WalletBalance amount={balance} variant="compact" />
            <div className="flex gap-2">
              <TransactionButton type="send" onClick={handleSend} variant="icon" />
              <TransactionButton type="receive" onClick={handleReceive} variant="icon" />
            </div>
          </div>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
        />
      </>
    );
  }
  return null;
}
</file>

<file path="src/components/wallet/WalletBalance.tsx">
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
interface WalletBalanceProps {
  amount: number;
  unit?: string;
  showChange?: boolean;
  changeAmount?: number;
  variant?: 'minimal' | 'detailed' | 'compact';
}
export function WalletBalance({
  amount,
  unit = 'sats',
  showChange = false,
  changeAmount = 0,
  variant = 'minimal'
}: WalletBalanceProps) {
  const [displayAmount, setDisplayAmount] = useState(0);
  useEffect(() => {
    // Animate balance changes
    const timer = setTimeout(() => {
      setDisplayAmount(amount);
    }, 100);
    return () => clearTimeout(timer);
  }, [amount]);
  const formatAmount = (value: number) => {
    return new Intl.NumberFormat('en-US').format(value);
  };
  const isPositiveChange = changeAmount > 0;
  if (variant === 'compact') {
    return (
      <div className="flex items-baseline gap-1">
        <span className="text-2xl font-light text-gray-900">{formatAmount(displayAmount)}</span>
        <span className="text-sm text-gray-500">{unit}</span>
      </div>
    );
  }
  if (variant === 'detailed') {
    return (
      <div className="space-y-2">
        <div className="flex items-end gap-2">
          <motion.span
            key={displayAmount}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-5xl font-thin text-gray-900"
          >
            {formatAmount(displayAmount)}
          </motion.span>
          <span className="text-lg text-gray-600 mb-2">{unit}</span>
        </div>
        {showChange && changeAmount !== 0 && (
          <motion.div
            initial={{ opacity: 0, x: -10 }}
            animate={{ opacity: 1, x: 0 }}
            className={`text-sm ${isPositiveChange ? 'text-green-600' : 'text-red-600'}`}
          >
            <span>{isPositiveChange ? '+' : '-'}</span>
            <span>{formatAmount(Math.abs(changeAmount))}</span>
            <span className="text-xs ml-1">today</span>
          </motion.div>
        )}
      </div>
    );
  }
  // Minimal variant (default)
  return (
    <div className="text-center">
      <motion.div
        key={displayAmount}
        initial={{ scale: 0.95, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ type: "spring", stiffness: 300, damping: 25 }}
        className="text-4xl font-light text-gray-900"
      >
        {formatAmount(displayAmount)}
      </motion.div>
      <div className="text-sm text-gray-500 mt-1">{unit}</div>
    </div>
  );
}
</file>

<file path="src/components/wallet/WalletBalanceBadge.tsx">
import { useState } from 'react';
import { motion } from 'framer-motion';
import { Zap } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
export function WalletBalanceBadge() {
  const [balance] = useState(21000);
  const navigate = useNavigate();
  const handleClick = () => {
    navigate('/wallet');
  };
  return (
    <motion.button
      onClick={handleClick}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      className="flex items-center gap-2 px-3 py-1.5 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/30 dark:to-orange-950/30 rounded-full border border-yellow-200 dark:border-yellow-800/50 transition-all hover:shadow-md"
    >
      <div className="w-5 h-5 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center">
        <Zap className="w-3 h-3 text-white" />
      </div>
      <span className="text-sm font-medium text-gray-900 dark:text-gray-100">
        {balance.toLocaleString()}
      </span>
      <span className="text-xs text-gray-500 dark:text-gray-400">sats</span>
    </motion.button>
  );
}
</file>

<file path="src/components/wallet/WalletIntegration.tsx">
import { useState } from 'react';
import { motion } from 'framer-motion';
import { Zap, CheckCircle, XCircle } from 'lucide-react';
import { Wallet } from './Wallet';
/**
 * Example integration showing how to use the Wallet component
 * with mock NIP-60 functionality for zapping
 */
export function WalletIntegration() {
  const [zapHistory, setZapHistory] = useState<Array<{
    id: string;
    amount: number;
    recipient: string;
    timestamp: Date;
    status: 'success' | 'failed';
  }>>([]);
  // Mock function to handle zap sending
  const handleZap = (recipient: string, amount: number) => {
    const newZap = {
      id: Date.now().toString(),
      amount,
      recipient,
      timestamp: new Date(),
      status: 'success' as const
    };
    setZapHistory(prev => [newZap, ...prev]);
    // Here you would integrate with actual NIP-60 implementation
    console.log('Zap sent:', { recipient, amount });
  };
  return (
    <div className="space-y-6">
      {/* Main Wallet Component */}
      <Wallet variant="minimal-light" />
      {/* Example Zap Interface */}
      <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Quick Zap</h3>
        <div className="space-y-4">
          {/* Quick Zap Buttons */}
          <div className="flex gap-2">
            {[100, 500, 1000, 5000].map(amount => (
              <motion.button
                key={amount}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => handleZap('npub1...example', amount)}
                className="flex-1 px-3 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg text-sm font-medium text-gray-700 transition-colors"
              >
                <Zap className="w-4 h-4 inline mr-1" />
                {amount}
              </motion.button>
            ))}
          </div>
          {/* Recent Zaps */}
          {zapHistory.length > 0 && (
            <div className="space-y-2 mt-6">
              <h4 className="text-sm font-medium text-gray-600">Recent Zaps</h4>
              {zapHistory.slice(0, 3).map(zap => (
                <motion.div
                  key={zap.id}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                >
                  <div className="flex items-center gap-3">
                    {zap.status === 'success' ? (
                      <CheckCircle className="w-4 h-4 text-green-500" />
                    ) : (
                      <XCircle className="w-4 h-4 text-red-500" />
                    )}
                    <div>
                      <div className="text-sm font-medium text-gray-700">
                        {zap.amount} sats
                      </div>
                      <div className="text-xs text-gray-500">
                        {zap.recipient.slice(0, 16)}...
                      </div>
                    </div>
                  </div>
                  <div className="text-xs text-gray-400">
                    {zap.timestamp.toLocaleTimeString()}
                  </div>
                </motion.div>
              ))}
            </div>
          )}
        </div>
      </div>
      {/* Integration Notes */}
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
        <h4 className="text-sm font-medium text-blue-900 mb-2">NIP-60 Integration</h4>
        <ul className="text-xs text-blue-700 space-y-1">
          <li>• Connect to Cashu mints using NIP-60 protocol</li>
          <li>• Generate Lightning invoices for receiving</li>
          <li>• Scan QR codes or paste invoices for sending</li>
          <li>• Track balance across multiple mints</li>
          <li>• Mock functionality ready for real implementation</li>
        </ul>
      </div>
    </div>
  );
}
</file>

<file path="src/components/wallet/WalletWidget.tsx">
import { useState } from 'react';
import { motion } from 'framer-motion';
import { Zap, Send, Download } from 'lucide-react';
import { Link } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
export function WalletWidget() {
  const { t } = useTranslation();
  const [balance] = useState(21000);
  return (
    <Link to="/wallet">
      <motion.div
        whileHover={{ scale: 1.02 }}
        className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 p-4 rounded-xl cursor-pointer transition-all hover:shadow-md"
      >
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
              <Zap className="w-4 h-4 text-white" />
            </div>
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">{t('navigation.wallet')}</span>
          </div>
        </div>
        <div className="mb-3">
          <div className="text-2xl font-light text-gray-900 dark:text-gray-100">
            {balance.toLocaleString()}
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400">{t('wallet.satsAvailable')}</div>
        </div>
        <div className="flex gap-2">
          <button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              // Quick send action
            }}
            className="flex-1 flex items-center justify-center gap-1 py-1.5 bg-white dark:bg-gray-800 rounded-lg text-xs font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <Send className="w-3 h-3" />
            {t('wallet.send')}
          </button>
          <button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              // Quick receive action
            }}
            className="flex-1 flex items-center justify-center gap-1 py-1.5 bg-white dark:bg-gray-800 rounded-lg text-xs font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <Download className="w-3 h-3" />
            {t('wallet.receive')}
          </button>
        </div>
      </motion.div>
    </Link>
  );
}
</file>

<file path="src/components/wallet/ZapButton.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Zap } from 'lucide-react';
import { cn } from '@/lib/utils';
interface ZapButtonProps {
  eventId: string;
  authorPubkey: string;
  initialZapCount?: number;
  size?: 'sm' | 'md';
  onZap?: (amount: number) => void;
}
export function ZapButton({
  eventId: _eventId,
  authorPubkey: _authorPubkey,
  initialZapCount = 0,
  size = 'sm',
  onZap
}: ZapButtonProps) {
  const [showAmounts, setShowAmounts] = useState(false);
  const [zapCount, setZapCount] = useState(initialZapCount);
  const [isZapping, setIsZapping] = useState(false);
  const [lastZapAmount, setLastZapAmount] = useState<number | null>(null);
  const quickZapAmounts = [21, 100, 500, 1000];
  const handleZap = async (amount: number) => {
    setIsZapping(true);
    setLastZapAmount(amount);
    // Mock zap action
    setTimeout(() => {
      setZapCount(prev => prev + 1);
      setIsZapping(false);
      setShowAmounts(false);
      onZap?.(amount);
      // Clear the animation after a moment
      setTimeout(() => setLastZapAmount(null), 2000);
    }, 500);
  };
  return (
    <div className="relative">
      <button
        onClick={() => setShowAmounts(!showAmounts)}
        className={cn(
          "group flex items-center gap-2 p-2 rounded-full transition-all",
          zapCount > 0
            ? "text-yellow-600 dark:text-yellow-500"
            : "hover:bg-yellow-50 dark:hover:bg-yellow-950/30",
          size === 'md' && "p-3"
        )}
      >
        <motion.div
          animate={isZapping ? { rotate: 360 } : {}}
          transition={{ duration: 0.5 }}
        >
          <Zap
            className={cn(
              "transition-all",
              size === 'md' ? "w-5 h-5" : "w-4 h-4",
              zapCount > 0
                ? "fill-current text-yellow-600 dark:text-yellow-500"
                : "text-gray-500 group-hover:text-yellow-600 dark:text-gray-400 dark:group-hover:text-yellow-500"
            )}
          />
        </motion.div>
        {zapCount > 0 && (
          <span className={cn(
            "font-medium",
            size === 'md' ? "text-base" : "text-sm",
            "text-yellow-600 dark:text-yellow-500"
          )}>
            {zapCount}
          </span>
        )}
      </button>
      {/* Floating zap amount indicator */}
      <AnimatePresence>
        {lastZapAmount && (
          <motion.div
            initial={{ opacity: 0, y: 0, scale: 0.8 }}
            animate={{ opacity: 1, y: -30, scale: 1 }}
            exit={{ opacity: 0, y: -50, scale: 0.8 }}
            className="absolute left-1/2 -translate-x-1/2 pointer-events-none"
          >
            <div className="bg-yellow-500 text-white text-xs px-2 py-1 rounded-full font-bold whitespace-nowrap">
              +{lastZapAmount} ⚡
            </div>
          </motion.div>
        )}
      </AnimatePresence>
      {/* Quick zap amounts */}
      <AnimatePresence>
        {showAmounts && (
          <>
            {/* Backdrop to close on click outside */}
            <div
              className="fixed inset-0 z-10"
              onClick={() => setShowAmounts(false)}
            />
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: 5 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 5 }}
              className="absolute bottom-full left-0 mb-2 z-20"
            >
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-2 flex gap-1">
                {quickZapAmounts.map((amount) => (
                  <motion.button
                    key={amount}
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleZap(amount);
                    }}
                    disabled={isZapping}
                    className="px-3 py-2 bg-gray-50 dark:bg-gray-700 hover:bg-yellow-50 dark:hover:bg-yellow-900/30 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <div className="flex items-center gap-1">
                      <Zap className="w-3 h-3 text-yellow-600 dark:text-yellow-500" />
                      <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        {amount}
                      </span>
                    </div>
                  </motion.button>
                ))}
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="src/config/ndk.ts">
// This file is now deprecated as all NDK functionality is provided by ndk-hooks
// Keeping it only for reference if needed during migration
import { NDKNip07Signer, NDKPrivateKeySigner } from '@nostr-dev-kit/ndk-hooks';
// Default relay configuration (moved to NDKContext.tsx)
export const defaultRelays = [
  'wss://relay.damus.io',
  'wss://relay.nostr.band',
  'wss://nos.lol',
  'wss://relay.snort.social',
  'wss://relay.primal.net'
];
// Helper to get signer based on available auth method (deprecated - use session hooks instead)
export async function getSigner(): Promise<NDKPrivateKeySigner | NDKNip07Signer | null> {
  // Check for NIP-07 extension (like Alby, nos2x, etc.)
  if (window.nostr) {
    return new NDKNip07Signer();
  }
  // Check for stored private key (for demo purposes - in production use secure storage)
  const privateKey = localStorage.getItem('nostr_private_key');
  if (privateKey) {
    return new NDKPrivateKeySigner(privateKey);
  }
  return null;
}
</file>

<file path="src/features/classifieds/components/CategorySection.tsx">
import { ChevronRight } from 'lucide-react';
import { Link } from 'react-router-dom';
import type { ClassifiedListing } from '../types';
import { ListingCard } from './ListingCard';
interface CategorySectionProps {
  category: string;
  listings: ClassifiedListing[];
  showViewAll?: boolean;
}
export function CategorySection({ category, listings, showViewAll = true }: CategorySectionProps) {
  if (listings.length === 0) return null;
  const displayName = category.charAt(0).toUpperCase() + category.slice(1).replace('-', ' ');
  return (
    <section className="mb-8">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
          {displayName}
        </h2>
        {showViewAll && listings.length > 4 && (
          <Link
            to={`/marketplace?category=${category}`}
            className="flex items-center gap-1 text-sm text-purple-600 hover:text-purple-700 dark:text-purple-400 dark:hover:text-purple-300"
          >
            View All
            <ChevronRight className="w-4 h-4" />
          </Link>
        )}
      </div>
      <div className="relative">
        <div className="flex gap-4 overflow-x-auto scrollbar-hide pb-2">
          {listings.slice(0, 10).map((listing) => (
            <div
              key={listing.id}
              className="flex-none w-72 sm:w-80"
            >
              <ListingCard listing={listing} />
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
</file>

<file path="src/features/classifieds/components/FilterButton.tsx">
import { useState } from 'react';
import { Filter, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { motion, AnimatePresence } from 'framer-motion';
interface FilterButtonProps {
  categories: { value: string; label: string }[];
  selectedCategory: string;
  onCategoryChange: (category: string) => void;
}
export function FilterButton({ categories, selectedCategory, onCategoryChange }: FilterButtonProps) {
  const [isOpen, setIsOpen] = useState(false);
  const handleCategorySelect = (value: string) => {
    onCategoryChange(value);
    setIsOpen(false);
  };
  return (
    <div className="relative">
      <Button
        variant="outline"
        size="sm"
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2"
      >
        <Filter className="w-4 h-4" />
        {selectedCategory ? categories.find(c => c.value === selectedCategory)?.label : 'Filter'}
      </Button>
      <AnimatePresence>
        {isOpen && (
          <>
            {/* Backdrop */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 z-40"
              onClick={() => setIsOpen(false)}
            />
            {/* Dropdown */}
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="absolute right-0 mt-2 w-56 bg-white dark:bg-gray-950 rounded-lg shadow-lg border border-gray-200 dark:border-gray-800 z-50"
            >
              <div className="p-2">
                {selectedCategory && (
                  <button
                    onClick={() => handleCategorySelect('')}
                    className="w-full flex items-center justify-between px-3 py-2 text-sm rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 mb-1"
                  >
                    <span>Clear Filter</span>
                    <X className="w-4 h-4" />
                  </button>
                )}
                {categories.map(category => (
                  <button
                    key={category.value}
                    onClick={() => handleCategorySelect(category.value)}
                    className={`w-full text-left px-3 py-2 text-sm rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 ${
                      selectedCategory === category.value
                        ? 'bg-purple-50 text-purple-700 dark:bg-purple-950/50 dark:text-purple-400'
                        : ''
                    }`}
                  >
                    {category.label}
                  </button>
                ))}
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="src/features/classifieds/components/ListingCard.tsx">
import { Link } from 'react-router-dom';
import { MapPin, Clock } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { UserAvatar } from '@/components/ui/UserAvatar';
import type { ClassifiedListing } from '../types';
import { formatDistanceToNow } from 'date-fns';
interface ListingCardProps {
  listing: ClassifiedListing;
}
export function ListingCard({ listing }: ListingCardProps) {
  const mainImage = listing.images?.[0];
  const timeAgo = listing.publishedAt
    ? formatDistanceToNow(new Date(listing.publishedAt * 1000), { addSuffix: true })
    : 'recently';
  return (
    <Link to={`/marketplace/${listing.id}`}>
      <Card className="hover:shadow-soft-lg hover:scale-[1.02] transition-all duration-300 cursor-pointer h-full overflow-hidden group bg-white dark:bg-gray-900/50 border-gray-100 dark:border-gray-800/50 animate-fade-in">
        {/* Image Section */}
        <div className="aspect-[4/3] relative overflow-hidden bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-900 dark:to-gray-800">
          {mainImage ? (
            <>
              <img
                src={mainImage}
                alt={listing.title}
                className="object-cover w-full h-full group-hover:scale-105 transition-transform duration-300"
                loading="lazy"
              />
              {listing.status === 'sold' && (
                <div className="absolute inset-0 bg-black/60 flex items-center justify-center backdrop-blur-sm">
                  <span className="text-white font-bold text-xl rotate-12 border-4 border-white px-3 py-1 rounded">
                    SOLD
                  </span>
                </div>
              )}
            </>
          ) : (
            <div className="w-full h-full flex items-center justify-center text-gray-400 dark:text-gray-600">
              <svg className="w-16 h-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            </div>
          )}
        </div>
        {/* Content Section */}
        <div className="p-4 space-y-3">
          {/* Price - Most prominent */}
          {listing.price && (
            <div className="flex justify-between items-start">
              <span className="text-2xl font-bold text-gray-900 dark:text-white">
                {listing.price.currency === 'SATS' ? (
                  <span className="text-orange-500">{listing.price.amount} SATS</span>
                ) : (
                  <span>
                    {listing.price.currency === 'USD' && '$'}
                    {listing.price.currency === 'EUR' && '€'}
                    {listing.price.currency === 'GBP' && '£'}
                    {listing.price.amount}
                    {!['USD', 'EUR', 'GBP'].includes(listing.price.currency) && ` ${listing.price.currency}`}
                  </span>
                )}
                {listing.price.frequency && listing.price.frequency !== 'once' && (
                  <span className="text-sm font-normal text-gray-500 dark:text-gray-400">
                    /{listing.price.frequency}
                  </span>
                )}
              </span>
            </div>
          )}
          {/* Title */}
          <h3 className="font-semibold text-base text-gray-900 dark:text-white line-clamp-2 leading-tight">
            {listing.title}
          </h3>
          {/* Summary - if exists */}
          {listing.summary && (
            <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
              {listing.summary}
            </p>
          )}
          {/* Metadata */}
          <div className="flex items-center gap-3 text-xs text-gray-500 dark:text-gray-500">
            {listing.location && (
              <div className="flex items-center gap-1">
                <MapPin className="w-3 h-3" />
                <span className="truncate">{listing.location}</span>
              </div>
            )}
            <div className="flex items-center gap-1">
              <Clock className="w-3 h-3" />
              <span>{timeAgo}</span>
            </div>
          </div>
          {/* Seller Info */}
          <div className="pt-3 border-t border-gray-100 dark:border-gray-800 flex items-center gap-2">
            <UserAvatar pubkey={listing.author} size="xs" />
            <span className="text-xs text-gray-500 dark:text-gray-400">
              Posted by
            </span>
          </div>
        </div>
      </Card>
    </Link>
  );
}
</file>

<file path="src/features/classifieds/components/ListingForm.tsx">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Plus, X, ImagePlus } from 'lucide-react';
import type { ListingFormData, PriceFrequency } from '../types';
interface ListingFormProps {
  onSubmit: (data: ListingFormData) => Promise<void>;
  initialData?: Partial<ListingFormData>;
  isSubmitting?: boolean;
}
const COMMON_CATEGORIES = [
  'electronics',
  'furniture',
  'clothing',
  'books',
  'services',
  'vehicles',
  'real-estate',
  'jobs',
  'free',
  'wanted'
];
const CURRENCIES = ['USD', 'EUR', 'GBP', 'BTC', 'SATS'];
export function ListingForm({ onSubmit, initialData, isSubmitting }: ListingFormProps) {
  const navigate = useNavigate();
  const [formData, setFormData] = useState<ListingFormData>({
    title: initialData?.title || '',
    summary: initialData?.summary || '',
    content: initialData?.content || '',
    location: initialData?.location || '',
    price: initialData?.price || { amount: '', currency: 'USD' },
    categories: initialData?.categories || [],
    images: initialData?.images || []
  });
  const [newCategory, setNewCategory] = useState('');
  const [newImageUrl, setNewImageUrl] = useState('');
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await onSubmit(formData);
  };
  const addCategory = () => {
    if (newCategory && !formData.categories.includes(newCategory)) {
      setFormData(prev => ({
        ...prev,
        categories: [...prev.categories, newCategory.toLowerCase()]
      }));
      setNewCategory('');
    }
  };
  const removeCategory = (category: string) => {
    setFormData(prev => ({
      ...prev,
      categories: prev.categories.filter(c => c !== category)
    }));
  };
  const addImage = () => {
    if (newImageUrl && !formData.images.includes(newImageUrl)) {
      setFormData(prev => ({
        ...prev,
        images: [...prev.images, newImageUrl]
      }));
      setNewImageUrl('');
    }
  };
  const removeImage = (image: string) => {
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter(i => i !== image)
    }));
  };
  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Listing Details</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="title">Title *</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              placeholder="What are you listing?"
              required
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="summary">Summary</Label>
            <Input
              id="summary"
              value={formData.summary}
              onChange={(e) => setFormData(prev => ({ ...prev, summary: e.target.value }))}
              placeholder="Brief description"
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="content">Description *</Label>
            <Textarea
              id="content"
              value={formData.content}
              onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}
              placeholder="Detailed description (Markdown supported)"
              rows={6}
              required
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="location">Location</Label>
            <Input
              id="location"
              value={formData.location}
              onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
              placeholder="City, State or Country"
              className="mt-1"
            />
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Pricing</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label htmlFor="amount">Amount</Label>
              <Input
                id="amount"
                type="text"
                value={formData.price.amount}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  price: { ...prev.price, amount: e.target.value }
                }))}
                placeholder="0.00"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="currency">Currency</Label>
              <Select
                value={formData.price.currency}
                onValueChange={(value) => setFormData(prev => ({
                  ...prev,
                  price: { ...prev.price, currency: value }
                }))}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {CURRENCIES.map(currency => (
                    <SelectItem key={currency} value={currency}>
                      {currency}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="frequency">Frequency</Label>
              <Select
                value={formData.price.frequency || 'once'}
                onValueChange={(value) => setFormData(prev => ({
                  ...prev,
                  price: { ...prev.price, frequency: value as PriceFrequency }
                }))}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="once">One time</SelectItem>
                  <SelectItem value="hour">Per hour</SelectItem>
                  <SelectItem value="day">Per day</SelectItem>
                  <SelectItem value="week">Per week</SelectItem>
                  <SelectItem value="month">Per month</SelectItem>
                  <SelectItem value="year">Per year</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Categories</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Select value={newCategory} onValueChange={setNewCategory}>
              <SelectTrigger className="flex-1">
                <SelectValue placeholder="Select a category" />
              </SelectTrigger>
              <SelectContent>
                {COMMON_CATEGORIES.map(cat => (
                  <SelectItem key={cat} value={cat}>
                    {cat.charAt(0).toUpperCase() + cat.slice(1)}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Input
              value={newCategory}
              onChange={(e) => setNewCategory(e.target.value)}
              placeholder="Or type custom"
              className="flex-1"
            />
            <Button type="button" onClick={addCategory} size="icon">
              <Plus className="w-4 h-4" />
            </Button>
          </div>
          {formData.categories.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {formData.categories.map(category => (
                <div
                  key={category}
                  className="inline-flex items-center gap-1 px-3 py-1 bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400 rounded-full text-sm"
                >
                  <span>{category}</span>
                  <button
                    type="button"
                    onClick={() => removeCategory(category)}
                    className="hover:text-purple-600"
                  >
                    <X className="w-3 h-3" />
                  </button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Images</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Input
              value={newImageUrl}
              onChange={(e) => setNewImageUrl(e.target.value)}
              placeholder="Image URL"
              className="flex-1"
            />
            <Button type="button" onClick={addImage} size="icon">
              <ImagePlus className="w-4 h-4" />
            </Button>
          </div>
          {formData.images.length > 0 && (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {formData.images.map((image, index) => (
                <div key={index} className="relative group">
                  <img
                    src={image}
                    alt={`Listing image ${index + 1}`}
                    className="w-full h-32 object-cover rounded-lg"
                  />
                  <button
                    type="button"
                    onClick={() => removeImage(image)}
                    className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
      <div className="flex justify-end gap-4">
        <Button
          type="button"
          variant="outline"
          onClick={() => navigate('/marketplace')}
          disabled={isSubmitting}
        >
          Cancel
        </Button>
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? 'Publishing...' : 'Publish Listing'}
        </Button>
      </div>
    </form>
  );
}
</file>

<file path="src/features/classifieds/components/ListingGrid.tsx">
import type { ClassifiedListing } from '../types';
import { ListingCard } from './ListingCard';
interface ListingGridProps {
  listings: ClassifiedListing[];
}
export function ListingGrid({ listings }: ListingGridProps) {
  if (listings.length === 0) {
    return (
      <div className="text-center py-12 px-4">
        <p className="text-gray-500 dark:text-gray-400">
          No listings found. Be the first to post something!
        </p>
      </div>
    );
  }
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {listings.map((listing) => (
        <ListingCard key={listing.id} listing={listing} />
      ))}
    </div>
  );
}
</file>

<file path="src/features/classifieds/components/PriceTag.tsx">
import type { ListingPrice } from '../types';
interface PriceTagProps {
  price: ListingPrice;
  className?: string;
}
export function PriceTag({ price, className = '' }: PriceTagProps) {
  const formatFrequency = (frequency?: string) => {
    if (!frequency || frequency === 'once') return '';
    return `/${frequency}`;
  };
  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400 ${className}`}>
      {price.amount} {price.currency}{formatFrequency(price.frequency)}
    </span>
  );
}
</file>

<file path="src/features/classifieds/hooks/useCreateListing.ts">
import { useNDK, useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent } from '@nostr-dev-kit/ndk';
import { CLASSIFIED_LISTING_KIND, createListingTags } from '../types';
import type { ListingFormData } from '../types';
export function useCreateListing() {
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const createListing = async (data: ListingFormData) => {
    if (!ndk || !currentUser) {
      throw new Error('You must be logged in to create a listing');
    }
    const event = new NDKEvent(ndk);
    event.kind = CLASSIFIED_LISTING_KIND;
    event.content = data.content;
    event.tags = createListingTags(data);
    await event.sign();
    await event.publish();
    return event;
  };
  const updateListing = async (eventId: string, data: ListingFormData) => {
    if (!ndk || !currentUser) {
      throw new Error('You must be logged in to update a listing');
    }
    // For replaceable events (30000-39999), we create a new event with the same 'd' tag
    const event = new NDKEvent(ndk);
    event.kind = CLASSIFIED_LISTING_KIND;
    event.content = data.content;
    event.tags = createListingTags(data);
    // Add the 'd' tag to identify this as a replacement
    event.tags.push(['d', eventId]);
    await event.sign();
    await event.publish();
    return event;
  };
  const deleteListing = async (eventId: string) => {
    if (!ndk || !currentUser) {
      throw new Error('You must be logged in to delete a listing');
    }
    // To delete, we update with a "sold" or "deleted" status
    const event = new NDKEvent(ndk);
    event.kind = CLASSIFIED_LISTING_KIND;
    event.content = '';
    event.tags = [
      ['d', eventId],
      ['status', 'deleted']
    ];
    await event.sign();
    await event.publish();
    return event;
  };
  return {
    createListing,
    updateListing,
    deleteListing,
    isAuthenticated: !!currentUser
  };
}
</file>

<file path="src/features/classifieds/hooks/useListings.ts">
import { useSubscribe } from '@nostr-dev-kit/ndk-hooks';
import { CLASSIFIED_LISTING_KIND, parseListingFromEvent } from '../types';
import { useMemo } from 'react';
interface UseListingsOptions {
  category?: string;
  author?: string;
  limit?: number;
}
export function useListings(options: UseListingsOptions = {}) {
  const { category, author, limit = 50 } = options;
  // Build filter based on options
  const filters = useMemo(() => {
    const filter: any = {
      kinds: [CLASSIFIED_LISTING_KIND],
      limit
    };
    if (author) {
      filter.authors = [author];
    }
    if (category) {
      filter['#t'] = [category.toLowerCase()];
    }
    return [filter];
  }, [category, author, limit]);
  const { events } = useSubscribe(filters);
  const listings = useMemo(() => {
    return events
      .map(parseListingFromEvent)
      .filter(listing => listing.status === 'active')
      .sort((a, b) => {
        const timeA = a.publishedAt || 0;
        const timeB = b.publishedAt || 0;
        return timeB - timeA; // Most recent first
      });
  }, [events]);
  return {
    listings,
    events
  };
}
</file>

<file path="src/features/classifieds/types.ts">
import { NDKEvent } from '@nostr-dev-kit/ndk';
// NIP-99 Event Kinds
export const CLASSIFIED_LISTING_KIND = 30402;
export const CLASSIFIED_DRAFT_KIND = 30403;
export type ListingStatus = 'active' | 'sold' | 'expired' | 'draft';
export type PriceFrequency = 'once' | 'hour' | 'day' | 'week' | 'month' | 'year';
export interface ListingPrice {
  amount: string;
  currency: string;
  frequency?: PriceFrequency;
}
export interface ClassifiedListing {
  id: string;
  title: string;
  summary?: string;
  content: string; // Markdown content
  author: string; // pubkey
  publishedAt?: number;
  location?: string;
  price?: ListingPrice;
  status?: ListingStatus;
  categories?: string[];
  images?: string[];
  event?: NDKEvent;
}
export interface ListingFormData {
  title: string;
  summary: string;
  content: string;
  location: string;
  price: {
    amount: string;
    currency: string;
    frequency?: PriceFrequency;
  };
  categories: string[];
  images: string[];
}
export function parseListingFromEvent(event: NDKEvent): ClassifiedListing {
  const title = event.tagValue('title') || 'Untitled Listing';
  const summary = event.tagValue('summary');
  const location = event.tagValue('location');
  const status = event.tagValue('status') as ListingStatus || 'active';
  const publishedAt = event.tagValue('published_at');
  // Parse price tag [price, amount, currency, frequency?]
  const priceTag = event.tags.find(tag => tag[0] === 'price');
  let price: ListingPrice | undefined;
  if (priceTag && priceTag.length >= 3) {
    price = {
      amount: priceTag[1],
      currency: priceTag[2],
      frequency: priceTag[3] as PriceFrequency | undefined
    };
  }
  // Parse categories from 't' tags
  const categories = event.tags
    .filter(tag => tag[0] === 't')
    .map(tag => tag[1]);
  // Parse images - handle multiple tag formats used in the wild
  let images: string[] = [];
  // 1. Standard 'image' tags (most common)
  const imageTags = event.tags
    .filter(tag => tag[0] === 'image')
    .map(tag => tag[1]);
  if (imageTags.length > 0) {
    images = imageTags;
  } else {
    // 2. Check for 'r' tags (resource URLs) that look like images
    const rTags = event.tags
      .filter(tag => tag[0] === 'r' && tag[1] &&
        (tag[1].match(/\.(jpg|jpeg|png|gif|webp|svg)/i) ||
         tag[1].includes('image') ||
         tag[1].includes('img')))
      .map(tag => tag[1]);
    if (rTags.length > 0) {
      images = rTags;
    } else {
      // 3. Check for custom image tags (featuredImageUrl, screenshotsUrls, etc.)
      const featuredImage = event.tagValue('featuredImageUrl');
      if (featuredImage) {
        images.push(featuredImage);
      }
      const screenshotsTag = event.tags.find(tag => tag[0] === 'screenshotsUrls');
      if (screenshotsTag) {
        images.push(...screenshotsTag.slice(1));
      }
      // 4. Other fallbacks
      const imgUrl = event.tagValue('imgUrl');
      if (imgUrl) images.push(imgUrl);
    }
  }
  return {
    id: event.id,
    title,
    summary,
    content: event.content,
    author: event.pubkey,
    publishedAt: publishedAt ? parseInt(publishedAt) : event.created_at,
    location,
    price,
    status,
    categories,
    images,
    event
  };
}
export function createListingTags(data: ListingFormData): string[][] {
  const tags: string[][] = [];
  tags.push(['title', data.title]);
  if (data.summary) {
    tags.push(['summary', data.summary]);
  }
  if (data.location) {
    tags.push(['location', data.location]);
  }
  if (data.price && data.price.amount && data.price.currency) {
    const priceTag = ['price', data.price.amount, data.price.currency];
    if (data.price.frequency && data.price.frequency !== 'once') {
      priceTag.push(data.price.frequency);
    }
    tags.push(priceTag);
  }
  tags.push(['published_at', Math.floor(Date.now() / 1000).toString()]);
  tags.push(['status', 'active']);
  data.categories.forEach(category => {
    tags.push(['t', category.toLowerCase()]);
  });
  data.images.forEach(image => {
    tags.push(['image', image]);
  });
  return tags;
}
</file>

<file path="src/features/feed/NoteCard.tsx">
import { useProfile, useNDK, useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent, NDKKind } from '@nostr-dev-kit/ndk-hooks';
import { formatDistanceToNow } from 'date-fns';
import { Heart, MessageCircle, Repeat2, Share, MoreHorizontal } from 'lucide-react';
import { useState } from 'react';
import { cn } from '@/lib/utils';
import { ZapButton } from '@/components/wallet/ZapButton';
import { UserAvatar } from '@/components/ui/UserAvatar';
import { Link, useNavigate } from 'react-router-dom';
import { ContentRenderer } from '@/components/content/ContentRenderer';
import { nip19 } from 'nostr-tools';
interface NoteCardProps {
  event: NDKEvent;
}
export function NoteCard({ event }: NoteCardProps) {
  const profile = useProfile(event.author.pubkey);
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const navigate = useNavigate();
  const [isLiked, setIsLiked] = useState(false);
  const [likeCount, setLikeCount] = useState(0);
  // Check if this note is a reply
  const replyToTag = event.tags.find(tag =>
    tag[0] === 'e' && (tag[3] === 'reply' || tag[3] === 'root' || !tag[3])
  );
  const replyToPubkeyTag = event.tags.find(tag => tag[0] === 'p');
  const replyToPubkey = replyToPubkeyTag?.[1];
  const replyToProfile = useProfile(replyToPubkey || '');
  const handleLike = async () => {
    if (!currentUser || !ndk) return;
    try {
      const reaction = new NDKEvent(ndk);
      reaction.kind = NDKKind.Reaction;
      reaction.content = isLiked ? '-' : '+';
      reaction.tags = [
        ['e', event.id],
        ['p', event.pubkey]
      ];
      await reaction.publish();
      setIsLiked(!isLiked);
      setLikeCount(prev => isLiked ? prev - 1 : prev + 1);
    } catch (error) {
      console.error('Failed to publish reaction:', error);
    }
  };
  const handleRepost = async () => {
    if (!currentUser || !ndk) return;
    try {
      const repost = new NDKEvent(ndk);
      repost.kind = NDKKind.Repost;
      repost.content = '';
      repost.tags = [
        ['e', event.id],
        ['p', event.pubkey]
      ];
      await repost.publish();
    } catch (error) {
      console.error('Failed to repost:', error);
    }
  };
  const displayName = profile?.name || 'Anonymous';
  const handle = profile?.nip05 ? `@${profile.nip05.split('@')[0]}` : `@${event.author?.npub?.slice(5, 12)}`;
  const handleNoteClick = (e: React.MouseEvent) => {
    // Don't navigate if clicking on interactive elements
    const target = e.target as HTMLElement;
    if (
      target.closest('a') ||
      target.closest('button') ||
      target.closest('[role="button"]')
    ) {
      return;
    }
    const neventId = event.encode();
    navigate(`/e/${neventId}`);
  };
  return (
    <article
      className="bg-white dark:bg-gray-900 border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50/50 dark:hover:bg-gray-800/50 transition-all duration-150 cursor-pointer"
      onClick={handleNoteClick}>
      <div className="px-4 py-3 sm:px-5 sm:py-4">
        {/* Header */}
        <div className="flex items-start gap-3">
          {/* Avatar */}
          <Link to={`/p/${event.author.npub}`} className="flex-shrink-0">
            <UserAvatar
              pubkey={event.author.pubkey}
              size="md"
              className="w-11 h-11 ring-1 ring-neutral-200/50 dark:ring-neutral-800/50 shadow-soft"
            />
          </Link>
          {/* Content */}
          <div className="flex-1 min-w-0">
            {/* Author info */}
            <div className="flex items-center gap-2 flex-wrap">
              <Link
                to={`/p/${event.author.npub}`}
                className="flex items-center gap-1.5 hover:opacity-75 transition-opacity"
              >
                <span className="font-medium text-base text-gray-900 dark:text-white">
                  {displayName}
                </span>
                <span className="text-gray-500 dark:text-gray-400 text-sm">
                  {handle}
                </span>
              </Link>
              <span className="text-gray-300 dark:text-gray-700 text-sm">·</span>
              <time className="text-gray-500 dark:text-gray-400 text-sm hover:underline cursor-help">
                {formatDistanceToNow(new Date(event.created_at! * 1000), { addSuffix: true })}
              </time>
            </div>
            {/* Reply indicator */}
            {replyToTag && replyToPubkey && (
              <div className="flex items-center gap-1 mt-1 text-sm text-gray-500 dark:text-gray-400">
                <span>Replying to</span>
                <Link
                  to={`/p/${nip19.npubEncode(replyToPubkey)}`}
                  className="font-medium hover:underline text-accent-600 dark:text-accent-400"
                >
                  @{replyToProfile?.name || replyToProfile?.displayName || `${replyToPubkey?.slice(0, 8)}...`}
                </Link>
              </div>
            )}
            {/* Note content */}
            <div className="mt-2">
              <ContentRenderer
                content={event.content}
                className="text-gray-800 dark:text-gray-200 text-base leading-relaxed"
              />
            </div>
            {/* Action buttons */}
            <div className="flex items-center justify-between mt-4 -ml-2">
              <div className="flex items-center gap-1">
                <button
                  onClick={() => {/* TODO: Implement reply */}}
                  className="group flex items-center gap-1.5 p-2.5 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50 transition-all duration-200"
                  disabled={!currentUser}
                >
                  <MessageCircle className="w-4 h-4 text-neutral-500 group-hover:text-accent-600 dark:text-neutral-500 dark:group-hover:text-accent-400" strokeWidth={1.5} />
                  {/* Reply count will be shown when implemented */}
                </button>
                <button
                  onClick={handleRepost}
                  className="group flex items-center gap-1.5 p-2.5 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50 transition-all duration-200"
                  disabled={!currentUser}
                >
                  <Repeat2 className="w-4 h-4 text-neutral-500 group-hover:text-success-600 dark:text-neutral-500 dark:group-hover:text-success-400" strokeWidth={1.5} />
                  {/* Repost count will be shown when implemented */}
                </button>
                <button
                  onClick={handleLike}
                  className={cn(
                    "group flex items-center gap-1.5 p-2.5 rounded-lg transition-all duration-200",
                    isLiked
                      ? "bg-danger-50 dark:bg-danger-950/20"
                      : "hover:bg-neutral-100 dark:hover:bg-neutral-800/50"
                  )}
                  disabled={!currentUser}
                >
                  <Heart
                    className={cn(
                      "w-4 h-4 transition-all duration-200",
                      isLiked
                        ? "fill-current text-danger-500 dark:text-danger-400"
                        : "text-neutral-500 group-hover:text-danger-500 dark:text-neutral-500 dark:group-hover:text-danger-400"
                    )}
                    strokeWidth={1.5}
                  />
                  {likeCount > 0 && (
                    <span className={cn(
                      "text-sm font-medium",
                      isLiked
                        ? "text-pink-500 dark:text-pink-400"
                        : "text-gray-500 group-hover:text-pink-500 dark:text-gray-400 dark:group-hover:text-pink-400"
                    )}>
                      {likeCount}
                    </span>
                  )}
                </button>
                {/* Zap Button */}
                <ZapButton
                  eventId={event.id}
                  authorPubkey={event.pubkey}
                  onZap={(amount) => console.log(`Zapped ${amount} sats to`, event.pubkey)}
                />
                <button
                  onClick={() => {/* TODO: Implement share */}}
                  className="group p-2.5 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50 transition-all duration-200"
                >
                  <Share className="w-4 h-4 text-neutral-500 group-hover:text-accent-600 dark:text-neutral-500 dark:group-hover:text-accent-400" strokeWidth={1.5} />
                </button>
              </div>
              <button className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50 transition-all duration-200">
                <MoreHorizontal className="w-4 h-4 text-neutral-400 dark:text-neutral-600" strokeWidth={1.5} />
              </button>
            </div>
          </div>
        </div>
      </div>
    </article>
  );
}
</file>

<file path="src/features/followPacks/components/FollowPackCard.tsx">
import { useState } from 'react';
import { Heart, UserPlus, UserMinus } from 'lucide-react';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { useFollowPacksStore } from '@/stores/followPacksStore';
import { ProfileAvatar } from './ProfileAvatar';
import type { FollowPackWithMetadata } from '../types';
interface FollowPackCardProps {
  pack: FollowPackWithMetadata;
  onSubscribe?: () => void;
  variant?: 'default' | 'compact';
}
export function FollowPackCard({ pack, onSubscribe, variant = 'default' }: FollowPackCardProps) {
  const currentUser = useNDKCurrentUser();
  const { isSubscribed, subscribeToPack, unsubscribeFromPack, toggleFavorite, isFavorite } = useFollowPacksStore();
  const [isExpanded, setIsExpanded] = useState(false);
  // Get preview pubkeys (first 5 users)
  const previewPubkeys = pack.pubkeys.slice(0, 5);
  const subscribed = isSubscribed(pack.id);
  const favorited = isFavorite(pack.id);
  const handleSubscribe = async () => {
    if (!currentUser) return;
    if (subscribed) {
      unsubscribeFromPack(pack.id);
    } else {
      subscribeToPack(pack.id);
      onSubscribe?.();
    }
  };
  const handleFavorite = () => {
    if (!currentUser) return;
    toggleFavorite(pack.id);
  };
  if (variant === 'compact') {
    return (
      <div className="p-4 bg-white dark:bg-gray-950 hover:bg-gray-50 dark:hover:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg transition-colors">
        <div className="flex items-center justify-between">
          <div className="flex-1 min-w-0">
            <h4 className="font-medium text-gray-900 dark:text-gray-100 truncate">
              {pack.title}
            </h4>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              {pack.pubkeys.length} members
            </p>
          </div>
          <Button
            onClick={handleSubscribe}
            size="sm"
            variant={subscribed ? 'outline' : 'primary'}
            className="ml-4"
          >
            {subscribed ? 'Following' : 'Follow'}
          </Button>
        </div>
      </div>
    );
  }
  return (
    <div className="bg-white dark:bg-gray-950 border border-gray-200 dark:border-gray-800 rounded-xl overflow-hidden hover:shadow-md transition-shadow">
      {/* Header */}
      <div className="p-6">
        {pack.image && (
          <div className="mb-4 -mt-6 -mx-6">
            <img
              src={pack.image}
              alt={pack.title}
              className="w-full h-32 object-cover"
            />
          </div>
        )}
        <div className="flex items-start justify-between mb-3">
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
              {pack.title}
            </h3>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
              {pack.pubkeys.length} members
            </p>
          </div>
          <div className="flex items-center gap-2">
            <button
              onClick={handleFavorite}
              className={cn(
                "p-2 rounded-lg transition-colors",
                favorited
                  ? "bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-400"
                  : "hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-500"
              )}
              aria-label={favorited ? "Remove from favorites" : "Add to favorites"}
            >
              <Heart className={cn("w-4 h-4", favorited && "fill-current")} />
            </button>
          </div>
        </div>
        <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
          {pack.description}
        </p>
        {/* User avatars preview */}
        <div className="flex items-center mb-4">
          <div className="flex -space-x-2">
            {previewPubkeys.map((pubkey, index) => (
              <ProfileAvatar
                key={pubkey}
                pubkey={pubkey}
                size="sm"
                style={{ zIndex: 5 - index }}
              />
            ))}
            {pack.pubkeys.length > 5 && (
              <div className="w-8 h-8 rounded-full border-2 border-white dark:border-gray-950 bg-gray-200 dark:bg-gray-800 flex items-center justify-center text-xs font-medium text-gray-600 dark:text-gray-300">
                +{pack.pubkeys.length - 5}
              </div>
            )}
          </div>
        </div>
        {/* Action buttons */}
        <div className="flex gap-2">
          <Button
            onClick={handleSubscribe}
            variant={subscribed ? 'outline' : 'primary'}
            className="flex-1"
            disabled={!currentUser}
          >
            {subscribed ? (
              <>
                <UserMinus className="w-4 h-4 mr-2" />
                Unfollow Pack
              </>
            ) : (
              <>
                <UserPlus className="w-4 h-4 mr-2" />
                Follow Pack
              </>
            )}
          </Button>
        </div>
        {/* Expandable member list */}
        {pack.pubkeys.length > 5 && (
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="text-sm text-purple-600 dark:text-purple-400 hover:underline mt-3 inline-block"
          >
            {isExpanded ? 'Show less' : `View all ${pack.pubkeys.length} members`}
          </button>
        )}
        {isExpanded && (
          <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-800">
            <div className="space-y-2 max-h-64 overflow-y-auto">
              {pack.pubkeys.map((pubkey) => (
                <ProfileAvatar
                  key={pubkey}
                  pubkey={pubkey}
                  size="md"
                  showName={true}
                />
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/features/followPacks/components/ProfileAvatar.tsx">
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { cn } from '@/lib/utils';
interface ProfileAvatarProps {
  pubkey: string;
  size?: 'sm' | 'md' | 'lg';
  showName?: boolean;
  className?: string;
  style?: React.CSSProperties;
}
export function ProfileAvatar({
  pubkey,
  size = 'sm',
  showName = false,
  className,
  style
}: ProfileAvatarProps) {
  const profile = useProfile(pubkey);
  const sizeClasses = {
    sm: 'w-8 h-8 text-xs',
    md: 'w-10 h-10 text-sm',
    lg: 'w-12 h-12 text-base'
  };
  return (
    <div className={cn("flex items-center gap-3", className)} style={style}>
      <div className={cn(
        "rounded-full border-2 border-white dark:border-gray-950 overflow-hidden",
        sizeClasses[size]
      )}>
        {profile?.picture ? (
          <img
            src={profile.picture}
            alt={profile?.name || 'User'}
            className="w-full h-full object-cover"
          />
        ) : (
          <div className={cn(
            "w-full h-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold",
            sizeClasses[size]
          )}>
            {(profile?.name || 'A')[0].toUpperCase()}
          </div>
        )}
      </div>
      {showName && (
        <div className="flex-1 min-w-0">
          <p className="font-medium text-gray-900 dark:text-gray-100 truncate">
            {profile?.name || 'Anonymous'}
          </p>
          {profile?.nip05 && (
            <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
              @{profile.nip05}
            </p>
          )}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/features/followPacks/hooks/useFollowPacks.ts">
import { useMemo } from 'react';
import { useSubscribe } from '@nostr-dev-kit/ndk-hooks';
import { useFollowPacksStore } from '@/stores/followPacksStore';
import type { FollowPackWithMetadata } from '../types';
// NIP-51 kinds for lists
const FOLLOW_LIST_KIND = 30000; // People lists
const INTEREST_LIST_KIND = 30001; // Interest/topic lists
export function useFollowPacks(pubkey?: string) {
  const { isSubscribed, isFavorite } = useFollowPacksStore();
  // Fetch lists created by a specific user or all lists
  const filters = pubkey
    ? [{
        kinds: [FOLLOW_LIST_KIND, INTEREST_LIST_KIND],
        authors: [pubkey],
        limit: 50
      }]
    : [{
        kinds: [FOLLOW_LIST_KIND, INTEREST_LIST_KIND],
        limit: 100
      }];
  const { events } = useSubscribe(filters);
  // Process events into FollowPackWithMetadata
  const processedPacks = useMemo(() => {
    if (!events) return [];
    return events.map((event) => {
      const dTag = event.tags.find(t => t[0] === 'd')?.[1] || '';
      const title = event.tags.find(t => t[0] === 'title')?.[1] ||
                    event.tags.find(t => t[0] === 'name')?.[1] ||
                    dTag || 'Untitled List';
      const description = event.tags.find(t => t[0] === 'description')?.[1] ||
                         event.tags.find(t => t[0] === 'about')?.[1] || '';
      const image = event.tags.find(t => t[0] === 'image')?.[1];
      // Extract pubkeys from 'p' tags
      const pubkeys = event.tags
        .filter(t => t[0] === 'p')
        .map(t => t[1]);
      return {
        id: event.id,
        author: event.pubkey,
        title,
        description,
        image,
        pubkeys,
        dTag,
        subscriberCount: 0,
        isSubscribed: isSubscribed(event.id),
        isFavorite: isFavorite(event.id),
        lastUpdated: event.created_at,
        event
      } as FollowPackWithMetadata;
    });
  }, [events, isSubscribed, isFavorite]);
  return {
    packs: processedPacks
  };
}
export function useFollowPacksByCategory(category?: string) {
  const { packs } = useFollowPacks();
  const filteredPacks = useMemo(() => {
    if (!category) return packs;
    // Filter by content analysis since NIP-51 doesn't define standard category tags
    return packs.filter(pack => {
      const searchText = `${pack.title} ${pack.description}`.toLowerCase();
      switch (category) {
        case 'tech':
          return /tech|dev|code|program|software/i.test(searchText);
        case 'bitcoin':
          return /bitcoin|btc|sats|lightning/i.test(searchText);
        case 'art':
          return /art|design|creative|artist/i.test(searchText);
        case 'music':
          return /music|musician|band|song/i.test(searchText);
        case 'news':
          return /news|media|journal|report/i.test(searchText);
        case 'philosophy':
          return /philosoph|think|idea|concept/i.test(searchText);
        case 'nostr':
          return /nostr|relay|nip/i.test(searchText);
        default:
          return true;
      }
    });
  }, [packs, category]);
  return filteredPacks;
}
export function useSubscribedFollowPacks() {
  const { subscribedPacks } = useFollowPacksStore();
  const { packs } = useFollowPacks();
  return useMemo(() => {
    return packs.filter(pack => subscribedPacks.includes(pack.id));
  }, [packs, subscribedPacks]);
}
</file>

<file path="src/features/followPacks/types.ts">
import type { NDKFollowPack } from '@nostr-dev-kit/ndk-hooks';
export interface FollowPackWithMetadata extends NDKFollowPack {
  subscriberCount?: number;
  isSubscribed?: boolean;
  lastUpdated?: number;
}
export interface FollowPackCategory {
  id: string;
  name: string;
  description: string;
  icon: string;
}
export const FOLLOW_PACK_CATEGORIES: FollowPackCategory[] = [
  { id: 'tech', name: 'Technology', description: 'Developers, tech leaders, and innovators', icon: '💻' },
  { id: 'bitcoin', name: 'Bitcoin', description: 'Bitcoin developers and advocates', icon: '₿' },
  { id: 'art', name: 'Art & Design', description: 'Artists, designers, and creators', icon: '🎨' },
  { id: 'music', name: 'Music', description: 'Musicians and music enthusiasts', icon: '🎵' },
  { id: 'news', name: 'News & Media', description: 'Journalists and news sources', icon: '📰' },
  { id: 'philosophy', name: 'Philosophy', description: 'Thinkers and philosophers', icon: '🤔' },
  { id: 'nostr', name: 'Nostr Development', description: 'Nostr protocol developers', icon: '🟣' },
  { id: 'general', name: 'General', description: 'Mixed and general interest', icon: '🌐' }
];
</file>

<file path="src/features/profile/ProfileEditor.tsx">
import { useState, useRef } from 'react';
import { useNDK, useProfile } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent, NDKKind } from '@nostr-dev-kit/ndk';
import { BlossomClient } from 'blossom-client-sdk';
import { X, Upload, Loader2 } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
interface ProfileEditorProps {
  pubkey: string;
  onClose: () => void;
  onSave: () => void;
}
export function ProfileEditor({ pubkey, onClose, onSave }: ProfileEditorProps) {
  const ndk = useNDK();
  const profile = useProfile(pubkey);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const bannerInputRef = useRef<HTMLInputElement>(null);
  const [formData, setFormData] = useState({
    name: profile?.name || '',
    displayName: profile?.displayName || '',
    about: profile?.about || '',
    picture: profile?.picture || '',
    banner: profile?.banner || '',
    nip05: profile?.nip05 || '',
    lud16: profile?.lud16 || '',
    website: profile?.website || ''
  });
  const getBlossomServers = () => {
    const stored = localStorage.getItem('blossomServers');
    if (stored) {
      try {
        return JSON.parse(stored);
      } catch {
        // Failed to parse stored blossom servers, fall back to default
      }
    }
    return ['https://blossom.primal.net'];
  };
  const uploadToBlossoms = async (file: File): Promise<string> => {
    const servers = getBlossomServers();
    const mainServer = servers[0];
    const auth = await BlossomClient.createUploadAuth(file, async (event) => {
      const ndkEvent = new NDKEvent(ndk.ndk);
      ndkEvent.kind = event.kind;
      ndkEvent.content = event.content;
      ndkEvent.tags = event.tags;
      ndkEvent.created_at = event.created_at;
      await ndkEvent.sign();
      return ndkEvent.rawEvent();
    });
    const blob = await BlossomClient.uploadBlob(mainServer, file, auth);
    // Mirror to other servers if available
    for (let i = 1; i < servers.length; i++) {
      try {
        await BlossomClient.mirrorBlob(servers[i], blob.url, auth);
      } catch (error) {
        console.error(`Failed to mirror to ${servers[i]}:`, error);
      }
    }
    return blob.url;
  };
  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>, field: 'picture' | 'banner') => {
    const file = event.target.files?.[0];
    if (!file) return;
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file');
      return;
    }
    if (file.size > 5 * 1024 * 1024) {
      alert('Image size must be less than 5MB');
      return;
    }
    setIsUploading(true);
    try {
      const url = await uploadToBlossoms(file);
      setFormData(prev => ({ ...prev, [field]: url }));
    } catch (error) {
      console.error('Upload failed:', error);
      alert('Failed to upload image. Please check your Blossom server settings.');
    } finally {
      setIsUploading(false);
    }
  };
  const handleSubmit = async () => {
    if (!ndk.ndk.signer) {
      alert('Please connect your wallet to save changes');
      return;
    }
    setIsSubmitting(true);
    try {
      const event = new NDKEvent(ndk.ndk);
      event.kind = NDKKind.Metadata;
      event.content = JSON.stringify({
        name: formData.name,
        display_name: formData.displayName,
        about: formData.about,
        picture: formData.picture,
        banner: formData.banner,
        nip05: formData.nip05,
        lud16: formData.lud16,
        website: formData.website
      });
      await event.sign();
      await event.publish();
      onSave();
    } catch (error) {
      console.error('Failed to save profile:', error);
      alert('Failed to save profile changes');
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white dark:bg-gray-950 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 bg-white dark:bg-gray-950 border-b border-gray-200 dark:border-gray-800 p-4 flex items-center justify-between">
          <h2 className="text-xl font-semibold">Edit Profile</h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
            disabled={isSubmitting}
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        {/* Content */}
        <div className="p-4 space-y-6">
          {/* Banner */}
          <div>
            <Label>Banner</Label>
            <div className="mt-2">
              <div
                className="h-32 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg relative overflow-hidden cursor-pointer group"
                onClick={() => bannerInputRef.current?.click()}
                style={formData.banner ? { backgroundImage: `url(${formData.banner})`, backgroundSize: 'cover', backgroundPosition: 'center' } : undefined}
              >
                <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                  <Upload className="w-8 h-8 text-white" />
                </div>
                <input
                  ref={bannerInputRef}
                  type="file"
                  accept="image/*"
                  className="hidden"
                  onChange={(e) => handleImageUpload(e, 'banner')}
                  disabled={isUploading}
                />
              </div>
            </div>
          </div>
          {/* Profile Picture */}
          <div>
            <Label>Profile Picture</Label>
            <div className="mt-2">
              <div className="flex items-center space-x-4">
                <div
                  className="w-24 h-24 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 relative overflow-hidden cursor-pointer group"
                  onClick={() => fileInputRef.current?.click()}
                >
                  {formData.picture ? (
                    <img src={formData.picture} alt="Profile" className="w-full h-full object-cover" />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-white font-bold text-2xl">
                      {formData.name ? formData.name[0].toUpperCase() : 'A'}
                    </div>
                  )}
                  <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                    {isUploading ? (
                      <Loader2 className="w-6 h-6 text-white animate-spin" />
                    ) : (
                      <Upload className="w-6 h-6 text-white" />
                    )}
                  </div>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*"
                    className="hidden"
                    onChange={(e) => handleImageUpload(e, 'picture')}
                    disabled={isUploading}
                  />
                </div>
                <div className="flex-1">
                  <Input
                    placeholder="Or enter image URL"
                    value={formData.picture}
                    onChange={(e) => setFormData(prev => ({ ...prev, picture: e.target.value }))}
                    disabled={isUploading}
                  />
                </div>
              </div>
            </div>
          </div>
          {/* Name */}
          <div>
            <Label htmlFor="name">Name</Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              placeholder="Satoshi Nakamoto"
              className="mt-2"
            />
          </div>
          {/* Display Name */}
          <div>
            <Label htmlFor="displayName">Display Name</Label>
            <Input
              id="displayName"
              value={formData.displayName}
              onChange={(e) => setFormData(prev => ({ ...prev, displayName: e.target.value }))}
              placeholder="Optional display name"
              className="mt-2"
            />
          </div>
          {/* About - WYSIWYG */}
          <div>
            <Label htmlFor="about">About</Label>
            <div className="mt-2 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
              <div className="bg-gray-50 dark:bg-gray-900 px-3 py-2 border-b border-gray-200 dark:border-gray-700 flex items-center space-x-2">
                <button
                  type="button"
                  className="px-2 py-1 text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-700 rounded"
                  onClick={() => {
                    const textarea = document.getElementById('about') as HTMLTextAreaElement;
                    const start = textarea.selectionStart;
                    const end = textarea.selectionEnd;
                    const text = formData.about;
                    const selectedText = text.substring(start, end);
                    const newText = text.substring(0, start) + `**${selectedText}**` + text.substring(end);
                    setFormData(prev => ({ ...prev, about: newText }));
                  }}
                >
                  <strong>B</strong>
                </button>
                <button
                  type="button"
                  className="px-2 py-1 text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-700 rounded italic"
                  onClick={() => {
                    const textarea = document.getElementById('about') as HTMLTextAreaElement;
                    const start = textarea.selectionStart;
                    const end = textarea.selectionEnd;
                    const text = formData.about;
                    const selectedText = text.substring(start, end);
                    const newText = text.substring(0, start) + `*${selectedText}*` + text.substring(end);
                    setFormData(prev => ({ ...prev, about: newText }));
                  }}
                >
                  <em>I</em>
                </button>
              </div>
              <Textarea
                id="about"
                value={formData.about}
                onChange={(e) => setFormData(prev => ({ ...prev, about: e.target.value }))}
                placeholder="Tell us about yourself..."
                className="border-0 focus:ring-0 min-h-[120px]"
                rows={5}
              />
            </div>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
              Supports markdown formatting
            </p>
          </div>
          {/* NIP-05 */}
          <div>
            <Label htmlFor="nip05">NIP-05 Identifier</Label>
            <Input
              id="nip05"
              value={formData.nip05}
              onChange={(e) => setFormData(prev => ({ ...prev, nip05: e.target.value }))}
              placeholder="name@domain.com"
              className="mt-2"
            />
          </div>
          {/* Lightning Address */}
          <div>
            <Label htmlFor="lud16">Lightning Address</Label>
            <Input
              id="lud16"
              value={formData.lud16}
              onChange={(e) => setFormData(prev => ({ ...prev, lud16: e.target.value }))}
              placeholder="name@walletofsatoshi.com"
              className="mt-2"
            />
          </div>
          {/* Website */}
          <div>
            <Label htmlFor="website">Website</Label>
            <Input
              id="website"
              value={formData.website}
              onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}
              placeholder="https://example.com"
              className="mt-2"
            />
          </div>
        </div>
        {/* Footer */}
        <div className="sticky bottom-0 bg-white dark:bg-gray-950 border-t border-gray-200 dark:border-gray-800 p-4 flex justify-end space-x-3">
          <button
            onClick={onClose}
            className="px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
            disabled={isSubmitting}
          >
            Cancel
          </button>
          <button
            onClick={handleSubmit}
            disabled={isSubmitting || isUploading}
            className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
          >
            {isSubmitting && <Loader2 className="w-4 h-4 animate-spin" />}
            <span>{isSubmitting ? 'Saving...' : 'Save Changes'}</span>
          </button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/features/settings/BlossomSettings.tsx">
import { useState, useEffect } from 'react';
import { Plus, X, ExternalLink, Trash2 } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
const DEFAULT_SERVERS = [
  'https://blossom.primal.net',
  'https://blossom.nostr.hu',
  'https://blossom.oxtr.dev'
];
export function BlossomSettings() {
  const [servers, setServers] = useState<string[]>([]);
  const [newServer, setNewServer] = useState('');
  const [isAddingServer, setIsAddingServer] = useState(false);
  useEffect(() => {
    const stored = localStorage.getItem('blossomServers');
    if (stored) {
      try {
        setServers(JSON.parse(stored));
      } catch {
        setServers([DEFAULT_SERVERS[0]]);
      }
    } else {
      setServers([DEFAULT_SERVERS[0]]);
    }
  }, []);
  const saveServers = (newServers: string[]) => {
    setServers(newServers);
    localStorage.setItem('blossomServers', JSON.stringify(newServers));
  };
  const addServer = () => {
    if (!newServer.trim()) return;
    try {
      const url = new URL(newServer.trim());
      if (!url.protocol.startsWith('http')) {
        alert('Please enter a valid HTTP or HTTPS URL');
        return;
      }
      const cleanUrl = url.origin + url.pathname.replace(/\/$/, '');
      if (servers.includes(cleanUrl)) {
        alert('This server is already in your list');
        return;
      }
      saveServers([...servers, cleanUrl]);
      setNewServer('');
      setIsAddingServer(false);
    } catch {
      alert('Please enter a valid URL');
    }
  };
  const removeServer = (serverToRemove: string) => {
    if (servers.length === 1) {
      alert('You must have at least one Blossom server');
      return;
    }
    saveServers(servers.filter(s => s !== serverToRemove));
  };
  const moveServerUp = (index: number) => {
    if (index === 0) return;
    const newServers = [...servers];
    [newServers[index - 1], newServers[index]] = [newServers[index], newServers[index - 1]];
    saveServers(newServers);
  };
  const moveServerDown = (index: number) => {
    if (index === servers.length - 1) return;
    const newServers = [...servers];
    [newServers[index], newServers[index + 1]] = [newServers[index + 1], newServers[index]];
    saveServers(newServers);
  };
  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold mb-2">Blossom Media Servers</h3>
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
          Configure your Blossom servers for uploading images and media. The first server is your primary upload destination, and additional servers are used as mirrors for redundancy.
        </p>
      </div>
      {/* Current servers */}
      <div className="space-y-3">
        <Label>Your Blossom Servers</Label>
        <div className="space-y-2">
          {servers.map((server, index) => (
            <div
              key={server}
              className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-900 rounded-lg"
            >
              <div className="flex items-center space-x-3">
                <div className="flex flex-col space-y-1">
                  <button
                    onClick={() => moveServerUp(index)}
                    disabled={index === 0}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 disabled:opacity-30 disabled:cursor-not-allowed p-0.5"
                    aria-label="Move up"
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                    </svg>
                  </button>
                  <button
                    onClick={() => moveServerDown(index)}
                    disabled={index === servers.length - 1}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 disabled:opacity-30 disabled:cursor-not-allowed p-0.5"
                    aria-label="Move down"
                  >
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                </div>
                <div>
                  <div className="flex items-center space-x-2">
                    <span className="font-medium">{server}</span>
                    {index === 0 && (
                      <span className="text-xs bg-purple-100 dark:bg-purple-900/50 text-purple-700 dark:text-purple-300 px-2 py-0.5 rounded">
                        Primary
                      </span>
                    )}
                  </div>
                  <a
                    href={server}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-sm text-gray-500 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 flex items-center space-x-1"
                  >
                    <span>Visit server</span>
                    <ExternalLink className="w-3 h-3" />
                  </a>
                </div>
              </div>
              {servers.length > 1 && (
                <button
                  onClick={() => removeServer(server)}
                  className="text-red-500 hover:text-red-600 p-2"
                  aria-label="Remove server"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              )}
            </div>
          ))}
        </div>
      </div>
      {/* Add server */}
      {isAddingServer ? (
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
          <Label htmlFor="new-server">Add Blossom Server</Label>
          <div className="flex space-x-2 mt-2">
            <Input
              id="new-server"
              value={newServer}
              onChange={(e) => setNewServer(e.target.value)}
              placeholder="https://blossom.example.com"
              onKeyPress={(e) => e.key === 'Enter' && addServer()}
            />
            <button
              onClick={addServer}
              className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
            >
              Add
            </button>
            <button
              onClick={() => {
                setIsAddingServer(false);
                setNewServer('');
              }}
              className="p-2 text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>
      ) : (
        <button
          onClick={() => setIsAddingServer(true)}
          className="flex items-center space-x-2 px-4 py-2 text-purple-600 dark:text-purple-400 hover:bg-purple-50 dark:hover:bg-purple-900/20 rounded-lg transition-colors"
        >
          <Plus className="w-4 h-4" />
          <span>Add Server</span>
        </button>
      )}
      {/* Suggested servers */}
      <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
        <Label>Suggested Servers</Label>
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
          Popular public Blossom servers you can add to your list
        </p>
        <div className="space-y-2">
          {DEFAULT_SERVERS.filter(s => !servers.includes(s)).map(server => (
            <div
              key={server}
              className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-900 rounded-lg"
            >
              <span className="text-sm">{server}</span>
              <button
                onClick={() => saveServers([...servers, server])}
                className="text-sm text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300"
              >
                Add
              </button>
            </div>
          ))}
          {DEFAULT_SERVERS.every(s => servers.includes(s)) && (
            <p className="text-sm text-gray-500 dark:text-gray-400">
              All suggested servers have been added
            </p>
          )}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/features/settings/FollowPacksSettings.tsx">
import { useState } from 'react';
import { Package, Plus, Search, Sparkles } from 'lucide-react';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { FollowPackCard } from '@/features/followPacks/components/FollowPackCard';
import { useFollowPacks, useFollowPacksByCategory, useSubscribedFollowPacks } from '@/features/followPacks/hooks/useFollowPacks';
import { FOLLOW_PACK_CATEGORIES } from '@/features/followPacks/types';
export function FollowPacksSettings() {
  const currentUser = useNDKCurrentUser();
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [showCreateForm, setShowCreateForm] = useState(false);
  const subscribedPacks = useSubscribedFollowPacks();
  const categoryPacks = useFollowPacksByCategory(selectedCategory === 'all' ? undefined : selectedCategory);
  const { packs: userPacks } = useFollowPacks(currentUser?.pubkey);
  // Filter packs based on search query
  const filteredPacks = categoryPacks.filter(pack => {
    if (!searchQuery) return true;
    const query = searchQuery.toLowerCase();
    return (
      pack.title.toLowerCase().includes(query) ||
      pack.description.toLowerCase().includes(query)
    );
  });
  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2">
          <Package className="w-5 h-5 text-purple-600" />
          Follow Packs
        </h2>
        <p className="mt-1 text-sm text-gray-600 dark:text-gray-400">
          Discover and manage curated lists of accounts to follow
        </p>
      </div>
      {/* Subscribed Packs */}
      {subscribedPacks.length > 0 && (
        <div>
          <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-3">
            Your Subscribed Packs
          </h3>
          <div className="grid gap-4 md:grid-cols-2">
            {subscribedPacks.map(pack => (
              <FollowPackCard key={pack.id} pack={pack} variant="compact" />
            ))}
          </div>
        </div>
      )}
      {/* Your Created Packs */}
      {userPacks.length > 0 && (
        <div>
          <div className="flex items-center justify-between mb-3">
            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100">
              Your Created Packs
            </h3>
            <Button
              onClick={() => setShowCreateForm(true)}
              size="sm"
              variant="outline"
            >
              <Plus className="w-4 h-4 mr-2" />
              Create Pack
            </Button>
          </div>
          <div className="grid gap-4 md:grid-cols-2">
            {userPacks.map(pack => (
              <FollowPackCard key={pack.id} pack={pack} />
            ))}
          </div>
        </div>
      )}
      {/* Discover Packs */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-3 flex items-center gap-2">
          <Sparkles className="w-4 h-4 text-yellow-500" />
          Discover Follow Packs
        </h3>
        {/* Search and Filter */}
        <div className="space-y-3 mb-4">
          {/* Search */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
            <Input
              type="search"
              placeholder="Search follow packs..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
          {/* Category Filter */}
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setSelectedCategory('all')}
              className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                selectedCategory === 'all'
                  ? 'bg-purple-600 text-white'
                  : 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
              }`}
            >
              All
            </button>
            {FOLLOW_PACK_CATEGORIES.map(category => (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                  selectedCategory === category.id
                    ? 'bg-purple-600 text-white'
                    : 'bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'
                }`}
              >
                <span className="mr-1">{category.icon}</span>
                {category.name}
              </button>
            ))}
          </div>
        </div>
        {/* Pack Grid */}
        {filteredPacks.length > 0 ? (
          <div className="grid gap-4 md:grid-cols-2">
            {filteredPacks.map(pack => (
              <FollowPackCard key={pack.id} pack={pack} />
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <Package className="w-12 h-12 text-gray-400 mx-auto mb-3" />
            <p className="text-gray-500 dark:text-gray-400">
              {searchQuery
                ? 'No follow packs found matching your search'
                : 'No follow packs available in this category'}
            </p>
          </div>
        )}
      </div>
      {/* Create Pack Form (placeholder for now) */}
      {showCreateForm && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <div className="bg-white dark:bg-gray-900 rounded-xl p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4">Create Follow Pack</h3>
            <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
              Follow pack creation will be available soon!
            </p>
            <Button
              onClick={() => setShowCreateForm(false)}
              variant="outline"
              className="w-full"
            >
              Close
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/features/settings/NotificationSettings.tsx">
export function NotificationSettings() {
  return (
    <div className="text-center py-12 text-gray-500">
      Notification settings coming soon...
    </div>
  );
}
</file>

<file path="src/features/settings/PrivacySettings.tsx">
export function PrivacySettings() {
  return (
    <div className="text-center py-12 text-gray-500">
      Privacy settings coming soon...
    </div>
  );
}
</file>

<file path="src/features/settings/ProfileSettings.tsx">
export function ProfileSettings() {
  return (
    <div className="text-center py-12 text-gray-500">
      Profile settings coming soon...
    </div>
  );
}
</file>

<file path="src/features/settings/RelaySettings.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Plus,
  Trash2,
  Check,
  Zap,
  BookOpen,
  Edit2,
  Globe,
  AlertCircle,
  Wifi
} from 'lucide-react';
import { useSettingsStore } from '@/stores/settingsStore';
import { cn } from '@/lib/utils';
export function RelaySettings() {
  const { relays, addRelay, removeRelay, updateRelay, toggleRelay } = useSettingsStore();
  const [isAdding, setIsAdding] = useState(false);
  const [newRelay, setNewRelay] = useState({ url: '', read: true, write: true });
  const [testingRelay, setTestingRelay] = useState<string | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<Record<string, 'connected' | 'disconnected' | 'testing'>>({});
  const handleAddRelay = () => {
    if (newRelay.url && !relays.some(r => r.url === newRelay.url)) {
      addRelay({
        ...newRelay,
        enabled: true,
        url: newRelay.url.startsWith('wss://') ? newRelay.url : `wss://${newRelay.url}`,
      });
      setNewRelay({ url: '', read: true, write: true });
      setIsAdding(false);
    }
  };
  const testRelayConnection = async (url: string) => {
    setTestingRelay(url);
    setConnectionStatus(prev => ({ ...prev, [url]: 'testing' }));
    // Mock connection test
    setTimeout(() => {
      const isConnected = Math.random() > 0.3; // 70% success rate for demo
      setConnectionStatus(prev => ({
        ...prev,
        [url]: isConnected ? 'connected' : 'disconnected'
      }));
      setTestingRelay(null);
    }, 1500);
  };
  const getRelayStatus = (url: string) => {
    if (testingRelay === url) return 'testing';
    return connectionStatus[url] || 'disconnected';
  };
  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
          Relay Configuration
        </h2>
        <p className="text-sm text-gray-600 dark:text-gray-400">
          Configure which Nostr relays your app connects to for reading and publishing events.
        </p>
      </div>
      {/* Stats */}
      <div className="grid grid-cols-3 gap-2 md:gap-4">
        <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-3 md:p-4">
          <div className="flex items-center gap-1 md:gap-2 text-green-600 dark:text-green-400 mb-1">
            <Wifi className="w-3 h-3 md:w-4 md:h-4" />
            <span className="text-xs md:text-sm font-medium">Active</span>
          </div>
          <div className="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">
            {relays.filter(r => r.enabled).length}
          </div>
        </div>
        <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-3 md:p-4">
          <div className="flex items-center gap-1 md:gap-2 text-blue-600 dark:text-blue-400 mb-1">
            <BookOpen className="w-3 h-3 md:w-4 md:h-4" />
            <span className="text-xs md:text-sm font-medium">Read</span>
          </div>
          <div className="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">
            {relays.filter(r => r.enabled && r.read).length}
          </div>
        </div>
        <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-3 md:p-4">
          <div className="flex items-center gap-1 md:gap-2 text-purple-600 dark:text-purple-400 mb-1">
            <Edit2 className="w-3 h-3 md:w-4 md:h-4" />
            <span className="text-xs md:text-sm font-medium">Write</span>
          </div>
          <div className="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">
            {relays.filter(r => r.enabled && r.write).length}
          </div>
        </div>
      </div>
      {/* Relay List */}
      <div className="space-y-2">
        <AnimatePresence>
          {relays.map((relay) => {
            const status = getRelayStatus(relay.url);
            return (
              <motion.div
                key={relay.url}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                className={cn(
                  'border rounded-lg p-4 transition-all',
                  relay.enabled
                    ? 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700'
                    : 'bg-gray-50 dark:bg-gray-900 border-gray-200 dark:border-gray-800 opacity-60'
                )}
              >
                <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-3">
                  <div className="flex-1">
                    <div className="flex items-start md:items-center gap-3">
                      <button
                        onClick={() => toggleRelay(relay.url)}
                        className={cn(
                          'w-5 h-5 rounded-full border-2 flex items-center justify-center transition-all flex-shrink-0 mt-0.5 md:mt-0',
                          relay.enabled
                            ? 'bg-purple-600 border-purple-600'
                            : 'bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600'
                        )}
                      >
                        {relay.enabled && <Check className="w-3 h-3 text-white" />}
                      </button>
                      <div className="flex-1 min-w-0">
                        <div className="flex flex-wrap items-center gap-2">
                          <Globe className="w-4 h-4 text-gray-400 flex-shrink-0" />
                          <span className="font-mono text-xs md:text-sm text-gray-900 dark:text-gray-100 break-all">
                            {relay.url}
                          </span>
                          {status === 'connected' && (
                            <span className="text-xs bg-green-100 dark:bg-green-950 text-green-700 dark:text-green-400 px-2 py-0.5 rounded-full">
                              Connected
                            </span>
                          )}
                          {status === 'disconnected' && connectionStatus[relay.url] !== undefined && (
                            <span className="text-xs bg-red-100 dark:bg-red-950 text-red-700 dark:text-red-400 px-2 py-0.5 rounded-full">
                              Offline
                            </span>
                          )}
                          {status === 'testing' && (
                            <span className="text-xs bg-yellow-100 dark:bg-yellow-950 text-yellow-700 dark:text-yellow-400 px-2 py-0.5 rounded-full">
                              Testing...
                            </span>
                          )}
                        </div>
                        <div className="flex items-center gap-4 mt-2">
                          <label className="flex items-center gap-2 cursor-pointer">
                            <input
                              type="checkbox"
                              checked={relay.read}
                              onChange={(e) => updateRelay(relay.url, { read: e.target.checked })}
                              className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                            />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                              Read
                            </span>
                          </label>
                          <label className="flex items-center gap-2 cursor-pointer">
                            <input
                              type="checkbox"
                              checked={relay.write}
                              onChange={(e) => updateRelay(relay.url, { write: e.target.checked })}
                              className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                            />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                              Write
                            </span>
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 ml-8 md:ml-0">
                    <button
                      onClick={() => testRelayConnection(relay.url)}
                      disabled={testingRelay === relay.url}
                      className="p-1.5 md:p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors disabled:opacity-50"
                      title="Test connection"
                    >
                      <Zap className="w-4 h-4 text-gray-500" />
                    </button>
                    <button
                      onClick={() => removeRelay(relay.url)}
                      className="p-1.5 md:p-2 hover:bg-red-50 dark:hover:bg-red-950/30 rounded-lg transition-colors group"
                      title="Remove relay"
                    >
                      <Trash2 className="w-4 h-4 text-gray-500 group-hover:text-red-600" />
                    </button>
                  </div>
                </div>
              </motion.div>
            );
          })}
        </AnimatePresence>
        {/* Add New Relay */}
        <AnimatePresence>
          {isAdding ? (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="border-2 border-dashed border-purple-300 dark:border-purple-700 rounded-lg p-4"
            >
              <div className="space-y-3">
                <input
                  type="text"
                  value={newRelay.url}
                  onChange={(e) => setNewRelay({ ...newRelay, url: e.target.value })}
                  placeholder="wss://relay.example.com"
                  className="w-full px-3 py-2 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                  autoFocus
                />
                <div className="flex items-center gap-4">
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={newRelay.read}
                      onChange={(e) => setNewRelay({ ...newRelay, read: e.target.checked })}
                      className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                    />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Read</span>
                  </label>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={newRelay.write}
                      onChange={(e) => setNewRelay({ ...newRelay, write: e.target.checked })}
                      className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                    />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Write</span>
                  </label>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={handleAddRelay}
                    disabled={!newRelay.url}
                    className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    Add Relay
                  </button>
                  <button
                    onClick={() => {
                      setIsAdding(false);
                      setNewRelay({ url: '', read: true, write: true });
                    }}
                    className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </motion.div>
          ) : (
            <motion.button
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              onClick={() => setIsAdding(true)}
              className="w-full border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-lg p-4 hover:border-purple-400 dark:hover:border-purple-600 transition-colors group"
            >
              <div className="flex items-center justify-center gap-2 text-gray-500 group-hover:text-purple-600 dark:group-hover:text-purple-400">
                <Plus className="w-5 h-5" />
                <span className="font-medium">Add Relay</span>
              </div>
            </motion.button>
          )}
        </AnimatePresence>
      </div>
      {/* Warning */}
      <div className="bg-yellow-50 dark:bg-yellow-950/30 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
        <div className="flex gap-3">
          <AlertCircle className="w-5 h-5 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5" />
          <div className="text-sm text-yellow-800 dark:text-yellow-300">
            <p className="font-medium mb-1">Important</p>
            <p>Changes to relay configuration will take effect after refreshing the app.</p>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/features/settings/ThemeSettings.tsx">
import { useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { useSettingsStore } from '@/stores/settingsStore';
import { Globe, Palette } from 'lucide-react';
export function ThemeSettings() {
  const { t, i18n } = useTranslation();
  const { language, theme, setLanguage, setTheme } = useSettingsStore();
  useEffect(() => {
    i18n.changeLanguage(language);
  }, [language, i18n]);
  const handleLanguageChange = (newLanguage: 'en' | 'es') => {
    setLanguage(newLanguage);
    i18n.changeLanguage(newLanguage);
  };
  const handleThemeChange = (newTheme: 'light' | 'dark' | 'system') => {
    setTheme(newTheme);
    // Apply theme to document
    if (newTheme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      document.documentElement.classList.toggle('dark', systemTheme === 'dark');
    } else {
      document.documentElement.classList.toggle('dark', newTheme === 'dark');
    }
  };
  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
          {t('settings.sections.appearance.title')}
        </h2>
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-6">
          {t('settings.sections.appearance.description')}
        </p>
      </div>
      {/* Language Selection */}
      <div className="border-b border-gray-200 dark:border-gray-700 pb-6">
        <div className="flex items-center gap-3 mb-4">
          <Globe className="w-5 h-5 text-purple-600" />
          <h3 className="text-base font-medium text-gray-900 dark:text-gray-100">
            {t('settings.sections.appearance.language')}
          </h3>
        </div>
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
          {t('settings.sections.appearance.languageDescription')}
        </p>
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={() => handleLanguageChange('en')}
            className={`px-4 py-3 rounded-lg border transition-all ${
              language === 'en'
                ? 'bg-purple-50 dark:bg-purple-950/30 border-purple-500 text-purple-700 dark:text-purple-400'
                : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-750'
            }`}
          >
            <div className="flex items-center justify-center gap-2">
              <span className="text-lg">🇺🇸</span>
              <span className="font-medium">English</span>
            </div>
          </button>
          <button
            onClick={() => handleLanguageChange('es')}
            className={`px-4 py-3 rounded-lg border transition-all ${
              language === 'es'
                ? 'bg-purple-50 dark:bg-purple-950/30 border-purple-500 text-purple-700 dark:text-purple-400'
                : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-750'
            }`}
          >
            <div className="flex items-center justify-center gap-2">
              <span className="text-lg">🇪🇸</span>
              <span className="font-medium">Español</span>
            </div>
          </button>
        </div>
      </div>
      {/* Theme Selection */}
      <div>
        <div className="flex items-center gap-3 mb-4">
          <Palette className="w-5 h-5 text-purple-600" />
          <h3 className="text-base font-medium text-gray-900 dark:text-gray-100">
            {t('settings.sections.appearance.theme')}
          </h3>
        </div>
        <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
          {t('settings.sections.appearance.themeDescription')}
        </p>
        <div className="grid grid-cols-3 gap-3">
          <button
            onClick={() => handleThemeChange('light')}
            className={`px-4 py-3 rounded-lg border transition-all ${
              theme === 'light'
                ? 'bg-purple-50 dark:bg-purple-950/30 border-purple-500 text-purple-700 dark:text-purple-400'
                : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-750'
            }`}
          >
            <div className="flex flex-col items-center gap-2">
              <span className="text-2xl">☀️</span>
              <span className="text-sm font-medium">
                {t('settings.sections.appearance.themes.light')}
              </span>
            </div>
          </button>
          <button
            onClick={() => handleThemeChange('dark')}
            className={`px-4 py-3 rounded-lg border transition-all ${
              theme === 'dark'
                ? 'bg-purple-50 dark:bg-purple-950/30 border-purple-500 text-purple-700 dark:text-purple-400'
                : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-750'
            }`}
          >
            <div className="flex flex-col items-center gap-2">
              <span className="text-2xl">🌙</span>
              <span className="text-sm font-medium">
                {t('settings.sections.appearance.themes.dark')}
              </span>
            </div>
          </button>
          <button
            onClick={() => handleThemeChange('system')}
            className={`px-4 py-3 rounded-lg border transition-all ${
              theme === 'system'
                ? 'bg-purple-50 dark:bg-purple-950/30 border-purple-500 text-purple-700 dark:text-purple-400'
                : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-750'
            }`}
          >
            <div className="flex flex-col items-center gap-2">
              <span className="text-2xl">💻</span>
              <span className="text-sm font-medium">
                {t('settings.sections.appearance.themes.system')}
              </span>
            </div>
          </button>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/features/trades/CompactFilters.tsx">
import { ChevronDown } from 'lucide-react';
import { useState, useRef, useEffect } from 'react';
interface CompactFiltersProps {
  filters: {
    currency: string;
    paymentMethod: string;
    orderType: 'all' | 'buy' | 'sell';
  };
  onFiltersChange: (filters: any) => void;
}
const orderTypes = [
  { value: 'all', label: 'All', color: 'text-gray-700' },
  { value: 'buy', label: 'Buy', color: 'text-green-600' },
  { value: 'sell', label: 'Sell', color: 'text-red-600' },
];
const currencies = [
  { code: 'all', name: 'All', flag: '🌍' },
  { code: 'USD', name: 'USD', flag: '🇺🇸' },
  { code: 'EUR', name: 'EUR', flag: '🇪🇺' },
  { code: 'BRL', name: 'BRL', flag: '🇧🇷' },
  { code: 'ARS', name: 'ARS', flag: '🇦🇷' },
  { code: 'GBP', name: 'GBP', flag: '🇬🇧' },
  { code: 'PLN', name: 'PLN', flag: '🇵🇱' },
  { code: 'JPY', name: 'JPY', flag: '🇯🇵' },
];
const paymentMethods = [
  { id: 'all', name: 'All', icon: '💰' },
  { id: 'Cash', name: 'Cash', icon: '💵' },
  { id: 'PIX', name: 'PIX', icon: '🔄' },
  { id: 'BLIK', name: 'BLIK', icon: '📱' },
  { id: 'Revolut', name: 'Revolut', icon: '💳' },
  { id: 'Zelle', name: 'Zelle', icon: '🏦' },
  { id: 'CashApp', name: 'CashApp', icon: '📲' },
];
function Dropdown({
  value,
  options,
  onChange,
  renderOption,
  renderValue,
  className = ''
}: any) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);
  return (
    <div ref={dropdownRef} className={`relative ${className}`}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-1 px-3 py-1.5 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-lg text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
      >
        {renderValue(value)}
        <ChevronDown className={`w-3 h-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      {isOpen && (
        <div className="absolute top-full mt-1 left-0 w-max min-w-[120px] bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-[100] max-h-64 overflow-y-auto">
          {options.map((option: any) => (
            <button
              key={option.value || option.code || option.id}
              onClick={() => {
                onChange(option);
                setIsOpen(false);
              }}
              className="w-full flex items-center gap-2 px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-left"
            >
              {renderOption(option)}
            </button>
          ))}
        </div>
      )}
    </div>
  );
}
export function CompactFilters({ filters, onFiltersChange }: CompactFiltersProps) {
  const selectedOrderType = orderTypes.find(t => t.value === filters.orderType);
  const selectedCurrency = currencies.find(c => c.code === filters.currency);
  const selectedPayment = paymentMethods.find(p => p.id === filters.paymentMethod);
  return (
    <div className="relative flex items-center gap-2 p-3 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 overflow-visible">
      {/* Order Type Dropdown */}
      <Dropdown
        value={filters.orderType}
        options={orderTypes}
        onChange={(option: any) => onFiltersChange({ ...filters, orderType: option.value })}
        renderValue={() => (
          <span className={selectedOrderType?.color}>
            {selectedOrderType?.label}
          </span>
        )}
        renderOption={(option: any) => (
          <span className={`text-sm font-medium ${option.color}`}>
            {option.label}
          </span>
        )}
      />
      {/* Currency Dropdown */}
      <Dropdown
        value={filters.currency}
        options={currencies}
        onChange={(option: any) => onFiltersChange({ ...filters, currency: option.code })}
        renderValue={() => (
          <>
            <span>{selectedCurrency?.flag}</span>
            <span>{selectedCurrency?.code === 'all' ? 'Currency' : selectedCurrency?.name}</span>
          </>
        )}
        renderOption={(option: any) => (
          <>
            <span className="text-lg">{option.flag}</span>
            <span className="text-sm">{option.code === 'all' ? 'All Currencies' : option.name}</span>
          </>
        )}
      />
      {/* Payment Method Dropdown */}
      <Dropdown
        value={filters.paymentMethod}
        options={paymentMethods}
        onChange={(option: any) => onFiltersChange({ ...filters, paymentMethod: option.id })}
        renderValue={() => (
          <>
            <span>{selectedPayment?.icon}</span>
            <span>{selectedPayment?.id === 'all' ? 'Payment' : selectedPayment?.name}</span>
          </>
        )}
        renderOption={(option: any) => (
          <>
            <span className="text-lg">{option.icon}</span>
            <span className="text-sm">{option.id === 'all' ? 'All Methods' : option.name}</span>
          </>
        )}
      />
      {/* Clear filters button - only show if filters are active */}
      {(filters.currency !== 'all' || filters.paymentMethod !== 'all' || filters.orderType !== 'all') && (
        <button
          onClick={() => onFiltersChange({
            ...filters,
            currency: 'all',
            paymentMethod: 'all',
            orderType: 'all'
          })}
          className="ml-auto px-2 py-1 text-xs text-purple-600 dark:text-purple-400 hover:underline"
        >
          Clear
        </button>
      )}
    </div>
  );
}
</file>

<file path="src/features/trades/CreateOrderModal.tsx">
import { useState } from 'react';
import { X, Bitcoin } from 'lucide-react';
import { useNDK } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent } from '@nostr-dev-kit/ndk';
interface CreateOrderModalProps {
  onClose: () => void;
}
const currencies = [
  { code: 'USD', symbol: '$', name: 'US Dollar' },
  { code: 'EUR', symbol: '€', name: 'Euro' },
  { code: 'GBP', symbol: '£', name: 'British Pound' },
  { code: 'BRL', symbol: 'R$', name: 'Brazilian Real' },
  { code: 'ARS', symbol: '$', name: 'Argentine Peso' },
  { code: 'PLN', symbol: 'zł', name: 'Polish Złoty' },
];
const paymentMethods = [
  { id: 'Cash', name: 'Cash (F2F)', icon: '💵' },
  { id: 'Revolut', name: 'Revolut', icon: '💳' },
  { id: 'PIX', name: 'PIX (Brazil)', icon: '🔄' },
  { id: 'BLIK', name: 'BLIK (Poland)', icon: '📱' },
  { id: 'Zelle', name: 'Zelle', icon: '🏦' },
  { id: 'CashApp', name: 'Cash App', icon: '📲' },
];
export function CreateOrderModal({ onClose }: CreateOrderModalProps) {
  const { ndk } = useNDK();
  const [orderType, setOrderType] = useState<'buy' | 'sell'>('buy');
  const [currency, setCurrency] = useState('USD');
  const [satsAmount, setSatsAmount] = useState('100000');
  const [fiatAmount, setFiatAmount] = useState('50');
  const [paymentMethod, setPaymentMethod] = useState('Cash');
  const [premium, setPremium] = useState('0');
  const [expirationHours, setExpirationHours] = useState('24');
  const [creating, setCreating] = useState(false);
  const handleCreate = async () => {
    if (!ndk) return;
    setCreating(true);
    try {
      const event = new NDKEvent(ndk);
      event.kind = 38383;
      // Generate unique ID
      const orderId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      event.tags = [
        ['d', orderId],
        ['k', orderType],
        ['f', currency],
        ['s', 'pending'],
        ['amt', satsAmount],
        ['fa', fiatAmount],
        ['pm', paymentMethod],
        ['premium', premium],
        ['y', 'Voces'],
        ['z', 'order'],
        ['network', 'mainnet'],
        ['layer', 'lightning'],
        ['expiration', (Math.floor(Date.now() / 1000) + parseInt(expirationHours) * 3600).toString()]
      ];
      event.content = '';
      await event.publish();
      onClose();
    } catch (error) {
      console.error('Failed to create order:', error);
    } finally {
      setCreating(false);
    }
  };
  const btcAmount = parseInt(satsAmount) / 100000000;
  const pricePerBtc = parseFloat(fiatAmount) / btcAmount;
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
      <div className="bg-white dark:bg-gray-900 rounded-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 p-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
              Create P2P Order
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>
        <div className="p-6 space-y-6">
          {/* Order Type */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Order Type
            </label>
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => setOrderType('buy')}
                className={`px-4 py-3 rounded-lg border-2 transition-colors ${
                  orderType === 'buy'
                    ? 'border-green-500 bg-green-50 text-green-700 dark:bg-green-900/30 dark:text-green-400'
                    : 'border-gray-300 dark:border-gray-700'
                }`}
              >
                I want to buy Bitcoin
              </button>
              <button
                onClick={() => setOrderType('sell')}
                className={`px-4 py-3 rounded-lg border-2 transition-colors ${
                  orderType === 'sell'
                    ? 'border-red-500 bg-red-50 text-red-700 dark:bg-red-900/30 dark:text-red-400'
                    : 'border-gray-300 dark:border-gray-700'
                }`}
              >
                I want to sell Bitcoin
              </button>
            </div>
          </div>
          {/* Bitcoin Amount */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Bitcoin Amount (sats)
            </label>
            <div className="relative">
              <Bitcoin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-orange-500" />
              <input
                type="number"
                value={satsAmount}
                onChange={(e) => setSatsAmount(e.target.value)}
                className="w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                placeholder="100000"
              />
            </div>
            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
              = {btcAmount.toFixed(8)} BTC
            </p>
          </div>
          {/* Fiat Amount & Currency */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Fiat Amount
              </label>
              <input
                type="number"
                value={fiatAmount}
                onChange={(e) => setFiatAmount(e.target.value)}
                className="w-full px-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                placeholder="50"
              />
              <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                ≈ ${pricePerBtc.toFixed(2)}/BTC
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Currency
              </label>
              <select
                value={currency}
                onChange={(e) => setCurrency(e.target.value)}
                className="w-full px-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
              >
                {currencies.map((curr) => (
                  <option key={curr.code} value={curr.code}>
                    {curr.symbol} {curr.code}
                  </option>
                ))}
              </select>
            </div>
          </div>
          {/* Payment Method */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Payment Method
            </label>
            <div className="grid grid-cols-2 gap-3">
              {paymentMethods.map((method) => (
                <button
                  key={method.id}
                  onClick={() => setPaymentMethod(method.id)}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg border-2 transition-colors ${
                    paymentMethod === method.id
                      ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/30'
                      : 'border-gray-300 dark:border-gray-700'
                  }`}
                >
                  <span className="text-lg">{method.icon}</span>
                  <span className="text-sm">{method.name}</span>
                </button>
              ))}
            </div>
          </div>
          {/* Premium */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Premium (%)
            </label>
            <input
              type="number"
              value={premium}
              onChange={(e) => setPremium(e.target.value)}
              className="w-full px-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
              placeholder="0"
            />
            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
              Positive for above market, negative for below
            </p>
          </div>
          {/* Expiration */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Expiration (hours)
            </label>
            <select
              value={expirationHours}
              onChange={(e) => setExpirationHours(e.target.value)}
              className="w-full px-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
            >
              <option value="1">1 hour</option>
              <option value="6">6 hours</option>
              <option value="12">12 hours</option>
              <option value="24">24 hours</option>
              <option value="48">48 hours</option>
              <option value="72">72 hours</option>
            </select>
          </div>
          {/* Action Buttons */}
          <div className="flex gap-3">
            <button
              onClick={onClose}
              className="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleCreate}
              disabled={creating || !satsAmount || !fiatAmount}
              className="flex-1 px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {creating ? 'Creating...' : 'Create Order'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/features/trades/MobileFilters.tsx">
import { useState } from 'react';
import { Filter, X } from 'lucide-react';
interface MobileFiltersProps {
  selectedCurrency: string;
  selectedPaymentMethod: string;
  onCurrencyChange: (currency: string) => void;
  onPaymentMethodChange: (method: string) => void;
}
const currencies = [
  { code: 'all', flag: '🌍' },
  { code: 'USD', flag: '🇺🇸' },
  { code: 'EUR', flag: '🇪🇺' },
  { code: 'BRL', flag: '🇧🇷' },
  { code: 'ARS', flag: '🇦🇷' },
  { code: 'GBP', flag: '🇬🇧' },
  { code: 'PLN', flag: '🇵🇱' },
  { code: 'JPY', flag: '🇯🇵' },
];
const paymentMethods = [
  { id: 'all', name: 'All', icon: '💰' },
  { id: 'Cash', name: 'Cash', icon: '💵' },
  { id: 'PIX', name: 'PIX', icon: '🔄' },
  { id: 'BLIK', name: 'BLIK', icon: '📱' },
  { id: 'Revolut', name: 'Revolut', icon: '💳' },
  { id: 'Zelle', name: 'Zelle', icon: '🏦' },
];
export function MobileFilters({
  selectedCurrency,
  selectedPaymentMethod,
  onCurrencyChange,
  onPaymentMethodChange,
}: MobileFiltersProps) {
  const [showFilters, setShowFilters] = useState(false);
  const selectedCurrencyData = currencies.find(c => c.code === selectedCurrency);
  const selectedPaymentData = paymentMethods.find(p => p.id === selectedPaymentMethod);
  return (
    <>
      {/* Compact Filter Bar */}
      <div className="flex gap-2 p-3 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800">
        <button
          onClick={() => setShowFilters(true)}
          className="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg text-sm"
        >
          <Filter className="w-4 h-4" />
          <span className="font-medium">Filters</span>
          {(selectedCurrency !== 'all' || selectedPaymentMethod !== 'all') && (
            <span className="px-2 py-0.5 bg-purple-600 text-white rounded-full text-xs">
              {[selectedCurrency !== 'all' && selectedCurrency, selectedPaymentMethod !== 'all' && selectedPaymentMethod].filter(Boolean).length}
            </span>
          )}
        </button>
        {selectedCurrency !== 'all' && (
          <button
            onClick={() => onCurrencyChange('all')}
            className="flex items-center gap-1 px-3 py-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg text-sm"
          >
            <span>{selectedCurrencyData?.flag}</span>
            <span className="font-medium">{selectedCurrency}</span>
            <X className="w-3 h-3" />
          </button>
        )}
        {selectedPaymentMethod !== 'all' && (
          <button
            onClick={() => onPaymentMethodChange('all')}
            className="flex items-center gap-1 px-3 py-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg text-sm"
          >
            <span>{selectedPaymentData?.icon}</span>
            <span className="font-medium">{selectedPaymentMethod}</span>
            <X className="w-3 h-3" />
          </button>
        )}
      </div>
      {/* Full Screen Filter Modal */}
      {showFilters && (
        <div className="fixed inset-0 z-50 bg-white dark:bg-gray-900">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-800">
            <h2 className="text-lg font-semibold">Filters</h2>
            <button
              onClick={() => setShowFilters(false)}
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          {/* Filter Content */}
          <div className="p-4 space-y-6 overflow-y-auto max-h-[calc(100vh-140px)]">
            {/* Currency */}
            <div>
              <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Currency</h3>
              <div className="grid grid-cols-4 gap-2">
                {currencies.map((currency) => (
                  <button
                    key={currency.code}
                    onClick={() => onCurrencyChange(currency.code)}
                    className={`
                      flex flex-col items-center gap-1 p-3 rounded-lg transition-all
                      ${selectedCurrency === currency.code
                        ? 'bg-purple-600 text-white'
                        : 'bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700'
                      }
                    `}
                  >
                    <span className="text-2xl">{currency.flag}</span>
                    <span className="text-xs font-medium">{currency.code === 'all' ? 'All' : currency.code}</span>
                  </button>
                ))}
              </div>
            </div>
            {/* Payment Method */}
            <div>
              <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Payment Method</h3>
              <div className="space-y-2">
                {paymentMethods.map((method) => (
                  <button
                    key={method.id}
                    onClick={() => onPaymentMethodChange(method.id)}
                    className={`
                      w-full flex items-center gap-3 p-3 rounded-lg transition-all
                      ${selectedPaymentMethod === method.id
                        ? 'bg-purple-600 text-white'
                        : 'bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700'
                      }
                    `}
                  >
                    <span className="text-xl">{method.icon}</span>
                    <span className="font-medium">{method.name}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>
          {/* Footer */}
          <div className="absolute bottom-0 left-0 right-0 p-4 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800">
            <div className="flex gap-2">
              <button
                onClick={() => {
                  onCurrencyChange('all');
                  onPaymentMethodChange('all');
                }}
                className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800"
              >
                Clear All
              </button>
              <button
                onClick={() => setShowFilters(false)}
                className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
              >
                Apply Filters
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
</file>

<file path="src/features/trades/OrderBook.tsx">
import { useEffect, useState } from 'react';
import { useNDK } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent, type NDKFilter } from '@nostr-dev-kit/ndk';
import { OrderCard } from './OrderCard';
interface Order {
  id: string;
  pubkey: string;
  type: 'buy' | 'sell';
  currency: string;
  status: string;
  paymentMethod: string;
  satsAmount: number;
  fiatAmount: number;
  premium?: number;
  rating?: number;
  platform?: string;
  createdAt: number;
  event: NDKEvent;
}
interface OrderBookProps {
  filters: {
    currency: string;
    paymentMethod: string;
    orderType: 'all' | 'buy' | 'sell';
    minAmount: number;
    maxAmount: number;
  };
}
export function OrderBook({ filters }: OrderBookProps) {
  const { ndk } = useNDK();
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    if (!ndk) return;
    const fetchOrders = async () => {
      setLoading(true);
      const filter: NDKFilter = {
        kinds: [38383 as any],
        limit: 100,
      };
      const events = await ndk.fetchEvents(filter);
      const parsedOrders: Order[] = [];
      events.forEach((event: NDKEvent) => {
        const tags = event.tags;
        // Skip info events
        const zTag = tags.find((t: string[]) => t[0] === 'z');
        if (zTag && zTag[1] === 'info') return;
        // Extract order data from tags
        const orderType = tags.find((t: string[]) => t[0] === 'k')?.[1] as 'buy' | 'sell';
        const currency = tags.find((t: string[]) => t[0] === 'f')?.[1];
        const status = tags.find((t: string[]) => t[0] === 's')?.[1];
        const paymentMethod = tags.find((t: string[]) => t[0] === 'pm')?.[1];
        const satsAmount = parseInt(tags.find((t: string[]) => t[0] === 'amt')?.[1] || '0');
        const fiatAmount = parseFloat(tags.find((t: string[]) => t[0] === 'fa')?.[1] || '0');
        const premium = parseFloat(tags.find((t: string[]) => t[0] === 'premium')?.[1] || '0');
        const rating = parseFloat(tags.find((t: string[]) => t[0] === 'rating')?.[1] || '0');
        const platform = tags.find((t: string[]) => t[0] === 'y')?.[1];
        const dTag = tags.find((t: string[]) => t[0] === 'd')?.[1];
        // Only include active orders
        if (status === 'pending' && orderType && currency && dTag) {
          parsedOrders.push({
            id: dTag,
            pubkey: event.pubkey,
            type: orderType,
            currency,
            status,
            paymentMethod: paymentMethod || 'Unknown',
            satsAmount,
            fiatAmount,
            premium,
            rating,
            platform,
            createdAt: event.created_at || Date.now() / 1000,
            event
          });
        }
      });
      // Sort by created date, newest first
      parsedOrders.sort((a, b) => b.createdAt - a.createdAt);
      setOrders(parsedOrders);
      setLoading(false);
    };
    fetchOrders();
    // Subscribe to new orders
    const sub = ndk.subscribe(
      { kinds: [38383 as any], since: Math.floor(Date.now() / 1000) },
      { closeOnEose: false }
    );
    sub.on('event', (event: NDKEvent) => {
      const tags = event.tags;
      const zTag = tags.find((t: string[]) => t[0] === 'z');
      if (zTag && zTag[1] === 'info') return;
      const orderType = tags.find((t: string[]) => t[0] === 'k')?.[1] as 'buy' | 'sell';
      const currency = tags.find((t: string[]) => t[0] === 'f')?.[1];
      const status = tags.find((t: string[]) => t[0] === 's')?.[1];
      const dTag = tags.find((t: string[]) => t[0] === 'd')?.[1];
      if (status === 'pending' && orderType && currency && dTag) {
        const newOrder: Order = {
          id: dTag,
          pubkey: event.pubkey,
          type: orderType,
          currency,
          status,
          paymentMethod: tags.find((t: string[]) => t[0] === 'pm')?.[1] || 'Unknown',
          satsAmount: parseInt(tags.find((t: string[]) => t[0] === 'amt')?.[1] || '0'),
          fiatAmount: parseFloat(tags.find((t: string[]) => t[0] === 'fa')?.[1] || '0'),
          premium: parseFloat(tags.find((t: string[]) => t[0] === 'premium')?.[1] || '0'),
          rating: parseFloat(tags.find((t: string[]) => t[0] === 'rating')?.[1] || '0'),
          platform: tags.find((t: string[]) => t[0] === 'y')?.[1],
          createdAt: event.created_at || Date.now() / 1000,
          event
        };
        setOrders(prev => [newOrder, ...prev.filter(o => o.id !== dTag)]);
      }
    });
    return () => {
      sub.stop();
    };
  }, [ndk]);
  // Filter orders based on user preferences
  const filteredOrders = orders.filter(order => {
    if (filters.currency !== 'all' && order.currency !== filters.currency) return false;
    if (filters.paymentMethod !== 'all' && order.paymentMethod !== filters.paymentMethod) return false;
    if (filters.orderType !== 'all' && order.type !== filters.orderType) return false;
    if (order.satsAmount < filters.minAmount || order.satsAmount > filters.maxAmount) return false;
    return true;
  });
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
      </div>
    );
  }
  return (
    <div className="w-full">
      <div className="grid gap-3 md:gap-4">
        {filteredOrders.length === 0 ? (
          <div className="text-center py-12 text-gray-500">
            No orders available matching your filters
          </div>
        ) : (
          filteredOrders.map(order => (
            <OrderCard key={order.id} order={order} />
          ))
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/features/trades/OrderCard.tsx">
import { useState } from 'react';
import { Bitcoin, Star, MessageSquare, ArrowRight, Shield } from 'lucide-react';
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { formatDistanceToNow } from 'date-fns';
import { NDKEvent } from '@nostr-dev-kit/ndk';
import { TakeOrderModal } from './TakeOrderModal';
interface OrderCardProps {
  order: {
    id: string;
    pubkey: string;
    type: 'buy' | 'sell';
    currency: string;
    status: string;
    paymentMethod: string;
    satsAmount: number;
    fiatAmount: number;
    premium?: number;
    rating?: number;
    platform?: string;
    createdAt: number;
    event: NDKEvent;
  };
}
const currencyData: { [key: string]: { symbol: string; flag: string } } = {
  USD: { symbol: '$', flag: '🇺🇸' },
  EUR: { symbol: '€', flag: '🇪🇺' },
  GBP: { symbol: '£', flag: '🇬🇧' },
  BRL: { symbol: 'R$', flag: '🇧🇷' },
  ARS: { symbol: '$', flag: '🇦🇷' },
  PLN: { symbol: 'zł', flag: '🇵🇱' },
  JPY: { symbol: '¥', flag: '🇯🇵' },
  CHF: { symbol: 'Fr', flag: '🇨🇭' },
  PEN: { symbol: 'S/', flag: '🇵🇪' },
  UYU: { symbol: '$', flag: '🇺🇾' },
  VES: { symbol: 'Bs', flag: '🇻🇪' },
  RUB: { symbol: '₽', flag: '🇷🇺' },
  SEK: { symbol: 'kr', flag: '🇸🇪' },
  NOK: { symbol: 'kr', flag: '🇳🇴' },
  AUD: { symbol: '$', flag: '🇦🇺' },
  CUP: { symbol: '$', flag: '🇨🇺' },
};
const paymentMethodData: { [key: string]: { icon: string; region: string } } = {
  'Cash': { icon: '💵', region: 'Universal' },
  'PIX': { icon: '🔄', region: 'Brazil' },
  'BLIK': { icon: '📱', region: 'Poland' },
  'Revolut': { icon: '💳', region: 'Europe' },
  'Zelle': { icon: '🏦', region: 'USA' },
  'CashApp': { icon: '📲', region: 'USA' },
  'CVU': { icon: '🏧', region: 'Argentina' },
  'MP': { icon: '📲', region: 'Argentina' },
  'f2f': { icon: '🤝', region: 'Local' },
  'СБП': { icon: '🏦', region: 'Russia' },
};
export function OrderCard({ order }: OrderCardProps) {
  const profile = useProfile(order.pubkey);
  const [showTakeModal, setShowTakeModal] = useState(false);
  const currencyInfo = currencyData[order.currency] || { symbol: order.currency, flag: '🌍' };
  const paymentInfo = paymentMethodData[order.paymentMethod] || { icon: '💰', region: '' };
  // Calculate price per BTC
  const pricePerBtc = order.fiatAmount > 0 && order.satsAmount > 0
    ? (order.fiatAmount / order.satsAmount) * 100000000
    : 0;
  return (
    <>
      <div className="bg-white dark:bg-gray-900 rounded-lg md:rounded-xl border border-gray-200 dark:border-gray-800 p-3 md:p-4 hover:shadow-lg transition-shadow">
        <div className="flex items-start justify-between mb-2 md:mb-3">
          <div className="flex items-center gap-3">
            {profile?.picture ? (
              <img
                src={profile.picture}
                alt={profile.name || 'User'}
                className="w-10 h-10 md:w-12 md:h-12 rounded-full object-cover"
              />
            ) : (
              <div className="w-10 h-10 md:w-12 md:h-12 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full" />
            )}
            <div>
              <div className="flex items-center gap-2">
                <h3 className="font-semibold text-sm md:text-base text-gray-900 dark:text-white">
                  {profile?.name || `@${order.pubkey.slice(0, 6)}...`}
                </h3>
                {order.rating && order.rating > 0 && (
                  <div className="flex items-center gap-1 text-yellow-500">
                    <Star className="w-4 h-4 fill-current" />
                    <span className="text-sm">{order.rating.toFixed(1)}</span>
                  </div>
                )}
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400">
                {formatDistanceToNow(order.createdAt * 1000, { addSuffix: true })}
                {order.platform && ` • ${order.platform}`}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-1 md:gap-2">
            <span className="text-lg md:text-2xl">{currencyInfo.flag}</span>
            <div className={`px-2 md:px-3 py-0.5 md:py-1 rounded-full text-xs md:text-sm font-medium ${
              order.type === 'buy'
                ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'
                : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'
            }`}>
              {order.type === 'buy' ? 'Buying' : 'Selling'}
            </div>
          </div>
        </div>
        <div className="grid grid-cols-3 gap-2 md:gap-4 mb-3 md:mb-4">
          <div>
            <p className="text-xs text-gray-500 dark:text-gray-400 mb-0.5 md:mb-1">Amount</p>
            <div className="flex items-center gap-1 md:gap-2">
              <Bitcoin className="w-3 h-3 md:w-4 md:h-4 text-orange-500" />
              <span className="font-mono font-semibold text-xs md:text-base text-gray-900 dark:text-white">
                {(order.satsAmount / 100000000).toFixed(4)}
              </span>
            </div>
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-0.5 md:mt-1 hidden md:block">
              {order.satsAmount.toLocaleString()} sats
            </p>
          </div>
          <div>
            <p className="text-xs text-gray-500 dark:text-gray-400 mb-0.5 md:mb-1">Price</p>
            <div className="flex items-center gap-1">
              <span className="text-sm md:text-base hidden md:inline">{currencyInfo.flag}</span>
              <p className="text-sm md:text-lg font-semibold text-gray-900 dark:text-white">
                {currencyInfo.symbol}{order.fiatAmount.toFixed(0)}
              </p>
            </div>
            {pricePerBtc > 0 && (
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                {currencyInfo.symbol}{pricePerBtc.toFixed(2)}/BTC
                {order.premium && order.premium !== 0 && (
                  <span className={order.premium > 0 ? 'text-red-500' : 'text-green-500'}>
                    {' '}({order.premium > 0 ? '+' : ''}{order.premium}%)
                  </span>
                )}
              </p>
            )}
          </div>
          <div className="min-w-0">
            <p className="text-xs text-gray-500 dark:text-gray-400 mb-0.5 md:mb-1">Payment</p>
            <div className="flex items-center gap-1 md:gap-2">
              <span className="text-sm md:text-lg flex-shrink-0">{paymentInfo.icon}</span>
              <div className="flex flex-col min-w-0">
                <span className="font-medium text-xs md:text-base text-gray-900 dark:text-white truncate max-w-[80px] md:max-w-none">
                  {order.paymentMethod}
                </span>
                {paymentInfo.region && (
                  <span className="text-xs text-gray-500 dark:text-gray-400 hidden md:inline">
                    {paymentInfo.region}
                  </span>
                )}
              </div>
            </div>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setShowTakeModal(true)}
            className="flex-1 flex items-center justify-center gap-1 md:gap-2 px-3 md:px-4 py-1.5 md:py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm md:text-base"
          >
            <ArrowRight className="w-3 h-3 md:w-4 md:h-4" />
            <span className="hidden md:inline">{order.type === 'buy' ? 'Sell to User' : 'Buy from User'}</span>
            <span className="md:hidden">{order.type === 'buy' ? 'Sell' : 'Buy'}</span>
          </button>
          <button className="p-1.5 md:p-2 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors">
            <MessageSquare className="w-3 h-3 md:w-4 md:h-4" />
          </button>
          <button className="p-1.5 md:p-2 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors hidden md:block">
            <Shield className="w-3 h-3 md:w-4 md:h-4" />
          </button>
        </div>
      </div>
      {showTakeModal && (
        <TakeOrderModal order={order} onClose={() => setShowTakeModal(false)} />
      )}
    </>
  );
}
</file>

<file path="src/features/trades/QuickFilters.tsx">
import { Globe, CreditCard } from 'lucide-react';
interface QuickFiltersProps {
  selectedCurrency: string;
  selectedPaymentMethod: string;
  onCurrencyChange: (currency: string) => void;
  onPaymentMethodChange: (method: string) => void;
}
const popularCurrencies = [
  { code: 'all', name: 'All', flag: '🌍' },
  { code: 'USD', name: 'USD', flag: '🇺🇸' },
  { code: 'EUR', name: 'EUR', flag: '🇪🇺' },
  { code: 'BRL', name: 'BRL', flag: '🇧🇷' },
  { code: 'ARS', name: 'ARS', flag: '🇦🇷' },
  { code: 'GBP', name: 'GBP', flag: '🇬🇧' },
  { code: 'PLN', name: 'PLN', flag: '🇵🇱' },
  { code: 'JPY', name: 'JPY', flag: '🇯🇵' },
];
const popularPaymentMethods = [
  { id: 'all', name: 'All Methods', icon: '💰', countries: [] },
  { id: 'Cash', name: 'Cash', icon: '💵', countries: ['Universal'] },
  { id: 'PIX', name: 'PIX', icon: '🔄', countries: ['Brazil'] },
  { id: 'BLIK', name: 'BLIK', icon: '📱', countries: ['Poland'] },
  { id: 'Revolut', name: 'Revolut', icon: '💳', countries: ['Europe'] },
  { id: 'Zelle', name: 'Zelle', icon: '🏦', countries: ['USA'] },
  { id: 'CashApp', name: 'CashApp', icon: '📲', countries: ['USA'] },
  { id: 'CVU', name: 'CVU/MP', icon: '🏧', countries: ['Argentina'] },
  { id: 'f2f', name: 'Face to Face', icon: '🤝', countries: ['Local'] },
];
export function QuickFilters({
  selectedCurrency,
  selectedPaymentMethod,
  onCurrencyChange,
  onPaymentMethodChange,
}: QuickFiltersProps) {
  return (
    <div className="space-y-4">
      {/* Currency Filter */}
      <div>
        <div className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <Globe className="w-4 h-4" />
          <span>Currency</span>
        </div>
        <div className="flex flex-wrap gap-2">
          {popularCurrencies.map((currency) => (
            <button
              key={currency.code}
              onClick={() => onCurrencyChange(currency.code)}
              className={`
                flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium transition-all
                ${selectedCurrency === currency.code
                  ? 'bg-purple-600 text-white shadow-md scale-105'
                  : 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 hover:border-purple-400 dark:hover:border-purple-600 hover:shadow-sm'
                }
              `}
            >
              <span className="text-base">{currency.flag}</span>
              <span>{currency.name}</span>
            </button>
          ))}
        </div>
      </div>
      {/* Payment Method Filter */}
      <div>
        <div className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <CreditCard className="w-4 h-4" />
          <span>Payment Method</span>
        </div>
        <div className="flex flex-wrap gap-2">
          {popularPaymentMethods.map((method) => (
            <button
              key={method.id}
              onClick={() => onPaymentMethodChange(method.id)}
              className={`
                group flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium transition-all
                ${selectedPaymentMethod === method.id
                  ? 'bg-purple-600 text-white shadow-md scale-105'
                  : 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 hover:border-purple-400 dark:hover:border-purple-600 hover:shadow-sm'
                }
              `}
            >
              <span className="text-base">{method.icon}</span>
              <span>{method.name}</span>
              {method.countries.length > 0 && method.id !== 'all' && (
                <span className={`
                  text-xs px-1.5 py-0.5 rounded-full ml-1
                  ${selectedPaymentMethod === method.id
                    ? 'bg-purple-700/50'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400'
                  }
                `}>
                  {method.countries[0]}
                </span>
              )}
            </button>
          ))}
        </div>
      </div>
      {/* Active Filters Summary */}
      {(selectedCurrency !== 'all' || selectedPaymentMethod !== 'all') && (
        <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
          <span>Active filters:</span>
          {selectedCurrency !== 'all' && (
            <span className="px-2 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-400 rounded-full text-xs font-medium">
              {popularCurrencies.find(c => c.code === selectedCurrency)?.flag} {selectedCurrency}
            </span>
          )}
          {selectedPaymentMethod !== 'all' && (
            <span className="px-2 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-400 rounded-full text-xs font-medium">
              {popularPaymentMethods.find(m => m.id === selectedPaymentMethod)?.icon} {selectedPaymentMethod}
            </span>
          )}
          <button
            onClick={() => {
              onCurrencyChange('all');
              onPaymentMethodChange('all');
            }}
            className="text-purple-600 hover:text-purple-700 dark:text-purple-400 dark:hover:text-purple-300 underline text-xs"
          >
            Clear all
          </button>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/features/trades/TakeOrderModal.tsx">
import { useState } from 'react';
import { X, AlertTriangle, Bitcoin, Shield } from 'lucide-react';
import { useNDK } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent } from '@nostr-dev-kit/ndk';
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
interface TakeOrderModalProps {
  order: {
    id: string;
    pubkey: string;
    type: 'buy' | 'sell';
    currency: string;
    status: string;
    paymentMethod: string;
    satsAmount: number;
    fiatAmount: number;
    premium?: number;
    rating?: number;
    platform?: string;
    createdAt: number;
    event: NDKEvent;
  };
  onClose: () => void;
}
export function TakeOrderModal({ order, onClose }: TakeOrderModalProps) {
  const { ndk } = useNDK();
  const profile = useProfile(order.pubkey);
  const [step, setStep] = useState<'confirm' | 'processing' | 'complete'>('confirm');
  const [accepted, setAccepted] = useState(false);
  const handleTakeOrder = async () => {
    if (!ndk) return;
    setStep('processing');
    try {
      // Create a take order event
      const event = new NDKEvent(ndk);
      event.kind = 38383;
      // Create response event with reference to original order
      event.tags = [
        ['d', `take-${order.id}-${Date.now()}`],
        ['e', order.event.id],
        ['p', order.pubkey],
        ['k', order.type === 'buy' ? 'sell' : 'buy'],
        ['f', order.currency],
        ['s', 'in-progress'],
        ['amt', order.satsAmount.toString()],
        ['fa', order.fiatAmount.toString()],
        ['pm', order.paymentMethod],
        ['y', 'Voces'],
        ['z', 'take-order']
      ];
      event.content = `Taking order ${order.id}`;
      await event.publish();
      // Update original order status (in real implementation, this would be handled by the maker)
      const statusUpdate = new NDKEvent(ndk);
      statusUpdate.kind = 38383;
      statusUpdate.tags = [
        ...order.event.tags.filter(t => t[0] !== 's'),
        ['s', 'in-progress']
      ];
      statusUpdate.content = '';
      await statusUpdate.publish();
      setStep('complete');
      // Close modal after a delay
      setTimeout(() => {
        onClose();
      }, 2000);
    } catch (error) {
      console.error('Failed to take order:', error);
      setStep('confirm');
    }
  };
  const currencySymbol = { USD: '$', EUR: '€', GBP: '£', BRL: 'R$' }[order.currency] || order.currency;
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
      <div className="bg-white dark:bg-gray-900 rounded-2xl max-w-md w-full">
        {step === 'confirm' && (
          <>
            <div className="p-6 border-b border-gray-200 dark:border-gray-800">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-900 dark:text-white">
                  Confirm Trade
                </h2>
                <button
                  onClick={onClose}
                  className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>
            <div className="p-6 space-y-4">
              {/* Trade Summary */}
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500 dark:text-gray-400">You will {order.type === 'buy' ? 'sell' : 'buy'}</span>
                  <div className="flex items-center gap-1">
                    <Bitcoin className="w-4 h-4 text-orange-500" />
                    <span className="font-mono font-semibold">{(order.satsAmount / 100000000).toFixed(8)} BTC</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500 dark:text-gray-400">For</span>
                  <span className="font-semibold">{currencySymbol}{order.fiatAmount.toFixed(2)}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500 dark:text-gray-400">Via</span>
                  <span className="font-medium">{order.paymentMethod}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500 dark:text-gray-400">Trading with</span>
                  <div className="flex items-center gap-2">
                    <span className="font-medium">{profile?.name || 'Anonymous'}</span>
                    {order.rating && (
                      <span className="text-yellow-500 text-sm">★ {order.rating.toFixed(1)}</span>
                    )}
                  </div>
                </div>
              </div>
              {/* Warning */}
              <div className="flex items-start gap-3 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                <AlertTriangle className="w-5 h-5 text-yellow-600 dark:text-yellow-500 flex-shrink-0 mt-0.5" />
                <div className="text-sm text-yellow-800 dark:text-yellow-300">
                  <p className="font-medium mb-1">Trade Safely</p>
                  <ul className="space-y-1 text-xs">
                    <li>• Never release funds before confirming payment</li>
                    <li>• Use escrow when available</li>
                    <li>• Communicate only through secure channels</li>
                    <li>• Report suspicious behavior immediately</li>
                  </ul>
                </div>
              </div>
              {/* Terms Acceptance */}
              <label className="flex items-start gap-3 cursor-pointer">
                <input
                  type="checkbox"
                  checked={accepted}
                  onChange={(e) => setAccepted(e.target.checked)}
                  className="mt-1 w-4 h-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
                />
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  I understand the risks and agree to proceed with this P2P trade
                </span>
              </label>
              {/* Actions */}
              <div className="flex gap-3">
                <button
                  onClick={onClose}
                  className="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleTakeOrder}
                  disabled={!accepted}
                  className="flex-1 px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  Take Order
                </button>
              </div>
            </div>
          </>
        )}
        {step === 'processing' && (
          <div className="p-12 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
            <p className="text-gray-900 dark:text-white font-medium">Processing Trade...</p>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
              Connecting with trader
            </p>
          </div>
        )}
        {step === 'complete' && (
          <div className="p-12 text-center">
            <div className="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mx-auto mb-4">
              <Shield className="w-6 h-6 text-green-600 dark:text-green-400" />
            </div>
            <p className="text-gray-900 dark:text-white font-medium">Trade Initiated!</p>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
              Check your messages for next steps
            </p>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/features/trades/TradeFilters.tsx">
import { DollarSign, CreditCard, TrendingUp } from 'lucide-react';
interface TradeFiltersProps {
  filters: {
    currency: string;
    paymentMethod: string;
    orderType: 'all' | 'buy' | 'sell';
    minAmount: number;
    maxAmount: number;
  };
  onChange: (filters: any) => void;
}
const currencies = [
  { code: 'all', name: 'All Currencies' },
  { code: 'USD', name: 'US Dollar' },
  { code: 'EUR', name: 'Euro' },
  { code: 'GBP', name: 'British Pound' },
  { code: 'BRL', name: 'Brazilian Real' },
  { code: 'ARS', name: 'Argentine Peso' },
  { code: 'PLN', name: 'Polish Złoty' },
];
const paymentMethods = [
  { id: 'all', name: 'All Methods' },
  { id: 'Cash', name: 'Cash' },
  { id: 'Revolut', name: 'Revolut' },
  { id: 'PIX', name: 'PIX' },
  { id: 'BLIK', name: 'BLIK' },
  { id: 'Zelle', name: 'Zelle' },
  { id: 'CashApp', name: 'Cash App' },
];
export function TradeFilters({ filters, onChange }: TradeFiltersProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
      {/* Currency Filter */}
      <div>
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <DollarSign className="w-4 h-4" />
          Currency
        </label>
        <select
          value={filters.currency}
          onChange={(e) => onChange({ ...filters, currency: e.target.value })}
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
        >
          {currencies.map((curr) => (
            <option key={curr.code} value={curr.code}>
              {curr.name}
            </option>
          ))}
        </select>
      </div>
      {/* Payment Method Filter */}
      <div>
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <CreditCard className="w-4 h-4" />
          Payment Method
        </label>
        <select
          value={filters.paymentMethod}
          onChange={(e) => onChange({ ...filters, paymentMethod: e.target.value })}
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
        >
          {paymentMethods.map((method) => (
            <option key={method.id} value={method.id}>
              {method.name}
            </option>
          ))}
        </select>
      </div>
      {/* Order Type Filter */}
      <div>
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <TrendingUp className="w-4 h-4" />
          Order Type
        </label>
        <select
          value={filters.orderType}
          onChange={(e) => onChange({ ...filters, orderType: e.target.value as 'all' | 'buy' | 'sell' })}
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
        >
          <option value="all">All Orders</option>
          <option value="buy">Buy Orders</option>
          <option value="sell">Sell Orders</option>
        </select>
      </div>
      {/* Amount Range */}
      <div>
        <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block">
          Amount Range (sats)
        </label>
        <div className="flex items-center gap-2">
          <input
            type="number"
            value={filters.minAmount}
            onChange={(e) => onChange({ ...filters, minAmount: parseInt(e.target.value) || 0 })}
            className="w-full px-2 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white text-sm"
            placeholder="Min"
          />
          <span className="text-gray-500">-</span>
          <input
            type="number"
            value={filters.maxAmount}
            onChange={(e) => onChange({ ...filters, maxAmount: parseInt(e.target.value) || 1000000 })}
            className="w-full px-2 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white text-sm"
            placeholder="Max"
          />
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/i18n/locales/en.json">
{
  "navigation": {
    "feed": "Home",
    "compose": "Compose",
    "notifications": "Notifications",
    "classifieds": "Classifieds",
    "marketplace": "Marketplace",
    "trades": "P2P Trades",
    "followPacks": "Follow Packs",
    "profile": "Profile",
    "wallet": "Wallet",
    "settings": "Settings"
  },
  "auth": {
    "login": "Login with Nostr",
    "logout": "Logout",
    "loginSuccess": "Successfully logged in",
    "loginError": "Failed to login",
    "connecting": "Connecting..."
  },
  "feed": {
    "title": "Feed",
    "compose": {
      "placeholder": "What's on your mind?",
      "publish": "Publish",
      "publishing": "Publishing...",
      "publishSuccess": "Note published!",
      "publishError": "Failed to publish note"
    },
    "loading": "Loading notes...",
    "empty": "No notes to display",
    "error": "Error loading feed"
  },
  "classifieds": {
    "title": "Classifieds",
    "description": "Buy, sell, and trade with the Nostr community",
    "noListings": "No listings yet. Be the first to create one!",
    "createListing": "Create Listing",
    "filters": {
      "all": "All",
      "selling": "Selling",
      "buying": "Buying",
      "services": "Services"
    }
  },
  "trades": {
    "title": "Trades",
    "description": "Secure P2P trading with escrow protection",
    "noTrades": "No trades yet. Browse classifieds to start trading!",
    "browseClassifieds": "Browse Classifieds",
    "statuses": {
      "pending": "Pending",
      "active": "Active",
      "completed": "Completed",
      "disputed": "Disputed"
    }
  },
  "followPacks": {
    "title": "Follow Packs",
    "description": "Discover curated lists of people to follow",
    "noPacks": "No follow packs available yet",
    "followers": "followers"
  },
  "settings": {
    "title": "Settings",
    "description": "Manage your app preferences and configuration",
    "sections": {
      "relays": {
        "title": "Relays",
        "description": "Configure Nostr relay connections",
        "addRelay": "Add Relay",
        "relayUrl": "Relay URL",
        "urlPlaceholder": "wss://relay.example.com",
        "permissions": "Permissions",
        "read": "Read",
        "write": "Write",
        "enabled": "Enabled",
        "remove": "Remove",
        "confirmRemove": "Are you sure you want to remove this relay?",
        "invalidUrl": "Invalid relay URL",
        "relayExists": "This relay already exists",
        "connected": "Connected",
        "disconnected": "Disconnected",
        "connecting": "Connecting..."
      },
      "appearance": {
        "title": "Appearance",
        "description": "Customize app theme and display",
        "language": "Language",
        "languageDescription": "Choose your preferred language",
        "theme": "Theme",
        "themeDescription": "Choose your preferred theme",
        "themes": {
          "light": "Light",
          "dark": "Dark",
          "system": "System"
        }
      },
      "notifications": {
        "title": "Notifications",
        "description": "Control notification preferences"
      },
      "privacy": {
        "title": "Privacy",
        "description": "Manage privacy and security settings"
      },
      "profile": {
        "title": "Profile",
        "description": "Edit your profile information"
      },
      "blossom": {
        "title": "Media Servers",
        "description": "Configure Blossom media upload servers"
      },
      "followpacks": {
        "title": "Follow Packs",
        "description": "Discover and manage follow packs"
      }
    },
    "comingSoon": "Coming soon..."
  },
  "wallet": {
    "title": "Wallet",
    "balance": "Balance",
    "send": "Send",
    "receive": "Receive",
    "transactions": "Transactions",
    "noTransactions": "No transactions yet",
    "satsAvailable": "sats available"
  },
  "profile": {
    "following": "Following",
    "followers": "Followers",
    "posts": "Posts",
    "editProfile": "Edit Profile",
    "follow": "Follow",
    "unfollow": "Unfollow"
  },
  "common": {
    "loading": "Loading...",
    "error": "An error occurred",
    "retry": "Retry",
    "cancel": "Cancel",
    "save": "Save",
    "delete": "Delete",
    "edit": "Edit",
    "close": "Close",
    "confirm": "Confirm",
    "search": "Search",
    "more": "More",
    "less": "Less",
    "copy": "Copy",
    "copied": "Copied!",
    "share": "Share",
    "soon": "Soon"
  }
}
</file>

<file path="src/i18n/locales/es.json">
{
  "navigation": {
    "feed": "Inicio",
    "compose": "Redactar",
    "notifications": "Notificaciones",
    "classifieds": "Clasificados",
    "marketplace": "Mercado",
    "trades": "Intercambios P2P",
    "followPacks": "Paquetes de Seguimiento",
    "profile": "Perfil",
    "wallet": "Billetera",
    "settings": "Configuración"
  },
  "auth": {
    "login": "Iniciar sesión con Nostr",
    "logout": "Cerrar sesión",
    "loginSuccess": "Sesión iniciada correctamente",
    "loginError": "Error al iniciar sesión",
    "connecting": "Conectando..."
  },
  "feed": {
    "title": "Inicio",
    "compose": {
      "placeholder": "¿Qué estás pensando?",
      "publish": "Publicar",
      "publishing": "Publicando...",
      "publishSuccess": "¡Nota publicada!",
      "publishError": "Error al publicar la nota"
    },
    "loading": "Cargando notas...",
    "empty": "No hay notas para mostrar",
    "error": "Error al cargar el feed"
  },
  "classifieds": {
    "title": "Clasificados",
    "description": "Compra, vende e intercambia con la comunidad Nostr",
    "noListings": "No hay anuncios todavía. ¡Sé el primero en crear uno!",
    "createListing": "Crear Anuncio",
    "filters": {
      "all": "Todos",
      "selling": "Venta",
      "buying": "Compra",
      "services": "Servicios"
    }
  },
  "trades": {
    "title": "Intercambios",
    "description": "Intercambios P2P seguros con protección de depósito",
    "noTrades": "No hay intercambios todavía. ¡Explora los clasificados para empezar!",
    "browseClassifieds": "Explorar Clasificados",
    "statuses": {
      "pending": "Pendiente",
      "active": "Activo",
      "completed": "Completado",
      "disputed": "En disputa"
    }
  },
  "followPacks": {
    "title": "Paquetes de Seguimiento",
    "description": "Descubre listas curadas de personas para seguir",
    "noPacks": "No hay paquetes de seguimiento disponibles aún",
    "followers": "seguidores"
  },
  "settings": {
    "title": "Configuración",
    "description": "Gestiona las preferencias y configuración de la aplicación",
    "sections": {
      "relays": {
        "title": "Relés",
        "description": "Configurar conexiones de relé Nostr",
        "addRelay": "Agregar Relé",
        "relayUrl": "URL del Relé",
        "urlPlaceholder": "wss://relay.ejemplo.com",
        "permissions": "Permisos",
        "read": "Lectura",
        "write": "Escritura",
        "enabled": "Habilitado",
        "remove": "Eliminar",
        "confirmRemove": "¿Estás seguro de que quieres eliminar este relé?",
        "invalidUrl": "URL de relé inválida",
        "relayExists": "Este relé ya existe",
        "connected": "Conectado",
        "disconnected": "Desconectado",
        "connecting": "Conectando..."
      },
      "appearance": {
        "title": "Apariencia",
        "description": "Personaliza el tema y la visualización de la aplicación",
        "language": "Idioma",
        "languageDescription": "Elige tu idioma preferido",
        "theme": "Tema",
        "themeDescription": "Elige tu tema preferido",
        "themes": {
          "light": "Claro",
          "dark": "Oscuro",
          "system": "Sistema"
        }
      },
      "notifications": {
        "title": "Notificaciones",
        "description": "Controla las preferencias de notificación"
      },
      "privacy": {
        "title": "Privacidad",
        "description": "Gestiona la configuración de privacidad y seguridad"
      },
      "profile": {
        "title": "Perfil",
        "description": "Edita tu información de perfil"
      },
      "blossom": {
        "title": "Servidores de Medios",
        "description": "Configura los servidores de carga de medios Blossom"
      },
      "followpacks": {
        "title": "Paquetes de Seguimiento",
        "description": "Descubre y gestiona paquetes de seguimiento"
      }
    },
    "comingSoon": "Próximamente..."
  },
  "wallet": {
    "title": "Billetera",
    "balance": "Saldo",
    "send": "Enviar",
    "receive": "Recibir",
    "transactions": "Transacciones",
    "noTransactions": "No hay transacciones todavía",
    "satsAvailable": "sats disponibles"
  },
  "profile": {
    "following": "Siguiendo",
    "followers": "Seguidores",
    "posts": "Publicaciones",
    "editProfile": "Editar Perfil",
    "follow": "Seguir",
    "unfollow": "Dejar de seguir"
  },
  "common": {
    "loading": "Cargando...",
    "error": "Ocurrió un error",
    "retry": "Reintentar",
    "cancel": "Cancelar",
    "save": "Guardar",
    "delete": "Eliminar",
    "edit": "Editar",
    "close": "Cerrar",
    "confirm": "Confirmar",
    "search": "Buscar",
    "more": "Más",
    "less": "Menos",
    "copy": "Copiar",
    "copied": "¡Copiado!",
    "share": "Compartir",
    "soon": "Pronto"
  }
}
</file>

<file path="src/i18n/config.ts">
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
import en from './locales/en.json';
import es from './locales/es.json';
const resources = {
  en: {
    translation: en
  },
  es: {
    translation: es
  }
};
i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en',
    debug: false,
    interpolation: {
      escapeValue: false
    },
    detection: {
      order: ['localStorage', 'navigator'],
      caches: ['localStorage'],
      lookupLocalStorage: 'voces-language'
    }
  });
export default i18n;
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/marketplace/CreateListingPage.tsx">
import { useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ListingForm } from '@/features/classifieds/components/ListingForm';
import { useCreateListing } from '@/features/classifieds/hooks/useCreateListing';
import type { ListingFormData } from '@/features/classifieds/types';
import { useState } from 'react';
export function CreateListingPage() {
  const navigate = useNavigate();
  const { createListing, isAuthenticated } = useCreateListing();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const handleSubmit = async (data: ListingFormData) => {
    if (!isAuthenticated) {
      alert('Please log in to create a listing');
      return;
    }
    try {
      setIsSubmitting(true);
      await createListing(data);
      navigate('/marketplace');
    } catch (error) {
      console.error('Failed to create listing:', error);
      alert('Failed to create listing. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };
  if (!isAuthenticated) {
    return (
      <div className="container mx-auto px-4 py-12">
        <div className="max-w-2xl mx-auto text-center">
          <h2 className="text-2xl font-bold mb-4">Sign In Required</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            You need to be logged in to create a listing.
          </p>
          <Button onClick={() => navigate('/')}>
            Go to Home
          </Button>
        </div>
      </div>
    );
  }
  return (
    <div className="container mx-auto px-4 py-6">
      <div className="max-w-4xl mx-auto">
        <div className="mb-6">
          <Button
            variant="ghost"
            onClick={() => navigate('/marketplace')}
            className="mb-4"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Marketplace
          </Button>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            Create New Listing
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            Fill in the details below to create your classified listing
          </p>
        </div>
        <ListingForm onSubmit={handleSubmit} isSubmitting={isSubmitting} />
      </div>
    </div>
  );
}
</file>

<file path="src/pages/marketplace/ListingDetailPage.tsx">
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ArrowLeft, MapPin, Clock, Tag, Share2, MessageCircle, Edit, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { UserAvatar } from '@/components/ui/UserAvatar';
import { PriceTag } from '@/features/classifieds/components/PriceTag';
import { useSubscribe, useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { CLASSIFIED_LISTING_KIND, parseListingFromEvent } from '@/features/classifieds/types';
import { formatDistanceToNow } from 'date-fns';
import { Loader2 } from 'lucide-react';
import { useCreateListing } from '@/features/classifieds/hooks/useCreateListing';
import { useState } from 'react';
export function ListingDetailPage() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const currentUser = useNDKCurrentUser();
  const { deleteListing } = useCreateListing();
  const [isDeleting, setIsDeleting] = useState(false);
  const { events, eose } = useSubscribe([{
    ids: id ? [id] : [],
    kinds: [CLASSIFIED_LISTING_KIND]
  }]);
  if (!eose && events.length === 0) {
    return (
      <div className="container mx-auto px-4 py-12">
        <div className="flex items-center justify-center">
          <Loader2 className="w-8 h-8 animate-spin text-purple-600 dark:text-purple-400" />
        </div>
      </div>
    );
  }
  const event = events[0];
  if (!event) {
    return (
      <div className="container mx-auto px-4 py-12">
        <div className="max-w-2xl mx-auto text-center">
          <h2 className="text-2xl font-bold mb-4">Listing Not Found</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            This listing may have been removed or doesn&apos;t exist.
          </p>
          <Button onClick={() => navigate('/marketplace')}>
            Back to Marketplace
          </Button>
        </div>
      </div>
    );
  }
  const listing = parseListingFromEvent(event);
  const isOwner = currentUser?.pubkey === listing.author;
  const timeAgo = listing.publishedAt
    ? formatDistanceToNow(new Date(listing.publishedAt * 1000), { addSuffix: true })
    : 'recently';
  const handleDelete = async () => {
    if (!confirm('Are you sure you want to delete this listing?')) return;
    try {
      setIsDeleting(true);
      await deleteListing(listing.id);
      navigate('/marketplace');
    } catch (error) {
      console.error('Failed to delete listing:', error);
      alert('Failed to delete listing. Please try again.');
    } finally {
      setIsDeleting(false);
    }
  };
  const handleShare = () => {
    const url = window.location.href;
    navigator.clipboard.writeText(url);
    alert('Link copied to clipboard!');
  };
  return (
    <div className="container mx-auto px-4 py-6">
      <div className="max-w-6xl mx-auto">
        <Button
          variant="ghost"
          onClick={() => navigate('/marketplace')}
          className="mb-6"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Marketplace
        </Button>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            {listing.images && listing.images.length > 0 && (
              <div className="mb-6">
                <div className="grid gap-4">
                  <img
                    src={listing.images[0]}
                    alt={listing.title}
                    className="w-full rounded-lg object-cover aspect-video"
                  />
                  {listing.images.length > 1 && (
                    <div className="grid grid-cols-4 gap-2">
                      {listing.images.slice(1).map((image, index) => (
                        <img
                          key={index}
                          src={image}
                          alt={`${listing.title} ${index + 2}`}
                          className="w-full h-24 rounded-lg object-cover cursor-pointer hover:opacity-75"
                        />
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}
            <Card>
              <CardContent className="p-6">
                <div className="mb-6">
                  <div className="flex items-start justify-between mb-4">
                    <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                      {listing.title}
                    </h1>
                    {listing.price && (
                      <PriceTag price={listing.price} className="text-lg px-4 py-2" />
                    )}
                  </div>
                  {listing.status === 'sold' && (
                    <div className="mb-4 p-4 bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-400 rounded-lg text-center font-semibold">
                      This item has been sold
                    </div>
                  )}
                  <div className="flex flex-wrap gap-4 text-sm text-gray-500 dark:text-gray-400 mb-6">
                    {listing.location && (
                      <div className="flex items-center gap-1">
                        <MapPin className="w-4 h-4" />
                        <span>{listing.location}</span>
                      </div>
                    )}
                    <div className="flex items-center gap-1">
                      <Clock className="w-4 h-4" />
                      <span>Posted {timeAgo}</span>
                    </div>
                  </div>
                  {listing.categories && listing.categories.length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-6">
                      {listing.categories.map(category => (
                        <span
                          key={category}
                          className="inline-flex items-center gap-1 px-3 py-1 bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400 rounded-full text-sm"
                        >
                          <Tag className="w-3 h-3" />
                          {category}
                        </span>
                      ))}
                    </div>
                  )}
                  <div className="prose dark:prose-invert max-w-none">
                    <h3 className="text-lg font-semibold mb-2">Description</h3>
                    <div className="whitespace-pre-wrap">{listing.content}</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          <div className="lg:col-span-1">
            <Card className="sticky top-6">
              <CardContent className="p-6">
                <div className="flex items-center gap-3 mb-6">
                  <UserAvatar pubkey={listing.author} size="lg" />
                  <div>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Listed by</p>
                    <p className="font-medium">User</p>
                  </div>
                </div>
                <div className="space-y-3">
                  {isOwner ? (
                    <>
                      <Link to={`/marketplace/edit/${listing.id}`} className="block">
                        <Button className="w-full" variant="outline">
                          <Edit className="w-4 h-4 mr-2" />
                          Edit Listing
                        </Button>
                      </Link>
                      <Button
                        className="w-full"
                        variant="destructive"
                        onClick={handleDelete}
                        disabled={isDeleting}
                      >
                        <Trash2 className="w-4 h-4 mr-2" />
                        {isDeleting ? 'Deleting...' : 'Delete Listing'}
                      </Button>
                    </>
                  ) : (
                    <Button className="w-full">
                      <MessageCircle className="w-4 h-4 mr-2" />
                      Contact Seller
                    </Button>
                  )}
                  <Button
                    className="w-full"
                    variant="outline"
                    onClick={handleShare}
                  >
                    <Share2 className="w-4 h-4 mr-2" />
                    Share Listing
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/marketplace/MarketplacePage.tsx">
import { useState, useMemo, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { ListingGrid } from '@/features/classifieds/components/ListingGrid';
import { CategorySection } from '@/features/classifieds/components/CategorySection';
import { FilterButton } from '@/features/classifieds/components/FilterButton';
import { useListings } from '@/features/classifieds/hooks/useListings';
import type { ClassifiedListing } from '@/features/classifieds/types';
const CATEGORIES = [
  { value: '', label: 'All Categories' },
  { value: 'electronics', label: 'Electronics' },
  { value: 'furniture', label: 'Furniture' },
  { value: 'clothing', label: 'Clothing' },
  { value: 'books', label: 'Books' },
  { value: 'services', label: 'Services' },
  { value: 'vehicles', label: 'Vehicles' },
  { value: 'real-estate', label: 'Real Estate' },
  { value: 'jobs', label: 'Jobs' },
  { value: 'free', label: 'Free' },
  { value: 'wanted', label: 'Wanted' }
];
export function MarketplacePage() {
  const [searchParams, setSearchParams] = useSearchParams();
  const [selectedCategory, setSelectedCategory] = useState(searchParams.get('category') || '');
  const [searchQuery, setSearchQuery] = useState('');
  const { listings } = useListings({
    category: selectedCategory || undefined
  });
  // Update URL when category changes
  useEffect(() => {
    if (selectedCategory) {
      setSearchParams({ category: selectedCategory });
    } else {
      setSearchParams({});
    }
  }, [selectedCategory, setSearchParams]);
  // Filter and group listings
  const { filteredListings, listingsByCategory } = useMemo(() => {
    // First filter by search query
    const filtered = listings.filter(listing => {
      if (!searchQuery) return true;
      const query = searchQuery.toLowerCase();
      return (
        listing.title.toLowerCase().includes(query) ||
        listing.summary?.toLowerCase().includes(query) ||
        listing.content.toLowerCase().includes(query) ||
        listing.location?.toLowerCase().includes(query)
      );
    });
    // Group by category for the category sections view
    const byCategory = filtered.reduce<Record<string, ClassifiedListing[]>>((acc, listing) => {
      if (listing.categories && listing.categories.length > 0) {
        listing.categories.forEach(category => {
          const key = category.toLowerCase();
          if (!acc[key]) acc[key] = [];
          acc[key].push(listing);
        });
      } else {
        if (!acc['uncategorized']) acc['uncategorized'] = [];
        acc['uncategorized'].push(listing);
      }
      return acc;
    }, {});
    return { filteredListings: filtered, listingsByCategory: byCategory };
  }, [listings, searchQuery]);
  // Determine view mode
  const isFilteredView = selectedCategory || searchQuery;
  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-black">
      <div className="container mx-auto px-4 py-4 max-w-7xl">
        {/* Header */}
        <div className="mb-6">
          <h1 className="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-primary-600 to-primary-400 bg-clip-text text-transparent mb-4">
            Marketplace
          </h1>
          {/* Search and Filter Bar */}
          <div className="flex gap-2 sm:gap-3">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5 pointer-events-none" />
                <Input
                  placeholder="Search listings..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10 h-12 bg-white/80 dark:bg-gray-900/80 backdrop-blur border-gray-200 dark:border-gray-700 rounded-xl text-base focus:ring-2 focus:ring-primary-500/20 focus:border-primary-500 transition-all"
                />
              </div>
            </div>
            <FilterButton
              categories={CATEGORIES}
              selectedCategory={selectedCategory}
              onCategoryChange={setSelectedCategory}
            />
          </div>
        </div>
        {/* Content */}
        {isFilteredView ? (
          // Filtered view - show grid
          <div>
            {selectedCategory && (
              <div className="mb-6">
                <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                  {CATEGORIES.find(c => c.value === selectedCategory)?.label || selectedCategory}
                </h2>
                <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                  {filteredListings.length} listings found
                </p>
              </div>
            )}
            <ListingGrid listings={filteredListings} />
          </div>
        ) : (
          // Category sections view
          <div>
            {Object.keys(listingsByCategory).length === 0 ? (
              <ListingGrid listings={[]} />
            ) : (
              <>
                {/* Featured/Recent listings */}
                {listings.length > 0 && (
                  <CategorySection
                    category="Recent Listings"
                    listings={listings.slice(0, 10)}
                    showViewAll={false}
                  />
                )}
                {/* Category sections */}
                {CATEGORIES.filter(c => c.value && listingsByCategory[c.value]?.length > 0).map(category => (
                  <CategorySection
                    key={category.value}
                    category={category.value}
                    listings={listingsByCategory[category.value]}
                  />
                ))}
                {/* Uncategorized section */}
                {listingsByCategory['uncategorized']?.length > 0 && (
                  <CategorySection
                    category="Other"
                    listings={listingsByCategory['uncategorized']}
                    showViewAll={false}
                  />
                )}
              </>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/pages/ComposePage.tsx">
import { ComposeNote } from '@/features/feed/ComposeNote';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
export function ComposePage() {
  const navigate = useNavigate();
  return (
    <div className="max-w-2xl mx-auto">
      {/* Page header */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="flex items-center gap-4 px-4 py-3 sm:px-6">
          <button
            onClick={() => navigate(-1)}
            className="p-2 -ml-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">Compose</h2>
        </div>
      </div>
      {/* Compose section */}
      <div className="p-4 sm:p-6">
        <ComposeNote />
      </div>
    </div>
  );
}
</file>

<file path="src/pages/FollowPackDetailPage.tsx">
import { useState, useMemo } from 'react';
import { useParams, Link } from 'react-router-dom';
import { ArrowLeft, Users, Heart, UserPlus, UserMinus, Calendar } from 'lucide-react';
import { useNDKCurrentUser, useSubscribe, NDKKind, useProfileValue } from '@nostr-dev-kit/ndk-hooks';
import { Button } from '@/components/ui/button';
import { NoteCard } from '@/features/feed/NoteCard';
import { ProfileAvatar } from '@/features/followPacks/components/ProfileAvatar';
import { useFollowPacks } from '@/features/followPacks/hooks/useFollowPacks';
import { useFollowPacksStore } from '@/stores/followPacksStore';
import { cn } from '@/lib/utils';
export function FollowPackDetailPage() {
  const { packId } = useParams<{ packId: string }>();
  const currentUser = useNDKCurrentUser();
  const [activeTab, setActiveTab] = useState<'feed' | 'members'>('feed');
  const { packs } = useFollowPacks();
  const { isSubscribed, subscribeToPack, unsubscribeFromPack, isFavorite, toggleFavorite } = useFollowPacksStore();
  // Find the specific pack
  const pack = useMemo(() => {
    return packs.find(p => p.id === packId);
  }, [packs, packId]);
  // Get pack creator profile
  const creatorProfile = useProfileValue(pack?.pubkey);
  const subscribed = pack ? isSubscribed(pack.id) : false;
  const favorited = pack ? isFavorite(pack.id) : false;
  // Subscribe to notes from all pack members
  const { events: feedEvents } = useSubscribe(
    pack && activeTab === 'feed' ? [{
      kinds: [NDKKind.Text],
      authors: pack.pubkeys,
    }] : []
  );
  const handleSubscribe = () => {
    if (!pack || !currentUser) return;
    if (subscribed) {
      unsubscribeFromPack(pack.id);
    } else {
      subscribeToPack(pack.id);
    }
  };
  const handleFavorite = () => {
    if (!pack || !currentUser) return;
    toggleFavorite(pack.id);
  };
  if (!pack) {
    return (
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="text-center py-12">
          <p className="text-neutral-400">Follow pack not found</p>
          <Link to="/packs" className="text-purple-400 hover:text-purple-300 mt-4 inline-block">
            Browse all packs
          </Link>
        </div>
      </div>
    );
  }
  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Back button */}
      <Link
        to="/packs"
        className="inline-flex items-center gap-2 text-neutral-400 hover:text-white mb-6 transition-colors"
      >
        <ArrowLeft className="w-4 h-4" />
        Back to Follow Packs
      </Link>
      {/* Pack Header */}
      <div className="bg-neutral-900 border border-neutral-800 rounded-xl p-6 mb-6">
        <div className="flex items-start justify-between mb-4">
          <div>
            <h1 className="text-2xl font-bold text-white mb-2">
              {pack.title}
            </h1>
            <p className="text-neutral-400">
              {pack.description || 'A curated list of accounts to follow'}
            </p>
          </div>
          <button
            onClick={handleFavorite}
            className={cn(
              "p-2.5 rounded-lg transition-colors",
              favorited
                ? "bg-red-500/10 text-red-500"
                : "bg-neutral-800 text-neutral-400 hover:text-white"
            )}
          >
            <Heart className={cn("w-5 h-5", favorited && "fill-current")} />
          </button>
        </div>
        {/* Stats */}
        <div className="flex items-center gap-6 mb-6 text-sm">
          <div className="flex items-center gap-2 text-neutral-400">
            <Users className="w-4 h-4" />
            <span>{pack.pubkeys.length} members</span>
          </div>
          {pack.lastUpdated && (
            <div className="flex items-center gap-2 text-neutral-400">
              <Calendar className="w-4 h-4" />
              <span>Updated {new Date(pack.lastUpdated * 1000).toLocaleDateString()}</span>
            </div>
          )}
        </div>
        {/* Creator */}
        {creatorProfile && (
          <div className="flex items-center gap-3 mb-6 pb-6 border-b border-neutral-800">
            <ProfileAvatar pubkey={pack.author} size="md" />
            <div>
              <p className="text-sm text-neutral-500">Created by</p>
              <Link
                to={`/p/${pack.author}`}
                className="font-medium text-white hover:text-purple-400 transition-colors"
              >
                {creatorProfile.name || 'Anonymous'}
              </Link>
            </div>
          </div>
        )}
        {/* Action Button */}
        <Button
          onClick={handleSubscribe}
          variant={subscribed ? 'outline' : 'primary'}
          className="w-full"
          disabled={!currentUser}
        >
          {subscribed ? (
            <>
              <UserMinus className="w-4 h-4 mr-2" />
              Unfollow Pack
            </>
          ) : (
            <>
              <UserPlus className="w-4 h-4 mr-2" />
              Follow Pack
            </>
          )}
        </Button>
      </div>
      {/* Tabs */}
      <div className="border-b border-neutral-800 mb-6">
        <div className="flex gap-6">
          <button
            onClick={() => setActiveTab('feed')}
            className={cn(
              "pb-3 px-1 font-medium transition-colors relative",
              activeTab === 'feed'
                ? "text-white"
                : "text-neutral-400 hover:text-neutral-200"
            )}
          >
            Feed
            {activeTab === 'feed' && (
              <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-purple-500" />
            )}
          </button>
          <button
            onClick={() => setActiveTab('members')}
            className={cn(
              "pb-3 px-1 font-medium transition-colors relative",
              activeTab === 'members'
                ? "text-white"
                : "text-neutral-400 hover:text-neutral-200"
            )}
          >
            Members ({pack.pubkeys.length})
            {activeTab === 'members' && (
              <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-purple-500" />
            )}
          </button>
        </div>
      </div>
      {/* Content */}
      {activeTab === 'feed' ? (
        <div>
          {feedEvents.length > 0 ? (
            <div className="space-y-4">
              {feedEvents.map(event => (
                <NoteCard key={event.id} event={event} />
              ))}
            </div>
          ) : (
            <div className="text-center py-12">
              <p className="text-neutral-400">
                No recent notes from pack members
              </p>
            </div>
          )}
        </div>
      ) : (
        <div className="grid gap-4 md:grid-cols-2">
          {pack.pubkeys.map(pubkey => (
            <MemberCard key={pubkey} pubkey={pubkey} />
          ))}
        </div>
      )}
    </div>
  );
}
function MemberCard({ pubkey }: { pubkey: string }) {
  const profile = useProfileValue(pubkey);
  return (
    <Link
      to={`/p/${pubkey}`}
      className="flex items-center gap-3 p-4 bg-neutral-900 border border-neutral-800 rounded-lg hover:border-neutral-700 transition-colors"
    >
      <ProfileAvatar pubkey={pubkey} size="md" />
      <div className="flex-1 min-w-0">
        <p className="font-medium text-white truncate">
          {profile?.name || 'Anonymous'}
        </p>
        {profile?.nip05 && (
          <p className="text-sm text-neutral-500 truncate">
            {profile.nip05}
          </p>
        )}
        {profile?.about && (
          <p className="text-sm text-neutral-400 line-clamp-1 mt-1">
            {profile.about}
          </p>
        )}
      </div>
    </Link>
  );
}
</file>

<file path="src/pages/FollowPacksPage.tsx">
import { useState } from 'react';
import { Link } from 'react-router-dom';
import { Package, Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useFollowPacks, useSubscribedFollowPacks } from '@/features/followPacks/hooks/useFollowPacks';
import { useFollowPacksStore } from '@/stores/followPacksStore';
import { ProfileAvatar } from '@/features/followPacks/components/ProfileAvatar';
import { cn } from '@/lib/utils';
export function FollowPacksPage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const { packs } = useFollowPacks();
  const subscribedPacks = useSubscribedFollowPacks();
  // Filter packs based on search and category
  const filteredPacks = packs.filter(pack => {
    const matchesSearch = !searchQuery ||
      pack.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      pack.description.toLowerCase().includes(searchQuery.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || (() => {
      const searchText = `${pack.title} ${pack.description}`.toLowerCase();
      switch (selectedCategory) {
        case 'tech':
          return /tech|dev|code|program|software/i.test(searchText);
        case 'bitcoin':
          return /bitcoin|btc|sats|lightning/i.test(searchText);
        case 'nostr':
          return /nostr|relay|nip/i.test(searchText);
        default:
          return true;
      }
    })();
    return matchesSearch && matchesCategory;
  });
  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white mb-2 flex items-center gap-3">
          <Package className="w-8 h-8 text-purple-500" />
          Follow Packs
        </h1>
        <p className="text-neutral-400">
          Discover curated lists of accounts to follow
        </p>
      </div>
      {/* Search and Filters */}
      <div className="mb-6 space-y-4">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-500" />
          <Input
            type="search"
            placeholder="Search follow packs..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10 bg-neutral-900 border-neutral-800 text-white placeholder:text-neutral-500"
          />
        </div>
        {/* Category Pills */}
        <div className="flex flex-wrap gap-2">
          <button
            onClick={() => setSelectedCategory('all')}
            className={cn(
              "px-4 py-2 rounded-full text-sm font-medium transition-colors",
              selectedCategory === 'all'
                ? 'bg-purple-600 text-white'
                : 'bg-neutral-900 text-neutral-400 hover:bg-neutral-800'
            )}
          >
            All
          </button>
          <button
            onClick={() => setSelectedCategory('tech')}
            className={cn(
              "px-4 py-2 rounded-full text-sm font-medium transition-colors",
              selectedCategory === 'tech'
                ? 'bg-purple-600 text-white'
                : 'bg-neutral-900 text-neutral-400 hover:bg-neutral-800'
            )}
          >
            💻 Tech
          </button>
          <button
            onClick={() => setSelectedCategory('bitcoin')}
            className={cn(
              "px-4 py-2 rounded-full text-sm font-medium transition-colors",
              selectedCategory === 'bitcoin'
                ? 'bg-purple-600 text-white'
                : 'bg-neutral-900 text-neutral-400 hover:bg-neutral-800'
            )}
          >
            ₿ Bitcoin
          </button>
          <button
            onClick={() => setSelectedCategory('nostr')}
            className={cn(
              "px-4 py-2 rounded-full text-sm font-medium transition-colors",
              selectedCategory === 'nostr'
                ? 'bg-purple-600 text-white'
                : 'bg-neutral-900 text-neutral-400 hover:bg-neutral-800'
            )}
          >
            🟣 Nostr
          </button>
        </div>
      </div>
      {/* Your Subscribed Packs */}
      {subscribedPacks.length > 0 && (
        <div className="mb-8">
          <h2 className="text-xl font-semibold text-white mb-4">Your Packs</h2>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {subscribedPacks.map(pack => (
              <PackCard key={pack.id} pack={pack} />
            ))}
          </div>
        </div>
      )}
      {/* All Packs Grid */}
      <div>
        <h2 className="text-xl font-semibold text-white mb-4">
          {subscribedPacks.length > 0 ? 'Discover More' : 'Popular Packs'}
        </h2>
        {filteredPacks.length > 0 ? (
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {filteredPacks.map(pack => (
              <PackCard key={pack.id} pack={pack} />
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <Package className="w-16 h-16 text-neutral-600 mx-auto mb-4" />
            <p className="text-neutral-400">
              No follow packs found
            </p>
          </div>
        )}
      </div>
    </div>
  );
}
interface Pack {
  id: string;
  title: string;
  description: string;
  pubkeys: string[];
}
function PackCard({ pack }: { pack: Pack }) {
  const { isSubscribed, subscribeToPack, unsubscribeFromPack } = useFollowPacksStore();
  const subscribed = isSubscribed(pack.id);
  const previewPubkeys = pack.pubkeys.slice(0, 4);
  const handleSubscribe = (e: React.MouseEvent) => {
    e.preventDefault();
    if (subscribed) {
      unsubscribeFromPack(pack.id);
    } else {
      subscribeToPack(pack.id);
    }
  };
  return (
    <Link
      to={`/packs/${pack.id}`}
      className="block bg-neutral-900 border border-neutral-800 rounded-xl p-5 hover:border-neutral-700 transition-colors group"
    >
      {/* Header */}
      <div className="mb-4">
        <h3 className="font-semibold text-white group-hover:text-purple-400 transition-colors">
          {pack.title}
        </h3>
        <p className="text-sm text-neutral-500 mt-1">
          {pack.pubkeys.length} members
        </p>
      </div>
      {/* Description */}
      {pack.description && (
        <p className="text-sm text-neutral-400 mb-4 line-clamp-2">
          {pack.description}
        </p>
      )}
      {/* Member Avatars */}
      <div className="flex items-center justify-between">
        <div className="flex -space-x-2">
          {previewPubkeys.map((pubkey: string, index: number) => (
            <div
              key={pubkey}
              className="relative"
              style={{ zIndex: 4 - index }}
            >
              <ProfileAvatar
                pubkey={pubkey}
                size="sm"
                className="ring-2 ring-neutral-900"
              />
            </div>
          ))}
          {pack.pubkeys.length > 4 && (
            <div className="w-8 h-8 rounded-full bg-neutral-800 ring-2 ring-neutral-900 flex items-center justify-center">
              <span className="text-xs text-neutral-400">
                +{pack.pubkeys.length - 4}
              </span>
            </div>
          )}
        </div>
        <Button
          onClick={handleSubscribe}
          size="sm"
          variant={subscribed ? 'outline' : 'primary'}
          className="ml-2"
        >
          {subscribed ? 'Following' : 'Follow'}
        </Button>
      </div>
    </Link>
  );
}
</file>

<file path="src/pages/HomePage.tsx">
import { NoteFeed } from '@/features/feed/NoteFeed';
import { ComposeNote } from '@/features/feed/ComposeNote';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
export function HomePage() {
  const currentUser = useNDKCurrentUser();
  return (
    <div className="max-w-2xl mx-auto">
      {/* Feed header */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="px-4 py-3 sm:px-6">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">Home</h2>
        </div>
      </div>
      {/* Compose section for logged-in users - hidden on mobile */}
      {currentUser && (
        <div className="hidden md:block border-b border-gray-200 dark:border-gray-800">
          <div className="p-4 sm:p-6">
            <ComposeNote />
          </div>
        </div>
      )}
      {/* Notes feed */}
      <NoteFeed />
    </div>
  );
}
</file>

<file path="src/pages/NotificationsPage.tsx">
import { Bell } from 'lucide-react';
export function NotificationsPage() {
  return (
    <div className="max-w-2xl mx-auto">
      {/* Page header */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="px-4 py-3 sm:px-6">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">Notifications</h2>
        </div>
      </div>
      {/* Empty state */}
      <div className="flex flex-col items-center justify-center py-16 px-4">
        <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mb-4">
          <Bell className="w-8 h-8 text-gray-400 dark:text-gray-600" />
        </div>
        <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-1">
          No notifications yet
        </h3>
        <p className="text-gray-500 dark:text-gray-400 text-center max-w-sm">
          When someone mentions you or interacts with your notes, you&apos;ll see it here.
        </p>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/ProfilePage.tsx">
import { useState, useEffect } from 'react';
import { useNDKCurrentUser, useProfile, useSubscribe, NDKKind, useNDK } from '@nostr-dev-kit/ndk-hooks';
import { Calendar, Link as LinkIcon, Edit2, Package } from 'lucide-react';
import { NoteCard } from '@/features/feed/NoteCard';
import { useParams } from 'react-router-dom';
import { ProfileEditor } from '@/features/profile/ProfileEditor';
import { nip19 } from 'nostr-tools';
import { FollowPackCard } from '@/features/followPacks/components/FollowPackCard';
import { useFollowPacks } from '@/features/followPacks/hooks/useFollowPacks';
export function ProfilePage() {
  const { identifier } = useParams<{ identifier?: string }>();
  const currentUser = useNDKCurrentUser();
  const { ndk } = useNDK();
  const [targetPubkey, setTargetPubkey] = useState<string | undefined>();
  const [isEditingProfile, setIsEditingProfile] = useState(false);
  const [activeTab, setActiveTab] = useState<'notes' | 'replies' | 'media' | 'packs'>('notes');
  useEffect(() => {
    async function resolveIdentifier() {
      if (!identifier) {
        setTargetPubkey(currentUser?.pubkey);
        return;
      }
      // Check if it's an npub
      if (identifier.startsWith('npub')) {
        try {
          const decoded = nip19.decode(identifier);
          if (decoded.type === 'npub') {
            setTargetPubkey(decoded.data as string);
          }
        } catch (error) {
          console.error('Invalid npub:', error);
        }
      } else if (identifier.includes('@') || identifier.includes('.')) {
        // It's likely a NIP-05 identifier
        try {
          const user = await ndk?.getUserFromNip05(identifier);
          if (user) {
            setTargetPubkey(user.pubkey);
          }
        } catch (error) {
          console.error('Failed to resolve NIP-05:', error);
        }
      }
    }
    resolveIdentifier();
  }, [identifier, currentUser, ndk]);
  const profile = useProfile(targetPubkey);
  const isOwnProfile = targetPubkey === currentUser?.pubkey;
  const { events } = useSubscribe(targetPubkey ? [{
    kinds: [NDKKind.Text],
    authors: [targetPubkey],
    limit: 20,
  }] : []);
  const { packs } = useFollowPacks(targetPubkey);
  if (!targetPubkey) return null;
  return (
    <div className="max-w-2xl mx-auto">
      {/* Profile header */}
      <div className="bg-white dark:bg-gray-950 border-b border-gray-200 dark:border-gray-800">
        {/* Cover image */}
        <div className="h-32 sm:h-48 bg-gradient-to-br from-purple-500 to-pink-500 relative">
          {profile?.banner && (
            <img
              src={profile.banner}
              alt="Banner"
              className="w-full h-full object-cover"
            />
          )}
          {isOwnProfile && (
            <button
              onClick={() => setIsEditingProfile(true)}
              className="absolute top-4 right-4 p-2 bg-white/90 dark:bg-gray-900/90 hover:bg-white dark:hover:bg-gray-900 rounded-lg transition-colors backdrop-blur-sm"
              aria-label="Edit profile"
            >
              <Edit2 className="w-4 h-4" />
            </button>
          )}
        </div>
        {/* Profile info */}
        <div className="px-4 sm:px-6 pb-4">
          {/* Avatar */}
          <div className="relative -mt-12 sm:-mt-16 mb-4">
            {profile?.picture ? (
              <img
                src={profile.picture}
                alt={profile?.name || 'Profile'}
                className="w-24 h-24 sm:w-32 sm:h-32 rounded-full border-4 border-white dark:border-gray-950 object-cover"
              />
            ) : (
              <div className="w-24 h-24 sm:w-32 sm:h-32 rounded-full border-4 border-white dark:border-gray-950 bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold text-3xl">
                {(profile?.name || 'A')[0].toUpperCase()}
              </div>
            )}
          </div>
          {/* Name and bio */}
          <div className="mb-4">
            <h1 className="text-xl sm:text-2xl font-bold text-gray-900 dark:text-gray-100">
              {profile?.name || 'Anonymous'}
            </h1>
            {profile?.nip05 && (
              <p className="text-gray-500 dark:text-gray-400">
                @{profile.nip05.split('@')[0]}
              </p>
            )}
            {profile?.about && (
              <p className="mt-3 text-gray-700 dark:text-gray-300">
                {profile.about}
              </p>
            )}
          </div>
          {/* Meta info */}
          <div className="flex flex-wrap gap-4 text-sm text-gray-500 dark:text-gray-400">
            {profile?.website && (
              <a 
                href={profile.website} 
                target="_blank" 
                rel="noopener noreferrer"
                className="flex items-center gap-1 hover:text-purple-600 dark:hover:text-purple-400"
              >
                <LinkIcon className="w-4 h-4" />
                <span>{profile.website.replace(/^https?:\/\//, '')}</span>
              </a>
            )}
            <div className="flex items-center gap-1">
              <Calendar className="w-4 h-4" />
              <span>Joined recently</span>
            </div>
          </div>
          {/* Stats */}
          <div className="flex gap-6 mt-4">
            <div>
              <span className="font-semibold text-gray-900 dark:text-gray-100">
                {events.length}
              </span>
              <span className="text-gray-500 dark:text-gray-400 ml-1">Notes</span>
            </div>
            <div>
              <span className="font-semibold text-gray-900 dark:text-gray-100">0</span>
              <span className="text-gray-500 dark:text-gray-400 ml-1">Following</span>
            </div>
            <div>
              <span className="font-semibold text-gray-900 dark:text-gray-100">0</span>
              <span className="text-gray-500 dark:text-gray-400 ml-1">Followers</span>
            </div>
          </div>
        </div>
      </div>
      {/* Tabs */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="flex px-4 sm:px-6 overflow-x-auto">
          <button
            onClick={() => setActiveTab('notes')}
            className={`px-4 py-3 font-medium whitespace-nowrap ${
              activeTab === 'notes'
                ? 'text-purple-600 dark:text-purple-400 border-b-2 border-purple-600 dark:border-purple-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}>
            Notes
          </button>
          <button
            onClick={() => setActiveTab('replies')}
            className={`px-4 py-3 font-medium whitespace-nowrap ${
              activeTab === 'replies'
                ? 'text-purple-600 dark:text-purple-400 border-b-2 border-purple-600 dark:border-purple-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}>
            Replies
          </button>
          <button
            onClick={() => setActiveTab('media')}
            className={`px-4 py-3 font-medium whitespace-nowrap ${
              activeTab === 'media'
                ? 'text-purple-600 dark:text-purple-400 border-b-2 border-purple-600 dark:border-purple-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}>
            Media
          </button>
          <button
            onClick={() => setActiveTab('packs')}
            className={`px-4 py-3 font-medium whitespace-nowrap flex items-center gap-1.5 ${
              activeTab === 'packs'
                ? 'text-purple-600 dark:text-purple-400 border-b-2 border-purple-600 dark:border-purple-400'
                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
            }`}>
            <Package className="w-4 h-4" />
            Follow Packs
          </button>
        </div>
      </div>
      {/* Tab content */}
      <div>
        {activeTab === 'notes' && (
          <>
            {events.map((event) => (
              <NoteCard key={event.id} event={event} />
            ))}
            {events.length === 0 && (
              <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                No notes yet
              </div>
            )}
          </>
        )}
        {activeTab === 'replies' && (
          <div className="text-center py-8 text-gray-500 dark:text-gray-400">
            Replies coming soon
          </div>
        )}
        {activeTab === 'media' && (
          <div className="text-center py-8 text-gray-500 dark:text-gray-400">
            Media coming soon
          </div>
        )}
        {activeTab === 'packs' && (
          <div className="p-4 space-y-4">
            {packs.length > 0 ? (
              <>
                <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
                  {isOwnProfile ? 'Your Follow Packs' : 'Follow Packs'}
                </h3>
                <div className="grid gap-4 md:grid-cols-2">
                  {packs.map((pack) => (
                    <FollowPackCard key={pack.id} pack={pack} />
                  ))}
                </div>
              </>
            ) : (
              <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                {isOwnProfile
                  ? "You haven't created any follow packs yet"
                  : "No follow packs yet"}
              </div>
            )}
          </div>
        )}
      </div>
      {/* Profile Editor Modal */}
      {isEditingProfile && targetPubkey && (
        <ProfileEditor
          pubkey={targetPubkey}
          onClose={() => setIsEditingProfile(false)}
          onSave={() => {
            setIsEditingProfile(false);
            // Profile will auto-update via the useProfile hook
          }}
        />
      )}
    </div>
  );
}
</file>

<file path="src/pages/SettingsPage.tsx">
import React, { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { motion } from 'framer-motion';
import { useTranslation } from 'react-i18next';
import {
  Server,
  Bell,
  Shield,
  Palette,
  User,
  ChevronRight,
  Settings as SettingsIcon,
  Image
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { RelaySettings } from '@/features/settings/RelaySettings';
import { ThemeSettings } from '@/features/settings/ThemeSettings';
import { NotificationSettings } from '@/features/settings/NotificationSettings';
import { PrivacySettings } from '@/features/settings/PrivacySettings';
import { ProfileSettings } from '@/features/settings/ProfileSettings';
import { BlossomSettings } from '@/features/settings/BlossomSettings';
type SettingsSection = 'relays' | 'theme' | 'notifications' | 'privacy' | 'profile' | 'blossom';
interface SectionConfig {
  id: SettingsSection;
  label: string;
  description: string;
  icon: React.ElementType;
  component: React.ComponentType;
  available: boolean;
}
const sectionConfigs: Omit<SectionConfig, 'label' | 'description'>[] = [
  {
    id: 'relays',
    icon: Server,
    component: RelaySettings,
    available: true,
  },
  {
    id: 'blossom',
    icon: Image,
    component: BlossomSettings,
    available: true,
  },
  {
    id: 'profile',
    icon: User,
    component: ProfileSettings,
    available: false,
  },
  {
    id: 'theme',
    icon: Palette,
    component: ThemeSettings,
    available: true,
  },
  {
    id: 'notifications',
    icon: Bell,
    component: NotificationSettings,
    available: false,
  },
  {
    id: 'privacy',
    icon: Shield,
    component: PrivacySettings,
    available: false,
  },
];
export function SettingsPage() {
  const { t } = useTranslation();
  const location = useLocation();
  const [activeSection, setActiveSection] = useState<SettingsSection>('relays');
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  // Build sections with translations
  const sections: SectionConfig[] = sectionConfigs.map(config => ({
    ...config,
    label: t(`settings.sections.${config.id}.title`),
    description: t(`settings.sections.${config.id}.description`),
  }));
  // Handle URL tab parameter
  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const tab = params.get('tab');
    if (tab && sections.some(s => s.id === tab && s.available)) {
      setActiveSection(tab as SettingsSection);
    }
  }, [location.search, sections]);
  const currentSection = sections.find(s => s.id === activeSection);
  const SectionComponent = currentSection?.component;
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 pb-20 md:pb-0">
      <div className="max-w-7xl mx-auto px-4 py-4 md:py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6"
        >
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-2 md:gap-3">
            <SettingsIcon className="w-6 h-6 md:w-8 md:h-8 text-purple-600" />
            {t('settings.title')}
          </h1>
          <p className="mt-1 text-sm md:text-base text-gray-600 dark:text-gray-400">
            {t('settings.description')}
          </p>
        </motion.div>
        {/* Mobile Section Selector */}
        <div className="lg:hidden mb-4">
          <button
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            className="w-full bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 px-4 py-3 flex items-center justify-between"
          >
            <div className="flex items-center gap-3">
              {currentSection && (
                <>
                  {React.createElement(currentSection.icon, { className: "w-5 h-5 text-purple-600" })}
                  <span className="font-medium text-gray-900 dark:text-gray-100">
                    {currentSection.label}
                  </span>
                </>
              )}
            </div>
            <ChevronRight className={cn(
              "w-5 h-5 text-gray-400 transition-transform",
              mobileMenuOpen ? "rotate-90" : ""
            )} />
          </button>
          {mobileMenuOpen && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="absolute left-4 right-4 z-20 mt-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              {sections.map((section) => {
                const Icon = section.icon;
                return (
                  <button
                    key={section.id}
                    onClick={() => {
                      if (section.available) {
                        setActiveSection(section.id);
                        setMobileMenuOpen(false);
                      }
                    }}
                    disabled={!section.available}
                    className={cn(
                      'w-full px-4 py-3 flex items-center gap-3 transition-all border-b border-gray-100 dark:border-gray-700 last:border-0',
                      section.available
                        ? 'hover:bg-gray-50 dark:hover:bg-gray-750'
                        : 'opacity-50 cursor-not-allowed'
                    )}
                  >
                    <Icon className="w-5 h-5" />
                    <span className="text-sm font-medium">
                      {section.label}
                      {!section.available && (
                        <span className="ml-2 text-xs bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded">
                          {t('common.soon')}
                        </span>
                      )}
                    </span>
                  </button>
                );
              })}
            </motion.div>
          )}
        </div>
        <div className="flex flex-col lg:flex-row gap-6 lg:gap-8">
          {/* Desktop Sidebar Navigation */}
          <motion.nav
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="hidden lg:block lg:w-64"
          >
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
              {sections.map((section) => {
                const Icon = section.icon;
                const isActive = section.id === activeSection;
                return (
                  <button
                    key={section.id}
                    onClick={() => section.available && setActiveSection(section.id)}
                    disabled={!section.available}
                    className={cn(
                      'w-full px-4 py-3 flex items-center gap-3 transition-all border-b border-gray-100 dark:border-gray-700 last:border-0',
                      isActive
                        ? 'bg-purple-50 dark:bg-purple-950/30 text-purple-700 dark:text-purple-400'
                        : section.available
                        ? 'hover:bg-gray-50 dark:hover:bg-gray-750 text-gray-700 dark:text-gray-300'
                        : 'opacity-50 cursor-not-allowed text-gray-400 dark:text-gray-500'
                    )}
                  >
                    <Icon className={cn(
                      'w-5 h-5',
                      isActive ? 'text-purple-600 dark:text-purple-400' : ''
                    )} />
                    <div className="flex-1 text-left">
                      <div className="font-medium text-sm flex items-center gap-2">
                        {section.label}
                        {!section.available && (
                          <span className="text-xs bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded">
                            {t('common.soon')}
                          </span>
                        )}
                      </div>
                      <div className="text-xs text-gray-500 dark:text-gray-400 mt-0.5">
                        {section.description}
                      </div>
                    </div>
                    {section.available && (
                      <ChevronRight className={cn(
                        'w-4 h-4 transition-transform',
                        isActive ? 'translate-x-1' : ''
                      )} />
                    )}
                  </button>
                );
              })}
            </div>
          </motion.nav>
          {/* Main Content */}
          <motion.main
            key={activeSection}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex-1"
          >
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
              {SectionComponent && <SectionComponent />}
            </div>
          </motion.main>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/pages/TradePage.tsx">
import { useState, useEffect } from 'react';
import { Plus } from 'lucide-react';
import { OrderBook } from '@/features/trades/OrderBook';
import { CreateOrderModal } from '@/features/trades/CreateOrderModal';
import { QuickFilters } from '@/features/trades/QuickFilters';
import { CompactFilters } from '@/features/trades/CompactFilters';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
export function TradePage() {
  const currentUser = useNDKCurrentUser();
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [filters, setFilters] = useState({
    currency: 'all',
    paymentMethod: 'all',
    orderType: 'all' as 'all' | 'buy' | 'sell',
    minAmount: 0,
    maxAmount: 1000000
  });
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-950">
      {/* Header */}
      <div className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 sticky top-0 z-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3 md:py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-lg md:text-2xl font-bold text-gray-900 dark:text-white">P2P Trading</h1>
              <p className="text-xs md:text-sm text-gray-500 dark:text-gray-400 mt-0.5 md:mt-1 hidden sm:block">
                Buy and sell Bitcoin directly
              </p>
            </div>
            {currentUser && (
              <button
                onClick={() => setShowCreateModal(true)}
                className="hidden md:flex items-center gap-2 px-3 md:px-4 py-1.5 md:py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm md:text-base"
              >
                <Plus className="w-4 h-4" />
                <span>Create Order</span>
              </button>
            )}
          </div>
        </div>
      </div>
      {/* Filters - Mobile vs Desktop */}
      {isMobile ? (
        <CompactFilters
          filters={filters}
          onFiltersChange={setFilters}
        />
      ) : (
        <div className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <QuickFilters
              selectedCurrency={filters.currency}
              selectedPaymentMethod={filters.paymentMethod}
              onCurrencyChange={(currency) => setFilters({ ...filters, currency })}
              onPaymentMethodChange={(method) => setFilters({ ...filters, paymentMethod: method })}
            />
          </div>
        </div>
      )}
      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <OrderBook filters={filters} />
      </div>
      {/* Create Order Modal */}
      {showCreateModal && (
        <CreateOrderModal onClose={() => setShowCreateModal(false)} />
      )}
    </div>
  );
}
</file>

<file path="src/pages/WalletPage.tsx">
import { ProfessionalWallet } from '../components/wallet/ProfessionalWallet';
export function WalletPage() {
  return <ProfessionalWallet />;
}
</file>

<file path="src/stores/followPacksStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
interface FollowPacksStore {
  subscribedPacks: string[]; // Array of pack IDs
  favoritesPacks: string[]; // Array of favorite pack IDs
  userCreatedPacks: string[]; // Array of pack IDs created by the user
  subscribeToPack: (packId: string) => void;
  unsubscribeFromPack: (packId: string) => void;
  toggleFavorite: (packId: string) => void;
  addUserPack: (packId: string) => void;
  removeUserPack: (packId: string) => void;
  isSubscribed: (packId: string) => boolean;
  isFavorite: (packId: string) => boolean;
}
export const useFollowPacksStore = create<FollowPacksStore>()(
  persist(
    (set, get) => ({
      subscribedPacks: [],
      favoritesPacks: [],
      userCreatedPacks: [],
      subscribeToPack: (packId) =>
        set((state) => ({
          subscribedPacks: [...new Set([...state.subscribedPacks, packId])]
        })),
      unsubscribeFromPack: (packId) =>
        set((state) => ({
          subscribedPacks: state.subscribedPacks.filter(id => id !== packId)
        })),
      toggleFavorite: (packId) =>
        set((state) => ({
          favoritesPacks: state.favoritesPacks.includes(packId)
            ? state.favoritesPacks.filter(id => id !== packId)
            : [...state.favoritesPacks, packId]
        })),
      addUserPack: (packId) =>
        set((state) => ({
          userCreatedPacks: [...new Set([...state.userCreatedPacks, packId])]
        })),
      removeUserPack: (packId) =>
        set((state) => ({
          userCreatedPacks: state.userCreatedPacks.filter(id => id !== packId)
        })),
      isSubscribed: (packId) => get().subscribedPacks.includes(packId),
      isFavorite: (packId) => get().favoritesPacks.includes(packId),
    }),
    {
      name: 'follow-packs-storage',
    }
  )
);
</file>

<file path="src/stores/settingsStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
export interface Relay {
  url: string;
  read: boolean;
  write: boolean;
  enabled: boolean;
}
interface AppSettings {
  // Relay settings
  relays: Relay[];
  selectedRelay: string | null; // null means use all enabled relays
  // Theme settings (for future)
  theme: 'light' | 'dark' | 'system';
  // Language settings
  language: 'en' | 'es';
  // Notification settings (for future)
  notifications: {
    enabled: boolean;
    mentions: boolean;
    replies: boolean;
    zaps: boolean;
  };
  // Privacy settings (for future)
  privacy: {
    hideReadReceipts: boolean;
    hideTypingIndicator: boolean;
  };
}
interface SettingsStore extends AppSettings {
  // Relay actions
  addRelay: (relay: Relay) => void;
  removeRelay: (url: string) => void;
  updateRelay: (url: string, updates: Partial<Relay>) => void;
  toggleRelay: (url: string) => void;
  setRelays: (relays: Relay[]) => void;
  setSelectedRelay: (url: string | null) => void;
  // Theme actions
  setTheme: (theme: 'light' | 'dark' | 'system') => void;
  // Language actions
  setLanguage: (language: 'en' | 'es') => void;
  // Notification actions
  updateNotifications: (settings: Partial<AppSettings['notifications']>) => void;
  // Privacy actions
  updatePrivacy: (settings: Partial<AppSettings['privacy']>) => void;
  // General actions
  resetToDefaults: () => void;
}
const defaultRelays: Relay[] = [
  { url: 'wss://relay.damus.io', read: true, write: true, enabled: true },
  { url: 'wss://relay.nostr.band', read: true, write: false, enabled: true },
  { url: 'wss://nos.lol', read: true, write: true, enabled: true },
  { url: 'wss://relay.snort.social', read: true, write: true, enabled: true },
  { url: 'wss://relay.primal.net', read: true, write: true, enabled: true },
];
const defaultSettings: AppSettings = {
  relays: defaultRelays,
  selectedRelay: null,
  theme: 'system',
  language: 'en',
  notifications: {
    enabled: true,
    mentions: true,
    replies: true,
    zaps: true,
  },
  privacy: {
    hideReadReceipts: false,
    hideTypingIndicator: false,
  },
};
export const useSettingsStore = create<SettingsStore>()(
  persist(
    (set) => ({
      ...defaultSettings,
      // Relay actions
      addRelay: (relay) =>
        set((state) => ({
          relays: [...state.relays, relay],
        })),
      removeRelay: (url) =>
        set((state) => ({
          relays: state.relays.filter((r) => r.url !== url),
        })),
      updateRelay: (url, updates) =>
        set((state) => ({
          relays: state.relays.map((r) =>
            r.url === url ? { ...r, ...updates } : r
          ),
        })),
      toggleRelay: (url) =>
        set((state) => ({
          relays: state.relays.map((r) =>
            r.url === url ? { ...r, enabled: !r.enabled } : r
          ),
        })),
      setRelays: (relays) => set({ relays }),
      setSelectedRelay: (url) => set({ selectedRelay: url }),
      // Theme actions
      setTheme: (theme) => set({ theme }),
      // Language actions
      setLanguage: (language) => set({ language }),
      // Notification actions
      updateNotifications: (settings) =>
        set((state) => ({
          notifications: { ...state.notifications, ...settings },
        })),
      // Privacy actions
      updatePrivacy: (settings) =>
        set((state) => ({
          privacy: { ...state.privacy, ...settings },
        })),
      // General actions
      resetToDefaults: () => set(defaultSettings),
    }),
    {
      name: 'voces-settings',
      version: 1,
    }
  )
);
</file>

<file path="src/.repomix-output.txt">
This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*, .cursorrules, .cursor/rules/*, .clinerules, CLAUDE.md
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo, **/certdata.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
components/
  layout/
    Layout.tsx
  navigation/
    BottomNav.tsx
    RelaySelector.tsx
    Sidebar.tsx
  nostr/
  ui/
    Avatar.tsx
    button.tsx
    card.tsx
    FAB.tsx
    input.tsx
    label.tsx
    select.tsx
    tabs.tsx
    textarea.tsx
    UserAvatar.tsx
  wallet/
    index.ts
    MintConfiguration.tsx
    ProfessionalWallet.tsx
    QRScanner.tsx
    README.md
    TransactionButton.tsx
    TransactionModal.tsx
    Wallet.tsx
    WalletBalance.tsx
    WalletBalanceBadge.tsx
    WalletIntegration.tsx
    WalletWidget.tsx
    ZapButton.tsx
config/
  ndk.ts
contexts/
features/
  auth/
    LoginButton.tsx
  classifieds/
    components/
      CategorySection.tsx
      FilterButton.tsx
      ListingCard.tsx
      ListingForm.tsx
      ListingGrid.tsx
      PriceTag.tsx
    hooks/
      useCreateListing.ts
      useListings.ts
    types.ts
  feed/
    ComposeNote.tsx
    NoteCard.tsx
    NoteFeed.tsx
  profile/
  settings/
    NotificationSettings.tsx
    PrivacySettings.tsx
    ProfileSettings.tsx
    RelaySettings.tsx
    ThemeSettings.tsx
  trades/
    CompactFilters.tsx
    CreateOrderModal.tsx
    MobileFilters.tsx
    OrderBook.tsx
    OrderCard.tsx
    QuickFilters.tsx
    TakeOrderModal.tsx
    TradeFilters.tsx
hooks/
lib/
  utils.ts
pages/
  marketplace/
    CreateListingPage.tsx
    ListingDetailPage.tsx
    MarketplacePage.tsx
  ComposePage.tsx
  HomePage.tsx
  NotificationsPage.tsx
  ProfilePage.tsx
  SettingsPage.tsx
  TradePage.tsx
  WalletPage.tsx
stores/
  settingsStore.ts
tools/
  dynamic/
types/
utils/
app.css
App.tsx
index.css
main.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/layout/Layout.tsx">
import { Outlet, useNavigate } from 'react-router-dom';
import { Sidebar } from '@/components/navigation/Sidebar';
import { BottomNav } from '@/components/navigation/BottomNav';
import { LoginButton } from '@/features/auth/LoginButton';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { FAB } from '@/components/ui/FAB';
import { UserAvatar } from '@/components/ui/UserAvatar';
import { Bell } from 'lucide-react';
import { RelaySelector } from '@/components/navigation/RelaySelector';
export function Layout() {
  const currentUser = useNDKCurrentUser();
  const navigate = useNavigate();
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Sidebar for desktop */}
      <Sidebar />
      {/* Main content area */}
      <div className="md:ml-64 lg:ml-72 flex flex-col min-h-screen">
        {/* Mobile header */}
        <header className="md:hidden sticky top-0 z-40 bg-white/95 backdrop-blur-lg dark:bg-gray-950/95 border-b border-gray-100 dark:border-gray-800 shadow-soft">
          <div className="flex items-center justify-between px-4 py-4">
            <h1 className="text-2xl font-bold bg-gradient-to-r from-primary-600 to-primary-400 bg-clip-text text-transparent">
              Voces
            </h1>
            <div className="flex items-center gap-3">
              <RelaySelector />
              {currentUser && (
                <button
                  onClick={() => navigate('/notifications')}
                  className="relative p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-xl transition-all duration-200 hover:scale-105"
                >
                  <Bell className="w-5 h-5 text-gray-600 dark:text-gray-400" />
                  <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                </button>
              )}
              {!currentUser && <LoginButton />}
            </div>
          </div>
        </header>
        {/* Desktop header */}
        <header className="hidden md:block sticky top-0 z-40 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
          <div className="flex items-center justify-between px-6 py-4">
            <RelaySelector />
            <div className="flex-1" />
            <LoginButton />
          </div>
        </header>
        {/* Page content */}
        <main className="flex-1 pb-20 md:pb-0">
          <Outlet />
        </main>
      </div>
      {/* Bottom navigation for mobile - always show */}
      <BottomNav />
      {/* FAB for compose */}
      {currentUser && <FAB />}
    </div>
  );
}
</file>

<file path="components/navigation/BottomNav.tsx">
import { Home, Wallet, TrendingUp, Store, User } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';
import { cn } from '@/lib/utils';
const navItems = [
  { path: '/', icon: Home, label: 'Home' },
  { path: '/marketplace', icon: Store, label: 'Market' },
  { path: '/wallet', icon: Wallet, label: 'Wallet' },
  { path: '/trades', icon: TrendingUp, label: 'Trades' },
  { path: '/profile', icon: User, label: 'Profile' },
];
export function BottomNav() {
  const location = useLocation();
  return (
    <nav className="fixed bottom-0 left-0 right-0 bg-white/95 backdrop-blur-lg border-t border-gray-100 dark:bg-gray-950/95 dark:border-gray-800 md:hidden z-40 shadow-lg">
      <div className="flex items-center justify-around h-16 px-2">
        {navItems.map(({ path, icon: Icon, label }) => {
          const isActive = location.pathname === path;
          return (
            <Link
              key={path}
              to={path}
              className={cn(
                'flex flex-col items-center justify-center gap-1 w-full h-full rounded-lg transition-all duration-200',
                isActive
                  ? 'text-primary-600 dark:text-primary-400'
                  : 'text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300'
              )}
            >
              <div className={cn(
                'relative transition-all duration-200',
                isActive && 'scale-110'
              )}>
                <Icon
                  className={cn(
                    'w-6 h-6 transition-all duration-200',
                    isActive && 'drop-shadow-lg'
                  )}
                  strokeWidth={isActive ? 2.5 : 1.75}
                  fill={isActive ? 'currentColor' : 'none'}
                  fillOpacity={isActive ? 0.15 : 0}
                />
                {isActive && (
                  <div className="absolute -bottom-3 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-primary-600 dark:bg-primary-400 rounded-full animate-scale-in" />
                )}
              </div>
              <span className={cn(
                'text-[10px] font-medium transition-all duration-200',
                isActive ? 'opacity-100' : 'opacity-70'
              )}>
                {label}
              </span>
            </Link>
          );
        })}
      </div>
    </nav>
  );
}
</file>

<file path="components/navigation/RelaySelector.tsx">
import { ChevronDown, Globe, Circle, Check } from "lucide-react";
import { useState, useRef, useEffect } from "react";
import { useSettingsStore } from "@/stores/settingsStore";
import { useNavigate } from "react-router-dom";
export function RelaySelector() {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();
  const { relays, selectedRelay, setSelectedRelay } = useSettingsStore();
  const enabledRelays = relays.filter(r => r.enabled);
  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  const handleRelaySelect = (relayUrl: string | null) => {
    setSelectedRelay(relayUrl);
    setIsOpen(false);
  };
  const getRelayDisplayName = (url: string) => {
    try {
      const urlObj = new URL(url);
      return urlObj.hostname.replace("wss://", "").replace("ws://", "");
    } catch {
      return url.replace("wss://", "").replace("ws://", "");
    }
  };
  const currentRelayDisplay = selectedRelay
    ? getRelayDisplayName(selectedRelay)
    : `All Relays (${enabledRelays.length})`;
  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-1.5 px-2 py-1 text-sm text-gray-600 dark:text-gray-400
                   hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
      >
        <Globe className="h-4 w-4" />
        <span className="max-w-[140px] truncate font-normal">{currentRelayDisplay}</span>
        <ChevronDown className={`h-3 w-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      {isOpen && (
        <div className="absolute top-full mt-2 right-0 w-64 bg-white dark:bg-gray-800 rounded-lg shadow-lg
                        border border-gray-200 dark:border-gray-700 overflow-hidden z-50">
          <div className="py-1">
            {/* All Relays option */}
            <button
              onClick={() => handleRelaySelect(null)}
              className="w-full flex items-center justify-between px-4 py-2 text-sm text-gray-700 dark:text-gray-200
                         hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            >
              <div className="flex items-center gap-2">
                <Globe className="h-4 w-4 text-blue-500" />
                <span>All Relays ({enabledRelays.length})</span>
              </div>
              {!selectedRelay && <Check className="h-4 w-4 text-green-500" />}
            </button>
            {/* Divider */}
            <div className="h-px bg-gray-200 dark:bg-gray-700 my-1" />
            {/* Individual relays */}
            {enabledRelays.length > 0 ? (
              enabledRelays.map((relay) => (
                <button
                  key={relay.url}
                  onClick={() => handleRelaySelect(relay.url)}
                  className="w-full flex items-center justify-between px-4 py-2 text-sm text-gray-700 dark:text-gray-200
                             hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
                >
                  <div className="flex items-center gap-2">
                    <Circle
                      className={`h-2 w-2 ${relay.write && relay.read ? 'fill-green-500 text-green-500' :
                                             relay.read ? 'fill-blue-500 text-blue-500' :
                                             'fill-orange-500 text-orange-500'}`}
                    />
                    <span className="truncate">{getRelayDisplayName(relay.url)}</span>
                  </div>
                  {selectedRelay === relay.url && <Check className="h-4 w-4 text-green-500" />}
                </button>
              ))
            ) : (
              <div className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">
                No relays enabled
              </div>
            )}
            {/* Divider */}
            <div className="h-px bg-gray-200 dark:bg-gray-700 my-1" />
            {/* Settings link */}
            <button
              onClick={() => {
                setIsOpen(false);
                navigate('/settings');
              }}
              className="w-full flex items-center px-4 py-2 text-sm text-blue-600 dark:text-blue-400
                         hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            >
              Manage Relays →
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="components/navigation/Sidebar.tsx">
import { Home, Edit3, Bell, User, Wallet, TrendingUp, Settings, ShoppingBag } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';
import { cn } from '@/lib/utils';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { WalletWidget } from '../wallet/WalletWidget';
import { UserAvatar } from '../ui/UserAvatar';
const navItems = [
  { path: '/', icon: Home, label: 'Home' },
  { path: '/compose', icon: Edit3, label: 'Compose' },
  { path: '/notifications', icon: Bell, label: 'Notifications' },
  { path: '/profile', icon: User, label: 'Profile' },
  { path: '/marketplace', icon: ShoppingBag, label: 'Marketplace' },
  { path: '/wallet', icon: Wallet, label: 'Wallet' },
  { path: '/trades', icon: TrendingUp, label: 'P2P Trades' },
];
export function Sidebar() {
  const location = useLocation();
  const currentUser = useNDKCurrentUser();
  const profile = useProfile(currentUser?.pubkey);
  return (
    <aside className="hidden md:flex md:w-64 lg:w-72 flex-col h-screen fixed left-0 top-0 bg-white dark:bg-gray-950 border-r border-gray-200 dark:border-gray-800">
      <div className="flex items-center gap-3 px-6 py-6 border-b border-gray-200 dark:border-gray-800">
        <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
          Voces
        </h1>
      </div>
      <nav className="flex-1 px-3 py-6">
        <div className="space-y-1">
          {navItems.map(({ path, icon: Icon, label }) => {
            const isActive = location.pathname === path;
            return (
              <Link
                key={path}
                to={path}
                className={cn(
                  'flex items-center gap-3 px-3 py-2.5 rounded-lg transition-all font-medium',
                  isActive 
                    ? 'bg-purple-50 text-purple-700 dark:bg-purple-950/50 dark:text-purple-400' 
                    : 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-900'
                )}
              >
                <Icon className="w-5 h-5" strokeWidth={isActive ? 2.5 : 2} />
                <span>{label}</span>
              </Link>
            );
          })}
        </div>
      </nav>
      {/* Wallet Widget */}
      <div className="px-3 mb-4">
        <WalletWidget />
      </div>
      {currentUser && (
        <div className="border-t border-gray-200 dark:border-gray-800 p-4">
          <div className="flex items-center gap-3 mb-4">
            <UserAvatar pubkey={currentUser.pubkey} size="md" />
            <div className="flex-1 min-w-0">
              <p className="font-medium text-sm truncate text-gray-900 dark:text-gray-100">
                {profile?.name || 'Anonymous'}
              </p>
              <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
                {profile?.nip05 || currentUser.npub?.slice(0, 16) + '...'}
              </p>
            </div>
          </div>
          <div className="space-y-1">
            <Link
              to="/settings"
              className="flex items-center gap-3 px-3 py-2 rounded-lg text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-900 transition-colors"
            >
              <Settings className="w-4 h-4" />
              <span className="text-sm">Settings</span>
            </Link>
          </div>
        </div>
      )}
    </aside>
  );
}
</file>

<file path="components/ui/Avatar.tsx">
import { User } from 'lucide-react';
import { cn } from '@/lib/utils';
interface AvatarProps {
  src?: string | null;
  alt?: string;
  name?: string | null;
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  className?: string;
}
const sizeClasses = {
  xs: 'w-6 h-6 text-xs',
  sm: 'w-8 h-8 text-sm',
  md: 'w-10 h-10 text-base',
  lg: 'w-12 h-12 text-lg',
  xl: 'w-16 h-16 text-xl',
};
const iconSizes = {
  xs: 'w-3 h-3',
  sm: 'w-4 h-4',
  md: 'w-5 h-5',
  lg: 'w-6 h-6',
  xl: 'w-8 h-8',
};
export function Avatar({ src, alt, name, size = 'md', className }: AvatarProps) {
  const sizeClass = sizeClasses[size];
  const iconSize = iconSizes[size];
  if (src) {
    return (
      <img
        src={src}
        alt={alt || name || 'Avatar'}
        className={cn(
          'rounded-full object-cover',
          sizeClass,
          className
        )}
      />
    );
  }
  // If no image, show initial or user icon
  const initial = name?.charAt(0)?.toUpperCase();
  if (initial) {
    return (
      <div
        className={cn(
          'rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-semibold',
          sizeClass,
          className
        )}
      >
        {initial}
      </div>
    );
  }
  // Fallback to user icon
  return (
    <div
      className={cn(
        'rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center',
        sizeClass,
        className
      )}
    >
      <User className={cn('text-gray-500 dark:text-gray-400', iconSize)} />
    </div>
  );
}
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"
export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"
const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"
const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"
const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"
const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"
const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="components/ui/FAB.tsx">
import { motion } from 'framer-motion';
import { Plus, Edit3, TrendingUp, ShoppingBag, Wallet } from 'lucide-react';
import { useLocation } from 'react-router-dom';
import { cn } from '@/lib/utils';
import { useState } from 'react';
import { CreateOrderModal } from '@/features/trades/CreateOrderModal';
import { useNavigate } from 'react-router-dom';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
interface FABProps {
  className?: string;
  icon?: 'plus' | 'edit';
}
export function FAB({ className }: FABProps) {
  const navigate = useNavigate();
  const location = useLocation();
  const currentUser = useNDKCurrentUser();
  const [showCreateOrderModal, setShowCreateOrderModal] = useState(false);
  // Determine FAB action and icon based on current route
  const getFABConfig = () => {
    const path = location.pathname;
    if (path.startsWith('/trades')) {
      return {
        icon: TrendingUp,
        label: 'Create Trade',
        action: () => setShowCreateOrderModal(true),
        requiresAuth: true
      };
    }
    if (path.startsWith('/marketplace')) {
      return {
        icon: ShoppingBag,
        label: 'List Item',
        action: () => navigate('/marketplace/create'),
        requiresAuth: true
      };
    }
    if (path.startsWith('/wallet')) {
      return {
        icon: Plus,
        label: 'Add Funds',
        action: () => {}, // TODO: Implement wallet action
        requiresAuth: false
      };
    }
    // Default to compose for feed/home
    return {
      icon: Edit3,
      label: 'Compose',
      action: () => navigate('/compose'),
      requiresAuth: true
    };
  };
  const config = getFABConfig();
  const Icon = config.icon;
  // Don't show FAB if auth is required but user not logged in
  if (config.requiresAuth && !currentUser) {
    return null;
  }
  const handleClick = () => {
    config.action();
  };
  return (
    <>
      <motion.button
        onClick={handleClick}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
        initial={{ scale: 0 }}
        animate={{ scale: 1 }}
        transition={{ type: "spring", stiffness: 300, damping: 20 }}
        className={cn(
          "fixed bottom-20 right-4 z-40",
          "w-14 h-14 rounded-full",
          "bg-gradient-to-br from-purple-600 to-pink-600",
          "shadow-lg shadow-purple-500/25",
          "flex items-center justify-center",
          "md:hidden", // Only show on mobile
          className
        )}
        aria-label={config.label}
      >
        <Icon className="w-6 h-6 text-white" />
      </motion.button>
      {/* Modal for trades page */}
      {showCreateOrderModal && (
        <CreateOrderModal onClose={() => setShowCreateOrderModal(false)} />
      )}
    </>
  );
}
</file>

<file path="components/ui/input.tsx">
import * as React from 'react';
import { cn } from '@/lib/utils';
export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}
const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus-visible:ring-purple-400',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Input.displayName = 'Input';
export { Input };
</file>

<file path="components/ui/label.tsx">
import * as React from 'react';
import { cn } from '@/lib/utils';
export interface LabelProps
  extends React.LabelHTMLAttributes<HTMLLabelElement> {}
const Label = React.forwardRef<HTMLLabelElement, LabelProps>(
  ({ className, ...props }, ref) => {
    return (
      <label
        ref={ref}
        className={cn(
          'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
          className
        )}
        {...props}
      />
    );
  }
);
Label.displayName = 'Label';
export { Label };
</file>

<file path="components/ui/select.tsx">
import * as React from 'react';
import { ChevronDown } from 'lucide-react';
import { cn } from '@/lib/utils';
const SelectContext = React.createContext<{
  value: string;
  onValueChange: (value: string) => void;
  open: boolean;
  setOpen: (open: boolean) => void;
}>({
  value: '',
  onValueChange: () => {},
  open: false,
  setOpen: () => {},
});
interface SelectProps {
  value?: string;
  onValueChange?: (value: string) => void;
  children: React.ReactNode;
}
export function Select({ value = '', onValueChange = () => {}, children }: SelectProps) {
  const [open, setOpen] = React.useState(false);
  return (
    <SelectContext.Provider value={{ value, onValueChange, open, setOpen }}>
      <div className="relative">
        {children}
      </div>
    </SelectContext.Provider>
  );
}
interface SelectTriggerProps {
  className?: string;
  children: React.ReactNode;
}
export const SelectTrigger = React.forwardRef<HTMLButtonElement, SelectTriggerProps>(
  ({ className, children, ...props }, ref) => {
    const { open, setOpen } = React.useContext(SelectContext);
    return (
      <button
        ref={ref}
        type="button"
        onClick={() => setOpen(!open)}
        className={cn(
          'flex h-10 w-full items-center justify-between rounded-md border border-gray-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus:ring-purple-400',
          className
        )}
        {...props}
      >
        {children}
        <ChevronDown className="h-4 w-4 opacity-50" />
      </button>
    );
  }
);
SelectTrigger.displayName = 'SelectTrigger';
export function SelectValue({ placeholder }: { placeholder?: string }) {
  const { value } = React.useContext(SelectContext);
  return <span>{value || placeholder || 'Select...'}</span>;
}
interface SelectContentProps {
  className?: string;
  children: React.ReactNode;
}
export function SelectContent({ className, children }: SelectContentProps) {
  const { open, setOpen } = React.useContext(SelectContext);
  const ref = React.useRef<HTMLDivElement>(null);
  React.useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setOpen(false);
      }
    }
    if (open) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [open, setOpen]);
  if (!open) return null;
  return (
    <div
      ref={ref}
      className={cn(
        'absolute z-50 mt-1 max-h-60 w-full overflow-auto rounded-md border border-gray-200 bg-white py-1 text-sm shadow-lg dark:border-gray-800 dark:bg-gray-950',
        className
      )}
    >
      {children}
    </div>
  );
}
interface SelectItemProps {
  value: string;
  className?: string;
  children: React.ReactNode;
}
export function SelectItem({ value, className, children }: SelectItemProps) {
  const { value: selectedValue, onValueChange, setOpen } = React.useContext(SelectContext);
  const isSelected = selectedValue === value;
  return (
    <div
      onClick={() => {
        onValueChange(value);
        setOpen(false);
      }}
      className={cn(
        'relative cursor-pointer select-none px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-800',
        isSelected && 'bg-gray-100 dark:bg-gray-800',
        className
      )}
    >
      {children}
    </div>
  );
}
</file>

<file path="components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"
const Tabs = TabsPrimitive.Root
const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-500 dark:bg-gray-800 dark:text-gray-400",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName
const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:text-gray-950 data-[state=active]:shadow-sm dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300 dark:data-[state=active]:bg-gray-950 dark:data-[state=active]:text-gray-50",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName
const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 dark:ring-offset-gray-950 dark:focus-visible:ring-gray-300",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName
export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from 'react';
import { cn } from '@/lib/utils';
export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}
const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus-visible:ring-purple-400',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';
export { Textarea };
</file>

<file path="components/ui/UserAvatar.tsx">
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { Avatar } from './Avatar';
interface UserAvatarProps {
  pubkey?: string;
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  className?: string;
}
export function UserAvatar({ pubkey, size = 'md', className }: UserAvatarProps) {
  const profile = useProfile(pubkey);
  if (!pubkey) {
    return <Avatar size={size} className={className} />;
  }
  return (
    <Avatar
      src={profile?.picture}
      alt={profile?.name || 'User'}
      name={profile?.name}
      size={size}
      className={className}
    />
  );
}
</file>

<file path="components/wallet/index.ts">
export { Wallet } from './Wallet';
export type { WalletVariant } from './Wallet';
export { WalletBalance } from './WalletBalance';
export { MintConfiguration } from './MintConfiguration';
export { TransactionButton } from './TransactionButton';
export { QRScanner } from './QRScanner';
export { TransactionModal } from './TransactionModal';
export { ProfessionalWallet } from './ProfessionalWallet';
</file>

<file path="components/wallet/MintConfiguration.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Settings, Plus, Trash2, Info, Check, X } from 'lucide-react';
interface Mint {
  id: string;
  url: string;
  name: string;
  balance?: number;
  isActive: boolean;
}
interface MintConfigurationProps {
  variant?: 'minimal' | 'detailed' | 'card';
}
export function MintConfiguration({ variant = 'minimal' }: MintConfigurationProps) {
  const [mints, setMints] = useState<Mint[]>([
    { id: '1', url: 'https://mint.minibits.cash', name: 'Minibits', balance: 10000, isActive: true },
    { id: '2', url: 'https://stablenut.umint.cash', name: 'Stablenut', balance: 5000, isActive: false },
  ]);
  const [isExpanded, setIsExpanded] = useState(false);
  const [newMintUrl, setNewMintUrl] = useState('');
  const [showTooltip, setShowTooltip] = useState(false);
  const addMint = () => {
    if (newMintUrl) {
      const newMint: Mint = {
        id: Date.now().toString(),
        url: newMintUrl,
        name: new URL(newMintUrl).hostname,
        balance: 0,
        isActive: false
      };
      setMints([...mints, newMint]);
      setNewMintUrl('');
    }
  };
  const removeMint = (id: string) => {
    setMints(mints.filter(m => m.id !== id));
  };
  const toggleMint = (id: string) => {
    setMints(mints.map(m => 
      m.id === id ? { ...m, isActive: !m.isActive } : m
    ));
  };
  if (variant === 'card') {
    return (
      <motion.div
        className="bg-white rounded-2xl shadow-sm border border-gray-100 p-6"
        whileHover={{ y: -2 }}
        transition={{ type: "spring", stiffness: 300 }}
      >
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium text-gray-900">Cashu Mints</h3>
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="p-2 hover:bg-gray-50 rounded-lg transition-colors"
          >
            <Settings className="w-5 h-5 text-gray-600" />
          </button>
        </div>
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="space-y-3 overflow-hidden"
            >
              {mints.map((mint) => (
                <MintItem
                  key={mint.id}
                  mint={mint}
                  onToggle={() => toggleMint(mint.id)}
                  onRemove={() => removeMint(mint.id)}
                />
              ))}
              <AddMintInput
                value={newMintUrl}
                onChange={setNewMintUrl}
                onAdd={addMint}
              />
            </motion.div>
          )}
        </AnimatePresence>
        {!isExpanded && (
          <div className="text-sm text-gray-600">
            {mints.filter(m => m.isActive).length} active mints
          </div>
        )}
      </motion.div>
    );
  }
  if (variant === 'detailed') {
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <h3 className="text-sm font-medium text-gray-700">Mints</h3>
            <button
              onMouseEnter={() => setShowTooltip(true)}
              onMouseLeave={() => setShowTooltip(false)}
              className="relative"
            >
              <Info className="w-4 h-4 text-gray-400" />
              <AnimatePresence>
                {showTooltip && (
                  <motion.div
                    initial={{ opacity: 0, y: 5 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: 5 }}
                    className="absolute left-6 top-0 bg-gray-800 text-white text-xs px-2 py-1 rounded-md whitespace-nowrap z-10"
                  >
                    Cashu mint (server)
                  </motion.div>
                )}
              </AnimatePresence>
            </button>
          </div>
          <button
            onClick={() => setIsExpanded(!isExpanded)}
            className="text-sm text-blue-600 hover:text-blue-700"
          >
            {isExpanded ? 'Close' : 'Configure'}
          </button>
        </div>
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="space-y-2 overflow-hidden"
            >
              {mints.map((mint) => (
                <MintItem
                  key={mint.id}
                  mint={mint}
                  onToggle={() => toggleMint(mint.id)}
                  onRemove={() => removeMint(mint.id)}
                  variant="detailed"
                />
              ))}
              <AddMintInput
                value={newMintUrl}
                onChange={setNewMintUrl}
                onAdd={addMint}
                variant="inline"
              />
            </motion.div>
          )}
        </AnimatePresence>
        {!isExpanded && (
          <div className="flex gap-2 flex-wrap">
            {mints.filter(m => m.isActive).map((mint) => (
              <span
                key={mint.id}
                className="text-xs bg-green-50 text-green-700 px-2 py-1 rounded-full"
              >
                {mint.name}
              </span>
            ))}
          </div>
        )}
      </div>
    );
  }
  // Minimal variant (default)
  return (
    <button
      onClick={() => setIsExpanded(!isExpanded)}
      onMouseEnter={() => setShowTooltip(true)}
      onMouseLeave={() => setShowTooltip(false)}
      className="relative flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
    >
      <Settings className="w-4 h-4" />
      <span>Mint</span>
      <AnimatePresence>
        {showTooltip && (
          <motion.div
            initial={{ opacity: 0, y: 5 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 5 }}
            className="absolute left-0 top-10 bg-gray-800 text-white text-xs px-2 py-1 rounded-md whitespace-nowrap z-10"
          >
            Cashu mint (server)
          </motion.div>
        )}
      </AnimatePresence>
    </button>
  );
}
interface MintItemProps {
  mint: Mint;
  onToggle: () => void;
  onRemove: () => void;
  variant?: 'compact' | 'detailed';
}
function MintItem({ mint, onToggle, onRemove, variant = 'compact' }: MintItemProps) {
  if (variant === 'detailed') {
    return (
      <motion.div
        initial={{ x: -10, opacity: 0 }}
        animate={{ x: 0, opacity: 1 }}
        className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
      >
        <div className="flex items-center gap-3">
          <button
            onClick={onToggle}
            className={`w-5 h-5 rounded-full border-2 flex items-center justify-center transition-all ${
              mint.isActive
                ? 'bg-green-500 border-green-500'
                : 'bg-white border-gray-300'
            }`}
          >
            {mint.isActive && <Check className="w-3 h-3 text-white" />}
          </button>
          <div>
            <div className="text-sm font-medium text-gray-900">{mint.name}</div>
            <div className="text-xs text-gray-500">{mint.url}</div>
            {mint.balance && (
              <div className="text-xs text-gray-600 mt-1">
                Balance: {mint.balance.toLocaleString()} sats
              </div>
            )}
          </div>
        </div>
        <button
          onClick={onRemove}
          className="p-1 hover:bg-gray-200 rounded transition-colors"
        >
          <Trash2 className="w-4 h-4 text-gray-500" />
        </button>
      </motion.div>
    );
  }
  return (
    <motion.div
      initial={{ x: -10, opacity: 0 }}
      animate={{ x: 0, opacity: 1 }}
      className="flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg"
    >
      <div className="flex items-center gap-2">
        <button
          onClick={onToggle}
          className={`w-4 h-4 rounded-full border-2 ${
            mint.isActive
              ? 'bg-green-500 border-green-500'
              : 'bg-white border-gray-300'
          }`}
        />
        <span className="text-sm text-gray-700">{mint.name}</span>
      </div>
      <button
        onClick={onRemove}
        className="p-1 hover:bg-gray-100 rounded"
      >
        <X className="w-3 h-3 text-gray-500" />
      </button>
    </motion.div>
  );
}
interface AddMintInputProps {
  value: string;
  onChange: (value: string) => void;
  onAdd: () => void;
  variant?: 'default' | 'inline';
}
function AddMintInput({ value, onChange, onAdd, variant = 'default' }: AddMintInputProps) {
  if (variant === 'inline') {
    return (
      <div className="flex gap-2">
        <input
          type="url"
          value={value}
          onChange={(e) => onChange(e.target.value)}
          placeholder="https://mint.example.com"
          className="flex-1 px-3 py-2 text-sm border border-gray-200 rounded-lg focus:outline-none focus:border-blue-500"
        />
        <button
          onClick={onAdd}
          disabled={!value}
          className="px-3 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Add
        </button>
      </div>
    );
  }
  return (
    <div className="flex items-center gap-2 p-2 border border-dashed border-gray-300 rounded-lg">
      <Plus className="w-4 h-4 text-gray-400" />
      <input
        type="url"
        value={value}
        onChange={(e) => onChange(e.target.value)}
        onKeyDown={(e) => e.key === 'Enter' && onAdd()}
        placeholder="Add mint URL"
        className="flex-1 text-sm bg-transparent focus:outline-none"
      />
    </div>
  );
}
</file>

<file path="components/wallet/ProfessionalWallet.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  ArrowUpRight,
  ArrowDownLeft,
  Zap,
  Coffee,
  TrendingUp,
  TrendingDown,
  Clock,
  MoreVertical,
  ChevronRight,
  Activity,
  Shield,
  Eye,
  EyeOff
} from 'lucide-react';
interface Transaction {
  id: string;
  type: 'sent' | 'received' | 'zap';
  description: string;
  amount: number;
  timestamp: string;
  icon?: 'zap' | 'coffee' | 'default';
  to?: string;
  from?: string;
  status?: 'pending' | 'completed';
}
export function ProfessionalWallet() {
  const [balance] = useState(21000);
  const [balanceHidden, setBalanceHidden] = useState(false);
  const [dailyChange] = useState(2500);
  const [selectedTab, setSelectedTab] = useState<'activity' | 'stats'>('activity');
  const transactions: Transaction[] = [
    {
      id: '1',
      type: 'zap',
      description: 'Zapped @jack',
      amount: -100,
      timestamp: '1h ago',
      icon: 'zap',
      to: 'jack',
      status: 'completed'
    },
    {
      id: '2',
      type: 'received',
      description: 'Payment received',
      amount: 500,
      timestamp: '2h ago',
      from: 'anon',
      status: 'completed'
    },
    {
      id: '3',
      type: 'sent',
      description: 'Coffee payment',
      amount: -250,
      timestamp: '3h ago',
      icon: 'coffee',
      to: 'Blue Bottle Coffee',
      status: 'completed'
    },
    {
      id: '4',
      type: 'zap',
      description: 'Zapped @fiatjaf',
      amount: -1000,
      timestamp: '1d ago',
      icon: 'zap',
      to: 'fiatjaf',
      status: 'completed'
    }
  ];
  const getTransactionIcon = (transaction: Transaction) => {
    if (transaction.icon === 'zap') {
      return <Zap className="w-5 h-5" />;
    }
    if (transaction.icon === 'coffee') {
      return <Coffee className="w-5 h-5" />;
    }
    if (transaction.type === 'sent') {
      return <ArrowUpRight className="w-5 h-5" />;
    }
    return <ArrowDownLeft className="w-5 h-5" />;
  };
  const getTransactionColor = (transaction: Transaction) => {
    if (transaction.type === 'received') {
      return 'text-emerald-400';
    }
    if (transaction.type === 'zap') {
      return 'text-purple-400';
    }
    return 'text-orange-400';
  };
  const getIconBgColor = (transaction: Transaction) => {
    if (transaction.type === 'received') {
      return 'bg-emerald-400/10 border-emerald-400/20';
    }
    if (transaction.type === 'zap') {
      return 'bg-purple-400/10 border-purple-400/20';
    }
    return 'bg-orange-400/10 border-orange-400/20';
  };
  return (
    <div className="w-full">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        {/* Balance Section */}
        <div className="px-6 py-8">
          <div className="text-center">
            <div className="text-xs uppercase tracking-wider text-gray-500 mb-2 flex items-center justify-center gap-2">
              <span>Total Balance</span>
              <button
                onClick={() => setBalanceHidden(!balanceHidden)}
                className="p-1 hover:bg-gray-800/50 rounded transition-all"
              >
                {balanceHidden ? (
                  <Eye className="w-3 h-3" />
                ) : (
                  <EyeOff className="w-3 h-3" />
                )}
              </button>
            </div>
            <motion.div
              key={balanceHidden ? 'hidden' : 'visible'}
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="mb-3"
            >
              {balanceHidden ? (
                <div className="text-4xl font-light text-gray-600">•••••</div>
              ) : (
                <>
                  <div className="text-5xl font-light text-white tracking-tight">
                    {balance.toLocaleString()}
                  </div>
                  <div className="text-sm text-gray-400 mt-1">sats</div>
                </>
              )}
            </motion.div>
            <div className={`inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-medium ${
              dailyChange >= 0
                ? 'bg-emerald-400/10 text-emerald-400 border border-emerald-400/20'
                : 'bg-red-400/10 text-red-400 border border-red-400/20'
            }`}>
              {dailyChange >= 0 ? (
                <TrendingUp className="w-3 h-3" />
              ) : (
                <TrendingDown className="w-3 h-3" />
              )}
              <span>{dailyChange >= 0 ? '+' : ''}{dailyChange.toLocaleString()} today</span>
            </div>
          </div>
          {/* Action Buttons */}
          <div className="flex gap-3 mt-8">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="flex-1 bg-gradient-to-r from-purple-500 to-purple-600 text-white py-3.5 px-6 rounded-2xl font-medium shadow-lg shadow-purple-500/20 hover:shadow-purple-500/30 transition-all flex items-center justify-center gap-2"
            >
              <ArrowUpRight className="w-4 h-4" />
              Send
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="flex-1 bg-gray-800 hover:bg-gray-700 text-white py-3.5 px-6 rounded-2xl font-medium transition-all flex items-center justify-center gap-2 border border-gray-700"
            >
              <ArrowDownLeft className="w-4 h-4" />
              Receive
            </motion.button>
          </div>
        </div>
        {/* Quick Actions */}
        <div className="px-6 pb-4">
          <div className="grid grid-cols-2 gap-3">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="bg-gray-800/50 hover:bg-gray-800 border border-gray-700/50 rounded-xl p-3 flex items-center justify-between transition-all"
            >
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 bg-yellow-400/10 rounded-lg flex items-center justify-center">
                  <Activity className="w-4 h-4 text-yellow-400" />
                </div>
                <span className="text-sm text-gray-300">Mint</span>
              </div>
              <ChevronRight className="w-4 h-4 text-gray-500" />
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              className="bg-gray-800/50 hover:bg-gray-800 border border-gray-700/50 rounded-xl p-3 flex items-center justify-between transition-all"
            >
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 bg-blue-400/10 rounded-lg flex items-center justify-center">
                  <Shield className="w-4 h-4 text-blue-400" />
                </div>
                <span className="text-sm text-gray-300">Backup</span>
              </div>
              <ChevronRight className="w-4 h-4 text-gray-500" />
            </motion.button>
          </div>
        </div>
        {/* Tabs */}
        <div className="px-6">
          <div className="flex gap-1 p-1 bg-gray-800/30 rounded-xl">
            <button
              onClick={() => setSelectedTab('activity')}
              className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all ${
                selectedTab === 'activity'
                  ? 'bg-gray-700 text-white'
                  : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              Recent Activity
            </button>
            <button
              onClick={() => setSelectedTab('stats')}
              className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all ${
                selectedTab === 'stats'
                  ? 'bg-gray-700 text-white'
                  : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              Statistics
            </button>
          </div>
        </div>
        {/* Transactions List */}
        <div className="px-6 py-4">
          <AnimatePresence mode="wait">
            {selectedTab === 'activity' && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="space-y-3"
              >
                {transactions.map((transaction, index) => (
                  <motion.div
                    key={transaction.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.05 }}
                    whileHover={{ x: 4 }}
                    className="flex items-center justify-between p-3 rounded-xl hover:bg-gray-800/30 transition-all cursor-pointer group"
                  >
                    <div className="flex items-center gap-3">
                      <div className={`w-10 h-10 rounded-xl flex items-center justify-center border ${getIconBgColor(transaction)}`}>
                        <div className={getTransactionColor(transaction)}>
                          {getTransactionIcon(transaction)}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm font-medium text-gray-200">
                          {transaction.description}
                        </div>
                        <div className="flex items-center gap-2 text-xs text-gray-500">
                          <Clock className="w-3 h-3" />
                          <span>{transaction.timestamp}</span>
                          {transaction.status === 'pending' && (
                            <span className="px-1.5 py-0.5 bg-yellow-400/10 text-yellow-400 rounded text-xs">
                              Pending
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className={`text-sm font-semibold ${
                        transaction.amount > 0 ? 'text-emerald-400' : 'text-gray-300'
                      }`}>
                        {transaction.amount > 0 ? '+' : ''}{Math.abs(transaction.amount).toLocaleString()} sats
                      </div>
                      <div className="text-xs text-gray-500 opacity-0 group-hover:opacity-100 transition-opacity">
                        View details
                      </div>
                    </div>
                  </motion.div>
                ))}
              </motion.div>
            )}
            {selectedTab === 'stats' && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                className="space-y-4"
              >
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50">
                    <div className="text-xs text-gray-500 mb-1">Total Sent</div>
                    <div className="text-lg font-semibold text-orange-400">1,350 sats</div>
                    <div className="text-xs text-gray-500 mt-1">4 transactions</div>
                  </div>
                  <div className="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50">
                    <div className="text-xs text-gray-500 mb-1">Total Received</div>
                    <div className="text-lg font-semibold text-emerald-400">3,850 sats</div>
                    <div className="text-xs text-gray-500 mt-1">8 transactions</div>
                  </div>
                </div>
                <div className="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50">
                  <div className="flex items-center justify-between mb-3">
                    <div className="text-xs text-gray-500">Weekly Activity</div>
                    <TrendingUp className="w-4 h-4 text-emerald-400" />
                  </div>
                  <div className="flex items-end gap-1 h-12">
                    {[40, 65, 30, 80, 45, 90, 70].map((height, i) => (
                      <div
                        key={i}
                        className="flex-1 bg-gradient-to-t from-purple-500 to-purple-400 rounded-t"
                        style={{ height: `${height}%` }}
                      />
                    ))}
                  </div>
                  <div className="flex justify-between mt-2 text-xs text-gray-500">
                    <span>Mon</span>
                    <span>Sun</span>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
        {/* Footer */}
        <div className="px-6 pb-6">
          <motion.button
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className="w-full py-3 bg-gray-800/50 hover:bg-gray-800 border border-gray-700/50 rounded-xl text-sm text-gray-400 hover:text-gray-300 transition-all"
          >
            View All Transactions
          </motion.button>
        </div>
      </motion.div>
    </div>
  );
}
</file>

<file path="components/wallet/QRScanner.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Camera, X, Clipboard, QrCode } from 'lucide-react';
interface QRScannerProps {
  onScan: (data: string) => void;
  variant?: 'minimal' | 'detailed' | 'modal';
}
export function QRScanner({ onScan, variant = 'minimal' }: QRScannerProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [pasteValue, setPasteValue] = useState('');
  const [showPasteInput, setShowPasteInput] = useState(false);
  const handlePaste = () => {
    if (pasteValue) {
      onScan(pasteValue);
      setPasteValue('');
      setShowPasteInput(false);
      setIsOpen(false);
    }
  };
  const handleQuickPaste = async () => {
    try {
      const text = await navigator.clipboard.readText();
      if (text) {
        onScan(text);
        setIsOpen(false);
      }
    } catch (err) {
      setShowPasteInput(true);
    }
  };
  if (variant === 'modal') {
    return (
      <>
        <motion.button
          onClick={() => setIsOpen(true)}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          className="p-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 transition-colors"
        >
          <QrCode className="w-5 h-5" />
        </motion.button>
        <AnimatePresence>
          {isOpen && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
              onClick={() => setIsOpen(false)}
            >
              <motion.div
                initial={{ scale: 0.9, y: 20 }}
                animate={{ scale: 1, y: 0 }}
                exit={{ scale: 0.9, y: 20 }}
                className="bg-white rounded-3xl p-6 max-w-md w-full shadow-2xl"
                onClick={(e) => e.stopPropagation()}
              >
                <div className="flex justify-between items-center mb-6">
                  <h3 className="text-xl font-semibold text-gray-900">Scan or Paste</h3>
                  <button
                    onClick={() => setIsOpen(false)}
                    className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  >
                    <X className="w-5 h-5 text-gray-500" />
                  </button>
                </div>
                <div className="space-y-4">
                  <div className="bg-gray-100 rounded-2xl p-8 flex flex-col items-center justify-center">
                    <Camera className="w-12 h-12 text-gray-400 mb-3" />
                    <p className="text-sm text-gray-600 text-center">
                      Camera access needed for QR scanning
                    </p>
                    <button className="mt-4 text-sm text-purple-600 hover:text-purple-700">
                      Enable Camera
                    </button>
                  </div>
                  <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                      <div className="w-full border-t border-gray-200" />
                    </div>
                    <div className="relative flex justify-center text-sm">
                      <span className="bg-white px-3 text-gray-500">or</span>
                    </div>
                  </div>
                  <div className="space-y-3">
                    <button
                      onClick={handleQuickPaste}
                      className="w-full flex items-center justify-center gap-2 px-4 py-3 bg-gray-50 hover:bg-gray-100 rounded-xl transition-colors"
                    >
                      <Clipboard className="w-4 h-4 text-gray-600" />
                      <span className="text-gray-700">Paste from Clipboard</span>
                    </button>
                    <AnimatePresence>
                      {showPasteInput && (
                        <motion.div
                          initial={{ height: 0, opacity: 0 }}
                          animate={{ height: "auto", opacity: 1 }}
                          exit={{ height: 0, opacity: 0 }}
                          className="overflow-hidden"
                        >
                          <input
                            type="text"
                            value={pasteValue}
                            onChange={(e) => setPasteValue(e.target.value)}
                            onKeyDown={(e) => e.key === 'Enter' && handlePaste()}
                            placeholder="Paste invoice here..."
                            className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:border-purple-500"
                            autoFocus
                          />
                          <button
                            onClick={handlePaste}
                            disabled={!pasteValue}
                            className="w-full mt-3 px-4 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                          >
                            Process Invoice
                          </button>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </>
    );
  }
  if (variant === 'detailed') {
    return (
      <div className="space-y-3">
        <button
          onClick={() => setShowPasteInput(!showPasteInput)}
          className="w-full flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl hover:from-purple-100 hover:to-pink-100 transition-all"
        >
          <div className="flex items-center gap-3">
            <QrCode className="w-5 h-5 text-purple-600" />
            <span className="text-gray-700 font-medium">Scan QR Code</span>
          </div>
          <span className="text-xs text-gray-500">Tap to paste</span>
        </button>
        <AnimatePresence>
          {showPasteInput && (
            <motion.div
              initial={{ height: 0, opacity: 0 }}
              animate={{ height: "auto", opacity: 1 }}
              exit={{ height: 0, opacity: 0 }}
              className="overflow-hidden"
            >
              <div className="flex gap-2">
                <input
                  type="text"
                  value={pasteValue}
                  onChange={(e) => setPasteValue(e.target.value)}
                  placeholder="Paste Lightning invoice..."
                  className="flex-1 px-3 py-2 text-sm border border-gray-200 rounded-lg focus:outline-none focus:border-purple-500"
                />
                <button
                  onClick={handlePaste}
                  disabled={!pasteValue}
                  className="px-4 py-2 bg-purple-600 text-white rounded-lg text-sm hover:bg-purple-700 disabled:opacity-50"
                >
                  Pay
                </button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    );
  }
  // Minimal variant (default)
  return (
    <div className="relative">
      <button
        onClick={() => setShowPasteInput(!showPasteInput)}
        className="flex items-center gap-2 px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
      >
        <Camera className="w-4 h-4" />
        <span>Scan</span>
      </button>
      <AnimatePresence>
        {showPasteInput && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className="absolute top-full left-0 mt-2 p-3 bg-white rounded-lg shadow-lg border border-gray-200 z-10"
          >
            <div className="flex gap-2">
              <input
                type="text"
                value={pasteValue}
                onChange={(e) => setPasteValue(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && handlePaste()}
                placeholder="Paste invoice"
                className="px-2 py-1 text-sm border border-gray-200 rounded focus:outline-none focus:border-blue-500"
                autoFocus
              />
              <button
                onClick={handlePaste}
                disabled={!pasteValue}
                className="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 disabled:opacity-50"
              >
                Pay
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="components/wallet/README.md">
# NIP-60 Lightning Wallet UI Components

A gorgeous, elegant, and minimalist wallet UI for NIP-60 Lightning transactions with Cashu mint support.

## Features

- **5 Design Variations**: Choose from minimal light, minimal dark, card elegant, gradient modern, or compact styles
- **Cashu Mint Configuration**: Add and manage multiple Cashu mints with tooltips
- **QR Code Scanner**: Scan Lightning invoices with paste fallback option
- **Send & Receive**: Intuitive transaction modals with mock functionality
- **Subtle Animations**: Smooth Framer Motion animations throughout
- **Responsive Design**: Works beautifully on desktop and mobile

## Components

### Main Components

- `Wallet` - Main wallet component with variant selection
- `WalletBalance` - Displays balance with optional animations
- `MintConfiguration` - Manage Cashu mints configuration
- `TransactionButton` - Send/Receive action buttons
- `QRScanner` - QR code scanning with paste fallback
- `TransactionModal` - Modal for send/receive transactions

### Usage

```tsx
import { Wallet } from '@/components/wallet';

// Basic usage with default minimal-light variant
<Wallet />

// With specific variant
<Wallet variant="gradient-modern" />

// Available variants:
// - 'minimal-light' (default)
// - 'minimal-dark'
// - 'card-elegant'
// - 'gradient-modern'
// - 'compact'
```

## Design Variations

### Minimal Light (Default)
Clean and minimal design with light theme. Features subtle borders and elegant typography.

### Minimal Dark
Sleek dark theme with yellow accents inspired by Lightning. Perfect for dark mode applications.

### Card Elegant
Sophisticated card design with gradient accents and detailed balance display including daily changes.

### Gradient Modern
Bold animated gradient background with glassmorphism effects. Eye-catching and modern.

### Compact
Space-efficient inline design perfect for embedding in sidebars or headers.

## Mock Functionality

All components include mock functionality ready for integration:

- Balance tracking with animated updates
- Mint configuration with add/remove/toggle
- Invoice generation and QR codes
- Clipboard integration for paste functionality
- Transaction processing animations

## Integration with NIP-60

The wallet is designed to integrate with NIP-60 protocol for Cashu ecash wallets:

1. **Mint Management**: Configure and connect to multiple Cashu mints
2. **Balance Aggregation**: Track total balance across all mints
3. **Lightning Integration**: Send/receive via Lightning Network
4. **Zap Support**: Ready for Nostr zap integration

## Customization

Components use Tailwind CSS and can be easily customized:

- Colors can be adjusted via Tailwind classes
- Animations powered by Framer Motion
- Icons from Lucide React
- Fully typed with TypeScript

## Example Integration

See `WalletIntegration.tsx` for a complete example of how to integrate the wallet with zapping functionality.

## Development

To view all wallet variations:
1. Navigate to `/wallet` in your browser
2. Click on different variant buttons to see each design
3. Interact with buttons to see animations and modals

The wallet page showcases all features and variations in an interactive demo.
</file>

<file path="components/wallet/TransactionButton.tsx">
import { motion } from 'framer-motion';
import { Send, Download, ArrowUpRight, ArrowDownLeft } from 'lucide-react';
interface TransactionButtonProps {
  type: 'send' | 'receive';
  onClick: () => void;
  variant?: 'minimal' | 'detailed' | 'icon';
  disabled?: boolean;
}
export function TransactionButton({ 
  type, 
  onClick, 
  variant = 'minimal',
  disabled = false 
}: TransactionButtonProps) {
  const isSend = type === 'send';
  const icons = {
    minimal: isSend ? <Send className="w-4 h-4" /> : <Download className="w-4 h-4" />,
    detailed: isSend ? <ArrowUpRight className="w-5 h-5" /> : <ArrowDownLeft className="w-5 h-5" />,
    icon: isSend ? <Send className="w-5 h-5" /> : <Download className="w-5 h-5" />
  };
  const labels = {
    send: 'Send',
    receive: 'Receive'
  };
  if (variant === 'icon') {
    return (
      <motion.button
        onClick={onClick}
        disabled={disabled}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        className={`
          p-3 rounded-full transition-all
          ${isSend 
            ? 'bg-blue-600 hover:bg-blue-700 text-white' 
            : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
          }
          ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
        `}
      >
        {icons[variant]}
      </motion.button>
    );
  }
  if (variant === 'detailed') {
    return (
      <motion.button
        onClick={onClick}
        disabled={disabled}
        whileHover={{ scale: 1.02, y: -2 }}
        whileTap={{ scale: 0.98 }}
        className={`
          flex flex-col items-center justify-center p-6 rounded-2xl transition-all w-full
          ${isSend 
            ? 'bg-gradient-to-br from-blue-500 to-blue-600 text-white shadow-lg shadow-blue-500/20' 
            : 'bg-white border-2 border-gray-200 text-gray-700 hover:border-gray-300'
          }
          ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
        `}
      >
        <motion.div
          initial={{ rotate: 0 }}
          whileHover={{ rotate: isSend ? -45 : 45 }}
          transition={{ type: "spring", stiffness: 300 }}
        >
          {icons[variant]}
        </motion.div>
        <span className="mt-2 text-sm font-medium">{labels[type]}</span>
      </motion.button>
    );
  }
  // Minimal variant (default)
  return (
    <motion.button
      onClick={onClick}
      disabled={disabled}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      transition={{ type: "spring", stiffness: 400, damping: 17 }}
      className={`
        flex items-center gap-2 px-4 py-2 rounded-lg font-medium transition-all
        ${isSend 
          ? 'bg-gray-900 hover:bg-gray-800 text-white' 
          : 'bg-white hover:bg-gray-50 text-gray-900 border border-gray-200'
        }
        ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
      `}
    >
      {icons[variant]}
      <span>{labels[type]}</span>
    </motion.button>
  );
}
</file>

<file path="components/wallet/TransactionModal.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Copy, Check, Zap, QrCode, Loader2 } from 'lucide-react';
interface TransactionModalProps {
  type: 'send' | 'receive';
  isOpen: boolean;
  onClose: () => void;
  balance: number;
  variant?: 'light' | 'dark' | 'gradient';
}
export function TransactionModal({
  type,
  isOpen,
  onClose,
  balance,
  variant = 'light'
}: TransactionModalProps) {
  const [amount, setAmount] = useState('');
  const [description, setDescription] = useState('');
  const [invoice, setInvoice] = useState('');
  const [copied, setCopied] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const isSend = type === 'send';
  const handleCopy = () => {
    // Mock invoice
    const mockInvoice = 'lnbc21000n1pj9xyz...mockInvoice';
    navigator.clipboard.writeText(mockInvoice);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };
  const handleSubmit = () => {
    setIsProcessing(true);
    // Mock transaction
    setTimeout(() => {
      setIsProcessing(false);
      onClose();
    }, 2000);
  };
  const getModalStyles = () => {
    switch (variant) {
      case 'dark':
        return 'bg-gray-900 text-white';
      case 'gradient':
        return 'bg-gradient-to-br from-purple-600 to-pink-600 text-white';
      default:
        return 'bg-white';
    }
  };
  const getInputStyles = () => {
    switch (variant) {
      case 'dark':
        return 'bg-gray-800 border-gray-700 text-white placeholder-gray-400';
      case 'gradient':
        return 'bg-white/20 border-white/30 text-white placeholder-white/70 backdrop-blur-sm';
      default:
        return 'bg-white border-gray-200 text-gray-900';
    }
  };
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, y: 20 }}
            animate={{ scale: 1, y: 0 }}
            exit={{ scale: 0.9, y: 20 }}
            className={`rounded-3xl p-6 max-w-md w-full shadow-2xl ${getModalStyles()}`}
            onClick={(e) => e.stopPropagation()}
          >
            {/* Header */}
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold">
                {isSend ? 'Send Payment' : 'Receive Payment'}
              </h3>
              <button
                onClick={onClose}
                className={`p-2 rounded-lg transition-colors ${
                  variant === 'dark' ? 'hover:bg-gray-800' : 'hover:bg-gray-100'
                }`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
            {/* Content */}
            {isSend ? (
              <div className="space-y-4">
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Invoice
                  </label>
                  <textarea
                    value={invoice}
                    onChange={(e) => setInvoice(e.target.value)}
                    placeholder="Paste Lightning invoice or LNURL..."
                    className={`w-full p-3 rounded-xl resize-none focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                    rows={3}
                  />
                </div>
                <div className="text-center py-2">
                  <span className={`text-sm ${variant === 'dark' ? 'text-gray-500' : 'text-gray-400'}`}>or</span>
                </div>
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Amount (sats)
                  </label>
                  <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="0"
                    className={`w-full p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                  />
                  <div className={`text-xs mt-1 ${variant === 'dark' ? 'text-gray-500' : 'text-gray-500'}`}>
                    Available: {balance.toLocaleString()} sats
                  </div>
                </div>
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Note (optional)
                  </label>
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Coffee tip"
                    className={`w-full p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                  />
                </div>
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleSubmit}
                  disabled={!invoice && !amount}
                  className={`w-full py-3 rounded-xl font-medium transition-all flex items-center justify-center gap-2 ${
                    variant === 'gradient'
                      ? 'bg-white text-purple-600 hover:bg-white/90'
                      : variant === 'dark'
                      ? 'bg-yellow-500 text-gray-900 hover:bg-yellow-400'
                      : 'bg-gray-900 text-white hover:bg-gray-800'
                  } disabled:opacity-50 disabled:cursor-not-allowed`}
                >
                  {isProcessing ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span>Processing...</span>
                    </>
                  ) : (
                    <>
                      <Zap className="w-4 h-4" />
                      <span>Send Payment</span>
                    </>
                  )}
                </motion.button>
              </div>
            ) : (
              <div className="space-y-4">
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Amount (sats)
                  </label>
                  <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="0"
                    className={`w-full p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                  />
                </div>
                <div>
                  <label className={`text-sm ${variant === 'dark' ? 'text-gray-400' : 'text-gray-600'} mb-1 block`}>
                    Description
                  </label>
                  <input
                    type="text"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="What's this payment for?"
                    className={`w-full p-3 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 ${getInputStyles()}`}
                  />
                </div>
                {amount && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    className="space-y-4"
                  >
                    <div className={`p-4 rounded-xl ${
                      variant === 'dark' ? 'bg-gray-800' : 'bg-gray-50'
                    }`}>
                      <div className="flex items-center justify-center mb-4">
                        <div className="p-8 bg-white rounded-2xl">
                          <QrCode className="w-32 h-32 text-gray-900" />
                        </div>
                      </div>
                      <div className={`text-xs ${
                        variant === 'dark' ? 'text-gray-400' : 'text-gray-500'
                      } text-center break-all`}>
                        lnbc{amount}n1pj9xyz...mockInvoice
                      </div>
                    </div>
                    <button
                      onClick={handleCopy}
                      className={`w-full py-3 rounded-xl font-medium transition-all flex items-center justify-center gap-2 ${
                        variant === 'gradient'
                          ? 'bg-white/20 text-white hover:bg-white/30'
                          : variant === 'dark'
                          ? 'bg-gray-800 text-white hover:bg-gray-700'
                          : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                      }`}
                    >
                      {copied ? (
                        <>
                          <Check className="w-4 h-4" />
                          <span>Copied!</span>
                        </>
                      ) : (
                        <>
                          <Copy className="w-4 h-4" />
                          <span>Copy Invoice</span>
                        </>
                      )}
                    </button>
                  </motion.div>
                )}
                {!amount && (
                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={() => setAmount('1000')}
                    className={`w-full py-3 rounded-xl font-medium transition-all ${
                      variant === 'gradient'
                        ? 'bg-white text-purple-600 hover:bg-white/90'
                        : variant === 'dark'
                        ? 'bg-yellow-500 text-gray-900 hover:bg-yellow-400'
                        : 'bg-gray-900 text-white hover:bg-gray-800'
                    }`}
                  >
                    Generate Invoice
                  </motion.button>
                )}
              </div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
</file>

<file path="components/wallet/Wallet.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { WalletBalance } from './WalletBalance';
import { MintConfiguration } from './MintConfiguration';
import { TransactionButton } from './TransactionButton';
import { QRScanner } from './QRScanner';
import { TransactionModal } from './TransactionModal';
import { Zap, History, MoreHorizontal } from 'lucide-react';
export type WalletVariant = 'minimal-light' | 'minimal-dark' | 'card-elegant' | 'gradient-modern' | 'compact';
interface WalletProps {
  variant?: WalletVariant;
}
export function Wallet({ variant = 'minimal-light' }: WalletProps) {
  const [balance] = useState(21000);
  const [showSendModal, setShowSendModal] = useState(false);
  const [showReceiveModal, setShowReceiveModal] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  const handleScan = (data: string) => {
    console.log('Scanned:', data);
    // Mock: Parse lightning invoice and open send modal
    setShowSendModal(true);
  };
  const handleSend = () => {
    setShowSendModal(true);
  };
  const handleReceive = () => {
    setShowReceiveModal(true);
  };
  // Minimal Light Variant (Default)
  if (variant === 'minimal-light') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100"
        >
          <div className="flex justify-between items-start mb-6">
            <h2 className="text-lg font-medium text-gray-900">Wallet</h2>
            <div className="flex items-center gap-2">
              <QRScanner onScan={handleScan} variant="minimal" />
              <MintConfiguration variant="minimal" />
            </div>
          </div>
          <WalletBalance amount={balance} variant="minimal" />
          <div className="flex gap-3 mt-6">
            <TransactionButton type="send" onClick={handleSend} variant="minimal" />
            <TransactionButton type="receive" onClick={handleReceive} variant="minimal" />
          </div>
          <button
            onClick={() => setShowHistory(!showHistory)}
            className="w-full mt-4 text-sm text-gray-500 hover:text-gray-700 transition-colors"
          >
            View History
          </button>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
        />
      </>
    );
  }
  // Minimal Dark Variant
  if (variant === 'minimal-dark') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          className="bg-gray-900 rounded-3xl p-8 shadow-2xl"
        >
          <div className="flex justify-between items-center mb-8">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center">
                <Zap className="w-5 h-5 text-gray-900" />
              </div>
              <h2 className="text-white font-light text-xl">Lightning Wallet</h2>
            </div>
            <button className="p-2 hover:bg-gray-800 rounded-lg transition-colors">
              <MoreHorizontal className="w-5 h-5 text-gray-400" />
            </button>
          </div>
          <div className="text-center mb-8">
            <div className="text-5xl font-thin text-white mb-2">
              {balance.toLocaleString()}
            </div>
            <div className="text-gray-400 text-sm">satoshis</div>
          </div>
          <div className="grid grid-cols-2 gap-4 mb-6">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={handleSend}
              className="py-4 bg-yellow-500 text-gray-900 rounded-xl font-medium hover:bg-yellow-400 transition-colors"
            >
              Send
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={handleReceive}
              className="py-4 bg-gray-800 text-white rounded-xl font-medium hover:bg-gray-700 transition-colors"
            >
              Receive
            </motion.button>
          </div>
          <div className="flex items-center justify-between pt-6 border-t border-gray-800">
            <button
              onClick={() => setShowHistory(!showHistory)}
              className="flex items-center gap-2 text-gray-400 hover:text-gray-300 text-sm"
            >
              <History className="w-4 h-4" />
              <span>History</span>
            </button>
            <button className="text-gray-400 hover:text-gray-300 text-sm">
              Settings
            </button>
          </div>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
          variant="dark"
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
          variant="dark"
        />
      </>
    );
  }
  // Card Elegant Variant
  if (variant === 'card-elegant') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ type: "spring", stiffness: 200, damping: 20 }}
          className="max-w-md mx-auto"
        >
          <motion.div
            className="bg-gradient-to-br from-white to-gray-50 rounded-3xl p-8 shadow-xl border border-gray-100"
            whileHover={{ y: -5 }}
            transition={{ type: "spring", stiffness: 300 }}
          >
            <div className="flex items-center justify-between mb-8">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                  <Zap className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h2 className="text-xl font-semibold text-gray-900">NIP-60 Wallet</h2>
                  <p className="text-xs text-gray-500">Lightning Network</p>
                </div>
              </div>
            </div>
            <WalletBalance amount={balance} variant="detailed" showChange changeAmount={2500} />
            <div className="mt-8 space-y-4">
              <MintConfiguration variant="detailed" />
              <QRScanner onScan={handleScan} variant="detailed" />
            </div>
            <div className="flex gap-4 mt-8">
              <TransactionButton type="send" onClick={handleSend} variant="detailed" />
              <TransactionButton type="receive" onClick={handleReceive} variant="detailed" />
            </div>
            <div className="mt-8 pt-6 border-t border-gray-200">
              <button
                onClick={() => setShowHistory(!showHistory)}
                className="w-full flex items-center justify-center gap-2 text-sm text-gray-600 hover:text-gray-900 transition-colors"
              >
                <History className="w-4 h-4" />
                <span>Transaction History</span>
              </button>
            </div>
          </motion.div>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
        />
      </>
    );
  }
  // Gradient Modern Variant
  if (variant === 'gradient-modern') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="relative overflow-hidden rounded-3xl"
        >
          {/* Animated gradient background */}
          <div className="absolute inset-0 bg-gradient-to-br from-purple-600 via-pink-500 to-orange-500">
            <motion.div
              className="absolute inset-0 bg-gradient-to-tr from-blue-600/30 via-purple-600/30 to-pink-600/30"
              animate={{
                x: [0, 100, 0],
                y: [0, -100, 0],
              }}
              transition={{
                duration: 20,
                repeat: Infinity,
                ease: "linear"
              }}
            />
          </div>
          <div className="relative backdrop-blur-sm bg-white/10 p-8">
            <div className="text-center mb-8">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ type: "spring", stiffness: 200, delay: 0.2 }}
                className="inline-block"
              >
                <div className="text-6xl font-bold text-white mb-2">
                  {balance.toLocaleString()}
                </div>
                <div className="text-white/80 text-sm uppercase tracking-wide">Satoshis</div>
              </motion.div>
            </div>
            <div className="grid grid-cols-3 gap-3 mb-8">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleSend}
                className="bg-white/20 backdrop-blur-md text-white p-4 rounded-2xl hover:bg-white/30 transition-all"
              >
                <Zap className="w-6 h-6 mx-auto mb-2" />
                <div className="text-xs">Zap</div>
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={handleSend}
                className="bg-white/20 backdrop-blur-md text-white p-4 rounded-2xl hover:bg-white/30 transition-all"
              >
                <History className="w-6 h-6 mx-auto mb-2" />
                <div className="text-xs">History</div>
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => {}}
                className="bg-white/20 backdrop-blur-md text-white p-4 rounded-2xl hover:bg-white/30 transition-all"
              >
                <MoreHorizontal className="w-6 h-6 mx-auto mb-2" />
                <div className="text-xs">More</div>
              </motion.button>
            </div>
            <div className="flex gap-3">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={handleSend}
                className="flex-1 py-4 bg-white text-purple-600 rounded-2xl font-semibold hover:bg-white/90 transition-all"
              >
                Send
              </motion.button>
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={handleReceive}
                className="flex-1 py-4 bg-white/20 backdrop-blur-md text-white rounded-2xl font-semibold hover:bg-white/30 transition-all"
              >
                Receive
              </motion.button>
            </div>
          </div>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
          variant="gradient"
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
          variant="gradient"
        />
      </>
    );
  }
  // Compact Variant
  if (variant === 'compact') {
    return (
      <>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="bg-white rounded-xl p-4 shadow-sm border border-gray-100"
        >
          <div className="flex items-center justify-between">
            <WalletBalance amount={balance} variant="compact" />
            <div className="flex gap-2">
              <TransactionButton type="send" onClick={handleSend} variant="icon" />
              <TransactionButton type="receive" onClick={handleReceive} variant="icon" />
            </div>
          </div>
        </motion.div>
        <TransactionModal
          type="send"
          isOpen={showSendModal}
          onClose={() => setShowSendModal(false)}
          balance={balance}
        />
        <TransactionModal
          type="receive"
          isOpen={showReceiveModal}
          onClose={() => setShowReceiveModal(false)}
          balance={balance}
        />
      </>
    );
  }
  return null;
}
</file>

<file path="components/wallet/WalletBalance.tsx">
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
interface WalletBalanceProps {
  amount: number;
  unit?: string;
  showChange?: boolean;
  changeAmount?: number;
  variant?: 'minimal' | 'detailed' | 'compact';
}
export function WalletBalance({
  amount,
  unit = 'sats',
  showChange = false,
  changeAmount = 0,
  variant = 'minimal'
}: WalletBalanceProps) {
  const [displayAmount, setDisplayAmount] = useState(0);
  useEffect(() => {
    // Animate balance changes
    const timer = setTimeout(() => {
      setDisplayAmount(amount);
    }, 100);
    return () => clearTimeout(timer);
  }, [amount]);
  const formatAmount = (value: number) => {
    return new Intl.NumberFormat('en-US').format(value);
  };
  const isPositiveChange = changeAmount > 0;
  if (variant === 'compact') {
    return (
      <div className="flex items-baseline gap-1">
        <span className="text-2xl font-light text-gray-900">{formatAmount(displayAmount)}</span>
        <span className="text-sm text-gray-500">{unit}</span>
      </div>
    );
  }
  if (variant === 'detailed') {
    return (
      <div className="space-y-2">
        <div className="flex items-end gap-2">
          <motion.span
            key={displayAmount}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-5xl font-thin text-gray-900"
          >
            {formatAmount(displayAmount)}
          </motion.span>
          <span className="text-lg text-gray-600 mb-2">{unit}</span>
        </div>
        {showChange && changeAmount !== 0 && (
          <motion.div
            initial={{ opacity: 0, x: -10 }}
            animate={{ opacity: 1, x: 0 }}
            className={`text-sm ${isPositiveChange ? 'text-green-600' : 'text-red-600'}`}
          >
            <span>{isPositiveChange ? '+' : '-'}</span>
            <span>{formatAmount(Math.abs(changeAmount))}</span>
            <span className="text-xs ml-1">today</span>
          </motion.div>
        )}
      </div>
    );
  }
  // Minimal variant (default)
  return (
    <div className="text-center">
      <motion.div
        key={displayAmount}
        initial={{ scale: 0.95, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ type: "spring", stiffness: 300, damping: 25 }}
        className="text-4xl font-light text-gray-900"
      >
        {formatAmount(displayAmount)}
      </motion.div>
      <div className="text-sm text-gray-500 mt-1">{unit}</div>
    </div>
  );
}
</file>

<file path="components/wallet/WalletBalanceBadge.tsx">
import { useState } from 'react';
import { motion } from 'framer-motion';
import { Zap } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
export function WalletBalanceBadge() {
  const [balance] = useState(21000);
  const navigate = useNavigate();
  const handleClick = () => {
    navigate('/wallet');
  };
  return (
    <motion.button
      onClick={handleClick}
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      className="flex items-center gap-2 px-3 py-1.5 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/30 dark:to-orange-950/30 rounded-full border border-yellow-200 dark:border-yellow-800/50 transition-all hover:shadow-md"
    >
      <div className="w-5 h-5 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center">
        <Zap className="w-3 h-3 text-white" />
      </div>
      <span className="text-sm font-medium text-gray-900 dark:text-gray-100">
        {balance.toLocaleString()}
      </span>
      <span className="text-xs text-gray-500 dark:text-gray-400">sats</span>
    </motion.button>
  );
}
</file>

<file path="components/wallet/WalletIntegration.tsx">
import { useState } from 'react';
import { motion } from 'framer-motion';
import { Zap, CheckCircle, XCircle } from 'lucide-react';
import { Wallet } from './Wallet';
/**
 * Example integration showing how to use the Wallet component
 * with mock NIP-60 functionality for zapping
 */
export function WalletIntegration() {
  const [zapHistory, setZapHistory] = useState<Array<{
    id: string;
    amount: number;
    recipient: string;
    timestamp: Date;
    status: 'success' | 'failed';
  }>>([]);
  // Mock function to handle zap sending
  const handleZap = (recipient: string, amount: number) => {
    const newZap = {
      id: Date.now().toString(),
      amount,
      recipient,
      timestamp: new Date(),
      status: 'success' as const
    };
    setZapHistory(prev => [newZap, ...prev]);
    // Here you would integrate with actual NIP-60 implementation
    console.log('Zap sent:', { recipient, amount });
  };
  return (
    <div className="space-y-6">
      {/* Main Wallet Component */}
      <Wallet variant="minimal-light" />
      {/* Example Zap Interface */}
      <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
        <h3 className="text-lg font-medium text-gray-900 mb-4">Quick Zap</h3>
        <div className="space-y-4">
          {/* Quick Zap Buttons */}
          <div className="flex gap-2">
            {[100, 500, 1000, 5000].map(amount => (
              <motion.button
                key={amount}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => handleZap('npub1...example', amount)}
                className="flex-1 px-3 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg text-sm font-medium text-gray-700 transition-colors"
              >
                <Zap className="w-4 h-4 inline mr-1" />
                {amount}
              </motion.button>
            ))}
          </div>
          {/* Recent Zaps */}
          {zapHistory.length > 0 && (
            <div className="space-y-2 mt-6">
              <h4 className="text-sm font-medium text-gray-600">Recent Zaps</h4>
              {zapHistory.slice(0, 3).map(zap => (
                <motion.div
                  key={zap.id}
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                >
                  <div className="flex items-center gap-3">
                    {zap.status === 'success' ? (
                      <CheckCircle className="w-4 h-4 text-green-500" />
                    ) : (
                      <XCircle className="w-4 h-4 text-red-500" />
                    )}
                    <div>
                      <div className="text-sm font-medium text-gray-700">
                        {zap.amount} sats
                      </div>
                      <div className="text-xs text-gray-500">
                        {zap.recipient.slice(0, 16)}...
                      </div>
                    </div>
                  </div>
                  <div className="text-xs text-gray-400">
                    {zap.timestamp.toLocaleTimeString()}
                  </div>
                </motion.div>
              ))}
            </div>
          )}
        </div>
      </div>
      {/* Integration Notes */}
      <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
        <h4 className="text-sm font-medium text-blue-900 mb-2">NIP-60 Integration</h4>
        <ul className="text-xs text-blue-700 space-y-1">
          <li>• Connect to Cashu mints using NIP-60 protocol</li>
          <li>• Generate Lightning invoices for receiving</li>
          <li>• Scan QR codes or paste invoices for sending</li>
          <li>• Track balance across multiple mints</li>
          <li>• Mock functionality ready for real implementation</li>
        </ul>
      </div>
    </div>
  );
}
</file>

<file path="components/wallet/WalletWidget.tsx">
import { useState } from 'react';
import { motion } from 'framer-motion';
import { Zap, Send, Download } from 'lucide-react';
import { Link } from 'react-router-dom';
export function WalletWidget() {
  const [balance] = useState(21000);
  return (
    <Link to="/wallet">
      <motion.div
        whileHover={{ scale: 1.02 }}
        className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 p-4 rounded-xl cursor-pointer transition-all hover:shadow-md"
      >
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
              <Zap className="w-4 h-4 text-white" />
            </div>
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Wallet</span>
          </div>
        </div>
        <div className="mb-3">
          <div className="text-2xl font-light text-gray-900 dark:text-gray-100">
            {balance.toLocaleString()}
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400">sats available</div>
        </div>
        <div className="flex gap-2">
          <button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              // Quick send action
            }}
            className="flex-1 flex items-center justify-center gap-1 py-1.5 bg-white dark:bg-gray-800 rounded-lg text-xs font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <Send className="w-3 h-3" />
            Send
          </button>
          <button
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              // Quick receive action
            }}
            className="flex-1 flex items-center justify-center gap-1 py-1.5 bg-white dark:bg-gray-800 rounded-lg text-xs font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
          >
            <Download className="w-3 h-3" />
            Receive
          </button>
        </div>
      </motion.div>
    </Link>
  );
}
</file>

<file path="components/wallet/ZapButton.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Zap } from 'lucide-react';
import { cn } from '@/lib/utils';
interface ZapButtonProps {
  eventId: string;
  authorPubkey: string;
  initialZapCount?: number;
  size?: 'sm' | 'md';
  onZap?: (amount: number) => void;
}
export function ZapButton({
  eventId,
  authorPubkey,
  initialZapCount = 0,
  size = 'sm',
  onZap
}: ZapButtonProps) {
  const [showAmounts, setShowAmounts] = useState(false);
  const [zapCount, setZapCount] = useState(initialZapCount);
  const [isZapping, setIsZapping] = useState(false);
  const [lastZapAmount, setLastZapAmount] = useState<number | null>(null);
  const quickZapAmounts = [21, 100, 500, 1000];
  const handleZap = async (amount: number) => {
    setIsZapping(true);
    setLastZapAmount(amount);
    // Mock zap action
    setTimeout(() => {
      setZapCount(prev => prev + 1);
      setIsZapping(false);
      setShowAmounts(false);
      onZap?.(amount);
      // Clear the animation after a moment
      setTimeout(() => setLastZapAmount(null), 2000);
    }, 500);
  };
  return (
    <div className="relative">
      <button
        onClick={() => setShowAmounts(!showAmounts)}
        className={cn(
          "group flex items-center gap-2 p-2 rounded-full transition-all",
          zapCount > 0
            ? "text-yellow-600 dark:text-yellow-500"
            : "hover:bg-yellow-50 dark:hover:bg-yellow-950/30",
          size === 'md' && "p-3"
        )}
      >
        <motion.div
          animate={isZapping ? { rotate: 360 } : {}}
          transition={{ duration: 0.5 }}
        >
          <Zap
            className={cn(
              "transition-all",
              size === 'md' ? "w-5 h-5" : "w-4 h-4",
              zapCount > 0
                ? "fill-current text-yellow-600 dark:text-yellow-500"
                : "text-gray-500 group-hover:text-yellow-600 dark:text-gray-400 dark:group-hover:text-yellow-500"
            )}
          />
        </motion.div>
        {zapCount > 0 && (
          <span className={cn(
            "font-medium",
            size === 'md' ? "text-base" : "text-sm",
            "text-yellow-600 dark:text-yellow-500"
          )}>
            {zapCount}
          </span>
        )}
      </button>
      {/* Floating zap amount indicator */}
      <AnimatePresence>
        {lastZapAmount && (
          <motion.div
            initial={{ opacity: 0, y: 0, scale: 0.8 }}
            animate={{ opacity: 1, y: -30, scale: 1 }}
            exit={{ opacity: 0, y: -50, scale: 0.8 }}
            className="absolute left-1/2 -translate-x-1/2 pointer-events-none"
          >
            <div className="bg-yellow-500 text-white text-xs px-2 py-1 rounded-full font-bold whitespace-nowrap">
              +{lastZapAmount} ⚡
            </div>
          </motion.div>
        )}
      </AnimatePresence>
      {/* Quick zap amounts */}
      <AnimatePresence>
        {showAmounts && (
          <>
            {/* Backdrop to close on click outside */}
            <div
              className="fixed inset-0 z-10"
              onClick={() => setShowAmounts(false)}
            />
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: 5 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 5 }}
              className="absolute bottom-full left-0 mb-2 z-20"
            >
              <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-2 flex gap-1">
                {quickZapAmounts.map((amount) => (
                  <motion.button
                    key={amount}
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={(e) => {
                      e.stopPropagation();
                      handleZap(amount);
                    }}
                    disabled={isZapping}
                    className="px-3 py-2 bg-gray-50 dark:bg-gray-700 hover:bg-yellow-50 dark:hover:bg-yellow-900/30 rounded-lg transition-colors disabled:opacity-50"
                  >
                    <div className="flex items-center gap-1">
                      <Zap className="w-3 h-3 text-yellow-600 dark:text-yellow-500" />
                      <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        {amount}
                      </span>
                    </div>
                  </motion.button>
                ))}
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="config/ndk.ts">
// This file is now deprecated as all NDK functionality is provided by ndk-hooks
// Keeping it only for reference if needed during migration
import { NDKNip07Signer, NDKPrivateKeySigner } from '@nostr-dev-kit/ndk-hooks';
// Default relay configuration (moved to NDKContext.tsx)
export const defaultRelays = [
  'wss://relay.damus.io',
  'wss://relay.nostr.band',
  'wss://nos.lol',
  'wss://relay.snort.social',
  'wss://relay.primal.net'
];
// Helper to get signer based on available auth method (deprecated - use session hooks instead)
export async function getSigner(): Promise<NDKPrivateKeySigner | NDKNip07Signer | null> {
  // Check for NIP-07 extension (like Alby, nos2x, etc.)
  if (window.nostr) {
    return new NDKNip07Signer();
  }
  // Check for stored private key (for demo purposes - in production use secure storage)
  const privateKey = localStorage.getItem('nostr_private_key');
  if (privateKey) {
    return new NDKPrivateKeySigner(privateKey);
  }
  return null;
}
</file>

<file path="features/auth/LoginButton.tsx">
import { useState } from 'react';
import { 
  useNDKCurrentUser,
  useNDKSessionLogin,
  useNDKSessionLogout,
  NDKNip07Signer,
  NDKPrivateKeySigner
} from '@nostr-dev-kit/ndk-hooks';
import { Button } from '@/components/ui/button';
import { User, LogOut, Key, Sparkles } from 'lucide-react';
export function LoginButton() {
  const currentUser = useNDKCurrentUser();
  const login = useNDKSessionLogin();
  const logout = useNDKSessionLogout();
  const [showOptions, setShowOptions] = useState(false);
  const [nsec, setNsec] = useState('');
  const [showNsecInput, setShowNsecInput] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const handleExtensionLogin = async () => {
    setIsConnecting(true);
    try {
      if (!window.nostr) {
        throw new Error('No Nostr extension found. Please install Alby or nos2x.');
      }
      const signer = new NDKNip07Signer();
      await login(signer, true);
      setShowOptions(false);
    } catch (error) {
      console.error('Extension login failed:', error);
      alert(error instanceof Error ? error.message : 'Extension login failed');
    } finally {
      setIsConnecting(false);
    }
  };
  const handlePrivateKeyLogin = async () => {
    if (!nsec) return;
    setIsConnecting(true);
    try {
      const signer = new NDKPrivateKeySigner(nsec);
      await login(signer, true);
      localStorage.setItem('nostr_private_key', nsec);
      setNsec('');
      setShowNsecInput(false);
      setShowOptions(false);
    } catch (error) {
      console.error('Private key login failed:', error);
      alert('Invalid private key');
    } finally {
      setIsConnecting(false);
    }
  };
  const handleGenerateIdentity = async () => {
    setIsConnecting(true);
    try {
      const signer = NDKPrivateKeySigner.generate();
      await login(signer, true);
      const privateKey = signer.privateKey!;
      localStorage.setItem('nostr_private_key', privateKey);
      const user = await signer.user();
      alert(`New identity created!\nnpub: ${user.npub}\nnsec: ${privateKey}\n\nIMPORTANT: Save your nsec somewhere safe!`);
      setShowOptions(false);
    } catch (error) {
      console.error('Failed to generate identity:', error);
      alert('Failed to generate new identity');
    } finally {
      setIsConnecting(false);
    }
  };
  const handleLogout = () => {
    logout();
    localStorage.removeItem('nostr_private_key');
  };
  if (currentUser) {
    return (
      <div className="flex items-center gap-4">
        <button
          onClick={handleLogout}
          className="px-4 py-2 rounded-full bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 transition-colors text-sm font-medium flex items-center gap-2"
        >
          <LogOut className="w-4 h-4" />
          <span className="hidden sm:inline">Logout</span>
        </button>
      </div>
    );
  }
  if (showOptions) {
    return (
      <div className="flex flex-col gap-2">
        <Button
          onClick={handleExtensionLogin}
          disabled={isConnecting}
          variant="default"
          size="sm"
        >
          <User className="w-4 h-4 mr-2" />
          Login with Extension
        </Button>
        {showNsecInput ? (
          <div className="flex gap-2">
            <input
              type="password"
              placeholder="Enter nsec or hex key"
              value={nsec}
              onChange={(e) => setNsec(e.target.value)}
              className="px-3 py-1 border rounded text-sm"
              disabled={isConnecting}
            />
            <Button
              onClick={handlePrivateKeyLogin}
              disabled={!nsec || isConnecting}
              size="sm"
              variant="outline"
            >
              Login
            </Button>
          </div>
        ) : (
          <Button
            onClick={() => setShowNsecInput(true)}
            disabled={isConnecting}
            variant="outline"
            size="sm"
          >
            <Key className="w-4 h-4 mr-2" />
            Login with Private Key
          </Button>
        )}
        <Button
          onClick={handleGenerateIdentity}
          disabled={isConnecting}
          variant="outline"
          size="sm"
        >
          <Sparkles className="w-4 h-4 mr-2" />
          Generate New Identity
        </Button>
        <Button
          onClick={() => {
            setShowOptions(false);
            setShowNsecInput(false);
            setNsec('');
          }}
          variant="ghost"
          size="sm"
          disabled={isConnecting}
        >
          Cancel
        </Button>
      </div>
    );
  }
  return (
    <button
      onClick={() => setShowOptions(true)}
      disabled={isConnecting}
      className="px-4 py-2 rounded-full bg-purple-600 hover:bg-purple-700 dark:bg-purple-500 dark:hover:bg-purple-600 text-white transition-colors text-sm font-medium flex items-center gap-2"
    >
      <User className="w-4 h-4" />
      <span className="hidden sm:inline">{isConnecting ? 'Connecting...' : 'Login with Nostr'}</span>
      <span className="sm:hidden">{isConnecting ? '...' : 'Login'}</span>
    </button>
  );
}
</file>

<file path="features/classifieds/components/CategorySection.tsx">
import { ChevronRight } from 'lucide-react';
import { Link } from 'react-router-dom';
import type { ClassifiedListing } from '../types';
import { ListingCard } from './ListingCard';
interface CategorySectionProps {
  category: string;
  listings: ClassifiedListing[];
  showViewAll?: boolean;
}
export function CategorySection({ category, listings, showViewAll = true }: CategorySectionProps) {
  if (listings.length === 0) return null;
  const displayName = category.charAt(0).toUpperCase() + category.slice(1).replace('-', ' ');
  return (
    <section className="mb-8">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
          {displayName}
        </h2>
        {showViewAll && listings.length > 4 && (
          <Link
            to={`/marketplace?category=${category}`}
            className="flex items-center gap-1 text-sm text-purple-600 hover:text-purple-700 dark:text-purple-400 dark:hover:text-purple-300"
          >
            View All
            <ChevronRight className="w-4 h-4" />
          </Link>
        )}
      </div>
      <div className="relative">
        <div className="flex gap-4 overflow-x-auto scrollbar-hide pb-2">
          {listings.slice(0, 10).map((listing) => (
            <div
              key={listing.id}
              className="flex-none w-72 sm:w-80"
            >
              <ListingCard listing={listing} />
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}
</file>

<file path="features/classifieds/components/FilterButton.tsx">
import { useState } from 'react';
import { Filter, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { motion, AnimatePresence } from 'framer-motion';
interface FilterButtonProps {
  categories: { value: string; label: string }[];
  selectedCategory: string;
  onCategoryChange: (category: string) => void;
}
export function FilterButton({ categories, selectedCategory, onCategoryChange }: FilterButtonProps) {
  const [isOpen, setIsOpen] = useState(false);
  const handleCategorySelect = (value: string) => {
    onCategoryChange(value);
    setIsOpen(false);
  };
  return (
    <div className="relative">
      <Button
        variant="outline"
        size="sm"
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2"
      >
        <Filter className="w-4 h-4" />
        {selectedCategory ? categories.find(c => c.value === selectedCategory)?.label : 'Filter'}
      </Button>
      <AnimatePresence>
        {isOpen && (
          <>
            {/* Backdrop */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 z-40"
              onClick={() => setIsOpen(false)}
            />
            {/* Dropdown */}
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="absolute right-0 mt-2 w-56 bg-white dark:bg-gray-950 rounded-lg shadow-lg border border-gray-200 dark:border-gray-800 z-50"
            >
              <div className="p-2">
                {selectedCategory && (
                  <button
                    onClick={() => handleCategorySelect('')}
                    className="w-full flex items-center justify-between px-3 py-2 text-sm rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 mb-1"
                  >
                    <span>Clear Filter</span>
                    <X className="w-4 h-4" />
                  </button>
                )}
                {categories.map(category => (
                  <button
                    key={category.value}
                    onClick={() => handleCategorySelect(category.value)}
                    className={`w-full text-left px-3 py-2 text-sm rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 ${
                      selectedCategory === category.value
                        ? 'bg-purple-50 text-purple-700 dark:bg-purple-950/50 dark:text-purple-400'
                        : ''
                    }`}
                  >
                    {category.label}
                  </button>
                ))}
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </div>
  );
}
</file>

<file path="features/classifieds/components/ListingCard.tsx">
import { Link } from 'react-router-dom';
import { MapPin, Clock } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { UserAvatar } from '@/components/ui/UserAvatar';
import type { ClassifiedListing } from '../types';
import { PriceTag } from './PriceTag';
import { formatDistanceToNow } from 'date-fns';
interface ListingCardProps {
  listing: ClassifiedListing;
}
export function ListingCard({ listing }: ListingCardProps) {
  const mainImage = listing.images?.[0];
  const timeAgo = listing.publishedAt
    ? formatDistanceToNow(new Date(listing.publishedAt * 1000), { addSuffix: true })
    : 'recently';
  return (
    <Link to={`/marketplace/${listing.id}`}>
      <Card className="hover:shadow-xl transition-all duration-200 cursor-pointer h-full overflow-hidden group">
        {/* Image Section */}
        <div className="aspect-[4/3] relative overflow-hidden bg-gray-100 dark:bg-gray-900">
          {mainImage ? (
            <>
              <img
                src={mainImage}
                alt={listing.title}
                className="object-cover w-full h-full group-hover:scale-105 transition-transform duration-300"
                loading="lazy"
              />
              {listing.status === 'sold' && (
                <div className="absolute inset-0 bg-black/60 flex items-center justify-center backdrop-blur-sm">
                  <span className="text-white font-bold text-xl rotate-12 border-4 border-white px-3 py-1 rounded">
                    SOLD
                  </span>
                </div>
              )}
            </>
          ) : (
            <div className="w-full h-full flex items-center justify-center text-gray-400 dark:text-gray-600">
              <svg className="w-16 h-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            </div>
          )}
        </div>
        {/* Content Section */}
        <div className="p-4 space-y-3">
          {/* Price - Most prominent */}
          {listing.price && (
            <div className="flex justify-between items-start">
              <span className="text-2xl font-bold text-gray-900 dark:text-white">
                {listing.price.currency === 'SATS' ? (
                  <span className="text-orange-500">{listing.price.amount} SATS</span>
                ) : (
                  <span>
                    {listing.price.currency === 'USD' && '$'}
                    {listing.price.currency === 'EUR' && '€'}
                    {listing.price.currency === 'GBP' && '£'}
                    {listing.price.amount}
                    {!['USD', 'EUR', 'GBP'].includes(listing.price.currency) && ` ${listing.price.currency}`}
                  </span>
                )}
                {listing.price.frequency && listing.price.frequency !== 'once' && (
                  <span className="text-sm font-normal text-gray-500 dark:text-gray-400">
                    /{listing.price.frequency}
                  </span>
                )}
              </span>
            </div>
          )}
          {/* Title */}
          <h3 className="font-semibold text-base text-gray-900 dark:text-white line-clamp-2 leading-tight">
            {listing.title}
          </h3>
          {/* Summary - if exists */}
          {listing.summary && (
            <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
              {listing.summary}
            </p>
          )}
          {/* Metadata */}
          <div className="flex items-center gap-3 text-xs text-gray-500 dark:text-gray-500">
            {listing.location && (
              <div className="flex items-center gap-1">
                <MapPin className="w-3 h-3" />
                <span className="truncate">{listing.location}</span>
              </div>
            )}
            <div className="flex items-center gap-1">
              <Clock className="w-3 h-3" />
              <span>{timeAgo}</span>
            </div>
          </div>
          {/* Seller Info */}
          <div className="pt-3 border-t border-gray-100 dark:border-gray-800 flex items-center gap-2">
            <UserAvatar pubkey={listing.author} size="xs" />
            <span className="text-xs text-gray-500 dark:text-gray-400">
              Posted by
            </span>
          </div>
        </div>
      </Card>
    </Link>
  );
}
</file>

<file path="features/classifieds/components/ListingForm.tsx">
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Plus, X, ImagePlus } from 'lucide-react';
import type { ListingFormData, PriceFrequency } from '../types';
interface ListingFormProps {
  onSubmit: (data: ListingFormData) => Promise<void>;
  initialData?: Partial<ListingFormData>;
  isSubmitting?: boolean;
}
const COMMON_CATEGORIES = [
  'electronics',
  'furniture',
  'clothing',
  'books',
  'services',
  'vehicles',
  'real-estate',
  'jobs',
  'free',
  'wanted'
];
const CURRENCIES = ['USD', 'EUR', 'GBP', 'BTC', 'SATS'];
export function ListingForm({ onSubmit, initialData, isSubmitting }: ListingFormProps) {
  const navigate = useNavigate();
  const [formData, setFormData] = useState<ListingFormData>({
    title: initialData?.title || '',
    summary: initialData?.summary || '',
    content: initialData?.content || '',
    location: initialData?.location || '',
    price: initialData?.price || { amount: '', currency: 'USD' },
    categories: initialData?.categories || [],
    images: initialData?.images || []
  });
  const [newCategory, setNewCategory] = useState('');
  const [newImageUrl, setNewImageUrl] = useState('');
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await onSubmit(formData);
  };
  const addCategory = () => {
    if (newCategory && !formData.categories.includes(newCategory)) {
      setFormData(prev => ({
        ...prev,
        categories: [...prev.categories, newCategory.toLowerCase()]
      }));
      setNewCategory('');
    }
  };
  const removeCategory = (category: string) => {
    setFormData(prev => ({
      ...prev,
      categories: prev.categories.filter(c => c !== category)
    }));
  };
  const addImage = () => {
    if (newImageUrl && !formData.images.includes(newImageUrl)) {
      setFormData(prev => ({
        ...prev,
        images: [...prev.images, newImageUrl]
      }));
      setNewImageUrl('');
    }
  };
  const removeImage = (image: string) => {
    setFormData(prev => ({
      ...prev,
      images: prev.images.filter(i => i !== image)
    }));
  };
  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Listing Details</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="title">Title *</Label>
            <Input
              id="title"
              value={formData.title}
              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
              placeholder="What are you listing?"
              required
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="summary">Summary</Label>
            <Input
              id="summary"
              value={formData.summary}
              onChange={(e) => setFormData(prev => ({ ...prev, summary: e.target.value }))}
              placeholder="Brief description"
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="content">Description *</Label>
            <Textarea
              id="content"
              value={formData.content}
              onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}
              placeholder="Detailed description (Markdown supported)"
              rows={6}
              required
              className="mt-1"
            />
          </div>
          <div>
            <Label htmlFor="location">Location</Label>
            <Input
              id="location"
              value={formData.location}
              onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
              placeholder="City, State or Country"
              className="mt-1"
            />
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Pricing</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label htmlFor="amount">Amount</Label>
              <Input
                id="amount"
                type="text"
                value={formData.price.amount}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  price: { ...prev.price, amount: e.target.value }
                }))}
                placeholder="0.00"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="currency">Currency</Label>
              <Select
                value={formData.price.currency}
                onValueChange={(value) => setFormData(prev => ({
                  ...prev,
                  price: { ...prev.price, currency: value }
                }))}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {CURRENCIES.map(currency => (
                    <SelectItem key={currency} value={currency}>
                      {currency}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="frequency">Frequency</Label>
              <Select
                value={formData.price.frequency || 'once'}
                onValueChange={(value) => setFormData(prev => ({
                  ...prev,
                  price: { ...prev.price, frequency: value as PriceFrequency }
                }))}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="once">One time</SelectItem>
                  <SelectItem value="hour">Per hour</SelectItem>
                  <SelectItem value="day">Per day</SelectItem>
                  <SelectItem value="week">Per week</SelectItem>
                  <SelectItem value="month">Per month</SelectItem>
                  <SelectItem value="year">Per year</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Categories</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Select value={newCategory} onValueChange={setNewCategory}>
              <SelectTrigger className="flex-1">
                <SelectValue placeholder="Select a category" />
              </SelectTrigger>
              <SelectContent>
                {COMMON_CATEGORIES.map(cat => (
                  <SelectItem key={cat} value={cat}>
                    {cat.charAt(0).toUpperCase() + cat.slice(1)}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Input
              value={newCategory}
              onChange={(e) => setNewCategory(e.target.value)}
              placeholder="Or type custom"
              className="flex-1"
            />
            <Button type="button" onClick={addCategory} size="icon">
              <Plus className="w-4 h-4" />
            </Button>
          </div>
          {formData.categories.length > 0 && (
            <div className="flex flex-wrap gap-2">
              {formData.categories.map(category => (
                <div
                  key={category}
                  className="inline-flex items-center gap-1 px-3 py-1 bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400 rounded-full text-sm"
                >
                  <span>{category}</span>
                  <button
                    type="button"
                    onClick={() => removeCategory(category)}
                    className="hover:text-purple-600"
                  >
                    <X className="w-3 h-3" />
                  </button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
      <Card>
        <CardHeader>
          <CardTitle>Images</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-2">
            <Input
              value={newImageUrl}
              onChange={(e) => setNewImageUrl(e.target.value)}
              placeholder="Image URL"
              className="flex-1"
            />
            <Button type="button" onClick={addImage} size="icon">
              <ImagePlus className="w-4 h-4" />
            </Button>
          </div>
          {formData.images.length > 0 && (
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {formData.images.map((image, index) => (
                <div key={index} className="relative group">
                  <img
                    src={image}
                    alt={`Listing image ${index + 1}`}
                    className="w-full h-32 object-cover rounded-lg"
                  />
                  <button
                    type="button"
                    onClick={() => removeImage(image)}
                    className="absolute top-2 right-2 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
      <div className="flex justify-end gap-4">
        <Button
          type="button"
          variant="outline"
          onClick={() => navigate('/marketplace')}
          disabled={isSubmitting}
        >
          Cancel
        </Button>
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? 'Publishing...' : 'Publish Listing'}
        </Button>
      </div>
    </form>
  );
}
</file>

<file path="features/classifieds/components/ListingGrid.tsx">
import type { ClassifiedListing } from '../types';
import { ListingCard } from './ListingCard';
import { Loader2 } from 'lucide-react';
interface ListingGridProps {
  listings: ClassifiedListing[];
  isLoading?: boolean;
}
export function ListingGrid({ listings, isLoading }: ListingGridProps) {
  if (isLoading && listings.length === 0) {
    return (
      <div className="flex items-center justify-center py-12">
        <Loader2 className="w-8 h-8 animate-spin text-purple-600 dark:text-purple-400" />
      </div>
    );
  }
  if (listings.length === 0) {
    return (
      <div className="text-center py-12 px-4">
        <p className="text-gray-500 dark:text-gray-400">
          No listings found. Be the first to post something!
        </p>
      </div>
    );
  }
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {listings.map((listing) => (
        <ListingCard key={listing.id} listing={listing} />
      ))}
    </div>
  );
}
</file>

<file path="features/classifieds/components/PriceTag.tsx">
import type { ListingPrice } from '../types';
interface PriceTagProps {
  price: ListingPrice;
  className?: string;
}
export function PriceTag({ price, className = '' }: PriceTagProps) {
  const formatFrequency = (frequency?: string) => {
    if (!frequency || frequency === 'once') return '';
    return `/${frequency}`;
  };
  return (
    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400 ${className}`}>
      {price.amount} {price.currency}{formatFrequency(price.frequency)}
    </span>
  );
}
</file>

<file path="features/classifieds/hooks/useCreateListing.ts">
import { useNDK, useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent } from '@nostr-dev-kit/ndk';
import { CLASSIFIED_LISTING_KIND, createListingTags } from '../types';
import type { ListingFormData } from '../types';
export function useCreateListing() {
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const createListing = async (data: ListingFormData) => {
    if (!ndk || !currentUser) {
      throw new Error('You must be logged in to create a listing');
    }
    const event = new NDKEvent(ndk);
    event.kind = CLASSIFIED_LISTING_KIND;
    event.content = data.content;
    event.tags = createListingTags(data);
    await event.sign();
    await event.publish();
    return event;
  };
  const updateListing = async (eventId: string, data: ListingFormData) => {
    if (!ndk || !currentUser) {
      throw new Error('You must be logged in to update a listing');
    }
    // For replaceable events (30000-39999), we create a new event with the same 'd' tag
    const event = new NDKEvent(ndk);
    event.kind = CLASSIFIED_LISTING_KIND;
    event.content = data.content;
    event.tags = createListingTags(data);
    // Add the 'd' tag to identify this as a replacement
    event.tags.push(['d', eventId]);
    await event.sign();
    await event.publish();
    return event;
  };
  const deleteListing = async (eventId: string) => {
    if (!ndk || !currentUser) {
      throw new Error('You must be logged in to delete a listing');
    }
    // To delete, we update with a "sold" or "deleted" status
    const event = new NDKEvent(ndk);
    event.kind = CLASSIFIED_LISTING_KIND;
    event.content = '';
    event.tags = [
      ['d', eventId],
      ['status', 'deleted']
    ];
    await event.sign();
    await event.publish();
    return event;
  };
  return {
    createListing,
    updateListing,
    deleteListing,
    isAuthenticated: !!currentUser
  };
}
</file>

<file path="features/classifieds/hooks/useListings.ts">
import { useSubscribe } from '@nostr-dev-kit/ndk-hooks';
import { CLASSIFIED_LISTING_KIND, parseListingFromEvent } from '../types';
import { useMemo } from 'react';
interface UseListingsOptions {
  category?: string;
  author?: string;
  limit?: number;
}
export function useListings(options: UseListingsOptions = {}) {
  const { category, author, limit = 50 } = options;
  // Build filter based on options
  const filters = useMemo(() => {
    const filter: any = {
      kinds: [CLASSIFIED_LISTING_KIND],
      limit
    };
    if (author) {
      filter.authors = [author];
    }
    if (category) {
      filter['#t'] = [category.toLowerCase()];
    }
    return [filter];
  }, [category, author, limit]);
  const { events, eose } = useSubscribe(filters);
  const isLoading = !eose && events.length === 0;
  const listings = useMemo(() => {
    return events
      .map(parseListingFromEvent)
      .filter(listing => listing.status === 'active')
      .sort((a, b) => {
        const timeA = a.publishedAt || 0;
        const timeB = b.publishedAt || 0;
        return timeB - timeA; // Most recent first
      });
  }, [events]);
  return {
    listings,
    isLoading,
    events
  };
}
</file>

<file path="features/classifieds/types.ts">
import { NDKEvent } from '@nostr-dev-kit/ndk';
// NIP-99 Event Kinds
export const CLASSIFIED_LISTING_KIND = 30402;
export const CLASSIFIED_DRAFT_KIND = 30403;
export type ListingStatus = 'active' | 'sold' | 'expired' | 'draft';
export type PriceFrequency = 'once' | 'hour' | 'day' | 'week' | 'month' | 'year';
export interface ListingPrice {
  amount: string;
  currency: string;
  frequency?: PriceFrequency;
}
export interface ClassifiedListing {
  id: string;
  title: string;
  summary?: string;
  content: string; // Markdown content
  author: string; // pubkey
  publishedAt?: number;
  location?: string;
  price?: ListingPrice;
  status?: ListingStatus;
  categories?: string[];
  images?: string[];
  event?: NDKEvent;
}
export interface ListingFormData {
  title: string;
  summary: string;
  content: string;
  location: string;
  price: {
    amount: string;
    currency: string;
    frequency?: PriceFrequency;
  };
  categories: string[];
  images: string[];
}
export function parseListingFromEvent(event: NDKEvent): ClassifiedListing {
  const title = event.tagValue('title') || 'Untitled Listing';
  const summary = event.tagValue('summary');
  const location = event.tagValue('location');
  const status = event.tagValue('status') as ListingStatus || 'active';
  const publishedAt = event.tagValue('published_at');
  // Parse price tag [price, amount, currency, frequency?]
  const priceTag = event.tags.find(tag => tag[0] === 'price');
  let price: ListingPrice | undefined;
  if (priceTag && priceTag.length >= 3) {
    price = {
      amount: priceTag[1],
      currency: priceTag[2],
      frequency: priceTag[3] as PriceFrequency | undefined
    };
  }
  // Parse categories from 't' tags
  const categories = event.tags
    .filter(tag => tag[0] === 't')
    .map(tag => tag[1]);
  // Parse images - handle multiple tag formats used in the wild
  let images: string[] = [];
  // 1. Standard 'image' tags (most common)
  const imageTags = event.tags
    .filter(tag => tag[0] === 'image')
    .map(tag => tag[1]);
  if (imageTags.length > 0) {
    images = imageTags;
  } else {
    // 2. Check for 'r' tags (resource URLs) that look like images
    const rTags = event.tags
      .filter(tag => tag[0] === 'r' && tag[1] &&
        (tag[1].match(/\.(jpg|jpeg|png|gif|webp|svg)/i) ||
         tag[1].includes('image') ||
         tag[1].includes('img')))
      .map(tag => tag[1]);
    if (rTags.length > 0) {
      images = rTags;
    } else {
      // 3. Check for custom image tags (featuredImageUrl, screenshotsUrls, etc.)
      const featuredImage = event.tagValue('featuredImageUrl');
      if (featuredImage) {
        images.push(featuredImage);
      }
      const screenshotsTag = event.tags.find(tag => tag[0] === 'screenshotsUrls');
      if (screenshotsTag) {
        images.push(...screenshotsTag.slice(1));
      }
      // 4. Other fallbacks
      const imgUrl = event.tagValue('imgUrl');
      if (imgUrl) images.push(imgUrl);
    }
  }
  return {
    id: event.id,
    title,
    summary,
    content: event.content,
    author: event.pubkey,
    publishedAt: publishedAt ? parseInt(publishedAt) : event.created_at,
    location,
    price,
    status,
    categories,
    images,
    event
  };
}
export function createListingTags(data: ListingFormData): string[][] {
  const tags: string[][] = [];
  tags.push(['title', data.title]);
  if (data.summary) {
    tags.push(['summary', data.summary]);
  }
  if (data.location) {
    tags.push(['location', data.location]);
  }
  if (data.price && data.price.amount && data.price.currency) {
    const priceTag = ['price', data.price.amount, data.price.currency];
    if (data.price.frequency && data.price.frequency !== 'once') {
      priceTag.push(data.price.frequency);
    }
    tags.push(priceTag);
  }
  tags.push(['published_at', Math.floor(Date.now() / 1000).toString()]);
  tags.push(['status', 'active']);
  data.categories.forEach(category => {
    tags.push(['t', category.toLowerCase()]);
  });
  data.images.forEach(image => {
    tags.push(['image', image]);
  });
  return tags;
}
</file>

<file path="features/feed/ComposeNote.tsx">
import { useState, type FormEvent, useRef, useEffect } from 'react';
import { useNDK, NDKEvent, useNDKCurrentUser, NDKKind, useProfile } from '@nostr-dev-kit/ndk-hooks';
import { Send, Image, Smile, MapPin } from 'lucide-react';
import { cn } from '@/lib/utils';
export function ComposeNote() {
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const profile = useProfile(currentUser?.pubkey);
  const [content, setContent] = useState('');
  const [isPublishing, setIsPublishing] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  // Auto-resize textarea
  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = `${Math.min(textarea.scrollHeight, 300)}px`;
    }
  }, [content]);
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!content.trim() || !currentUser || !ndk) return;
    setIsPublishing(true);
    try {
      const event = new NDKEvent(ndk);
      event.kind = NDKKind.Text;
      event.content = content;
      await event.publish();
      setContent('');
    } catch (error) {
      console.error('Failed to publish note:', error);
    } finally {
      setIsPublishing(false);
    }
  };
  if (!currentUser) {
    return null;
  }
  const displayName = profile?.name || 'Anonymous';
  const remainingChars = 280 - content.length;
  const isOverLimit = remainingChars < 0;
  return (
    <div className="bg-white dark:bg-gray-950 rounded-lg">
      <form onSubmit={handleSubmit}>
        <div className="flex gap-3">
          {/* Avatar */}
          <div className="flex-shrink-0">
            {profile?.picture ? (
              <img
                src={profile.picture}
                alt={displayName}
                className="w-10 h-10 sm:w-12 sm:h-12 rounded-full object-cover"
              />
            ) : (
              <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-semibold">
                {displayName[0]?.toUpperCase()}
              </div>
            )}
          </div>
          {/* Input area */}
          <div className="flex-1">
            <textarea
              ref={textareaRef}
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="What's happening?"
              className="w-full p-0 text-lg placeholder:text-gray-500 dark:placeholder:text-gray-400 bg-transparent resize-none focus:outline-none text-gray-900 dark:text-gray-100 min-h-[60px]"
              disabled={isPublishing}
            />
            {/* Actions bar */}
            <div className="flex items-center justify-between mt-3 pt-3 border-t border-gray-200 dark:border-gray-800">
              <div className="flex items-center gap-1">
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add image (coming soon)"
                >
                  <Image className="w-5 h-5" />
                </button>
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add emoji (coming soon)"
                >
                  <Smile className="w-5 h-5" />
                </button>
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add location (coming soon)"
                >
                  <MapPin className="w-5 h-5" />
                </button>
              </div>
              <div className="flex items-center gap-3">
                {/* Character counter */}
                {content.length > 0 && (
                  <div className="relative">
                    <svg className="w-8 h-8 -rotate-90">
                      <circle
                        cx="16"
                        cy="16"
                        r="14"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        className="text-gray-200 dark:text-gray-700"
                      />
                      <circle
                        cx="16"
                        cy="16"
                        r="14"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeDasharray={`${Math.max(0, (Math.min(280, content.length) / 280) * 88)} 88`}
                        strokeLinecap="round"
                        className={cn(
                          "transition-all duration-150",
                          isOverLimit ? "text-red-500" : 
                          remainingChars < 20 ? "text-yellow-500" : 
                          "text-purple-500"
                        )}
                      />
                    </svg>
                    {remainingChars < 20 && (
                      <span className={cn(
                        "absolute inset-0 flex items-center justify-center text-xs font-medium",
                        isOverLimit ? "text-red-500" : "text-gray-500 dark:text-gray-400"
                      )}>
                        {remainingChars}
                      </span>
                    )}
                  </div>
                )}
                {/* Publish button */}
                <button
                  type="submit"
                  disabled={!content.trim() || isPublishing || isOverLimit}
                  className={cn(
                    "px-4 py-1.5 rounded-full font-medium transition-all",
                    (!content.trim() || isOverLimit)
                      ? "bg-gray-200 text-gray-400 dark:bg-gray-800 dark:text-gray-600 cursor-not-allowed"
                      : "bg-purple-600 text-white hover:bg-purple-700 dark:bg-purple-500 dark:hover:bg-purple-600"
                  )}
                >
                  {isPublishing ? (
                    <span className="flex items-center gap-2">
                      <span className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                      Publishing
                    </span>
                  ) : (
                    'Publish'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}
</file>

<file path="features/feed/NoteCard.tsx">
import { type NDKEvent, useProfile, useNDK, NDKKind, useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { formatDistanceToNow } from 'date-fns';
import { Heart, MessageCircle, Repeat2, Share, MoreHorizontal } from 'lucide-react';
import { useState } from 'react';
import { cn } from '@/lib/utils';
import { ZapButton } from '@/components/wallet/ZapButton';
import { UserAvatar } from '@/components/ui/UserAvatar';
import { Link } from 'react-router-dom';
interface NoteCardProps {
  event: NDKEvent;
}
export function NoteCard({ event }: NoteCardProps) {
  const profile = useProfile(event.author.pubkey);
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const [isLiked, setIsLiked] = useState(false);
  const [likeCount, setLikeCount] = useState(0);
  const handleLike = async () => {
    if (!currentUser || !ndk) return;
    try {
      const reaction = new NDKEvent(ndk);
      reaction.kind = NDKKind.Reaction;
      reaction.content = isLiked ? '-' : '+';
      reaction.tags = [
        ['e', event.id],
        ['p', event.pubkey]
      ];
      await reaction.publish();
      setIsLiked(!isLiked);
      setLikeCount(prev => isLiked ? prev - 1 : prev + 1);
    } catch (error) {
      console.error('Failed to publish reaction:', error);
    }
  };
  const handleRepost = async () => {
    if (!currentUser || !ndk) return;
    try {
      const repost = new NDKEvent(ndk);
      repost.kind = NDKKind.Repost;
      repost.content = '';
      repost.tags = [
        ['e', event.id],
        ['p', event.pubkey]
      ];
      await repost.publish();
    } catch (error) {
      console.error('Failed to repost:', error);
    }
  };
  const displayName = profile?.name || 'Anonymous';
  const handle = profile?.nip05 ? `@${profile.nip05.split('@')[0]}` : `@${event.author?.npub?.slice(5, 12)}`;
  return (
    <article className="bg-white dark:bg-gray-900/50 border-b border-gray-100 dark:border-gray-800/50 hover:bg-gray-50 dark:hover:bg-gray-900/80 transition-all duration-200 animate-fade-in">
      <div className="px-4 py-4 sm:px-6">
        {/* Header */}
        <div className="flex items-start gap-3">
          {/* Avatar */}
          <Link to={`/profile/${event.author.pubkey}`} className="flex-shrink-0">
            <UserAvatar
              pubkey={event.author.pubkey}
              size="md"
              className="w-12 h-12 sm:w-14 sm:h-14 ring-2 ring-white dark:ring-gray-800 shadow-soft hover:shadow-soft-lg hover:scale-105 transition-all duration-200"
            />
          </Link>
          {/* Content */}
          <div className="flex-1 min-w-0">
            {/* Author info */}
            <div className="flex items-center gap-2 flex-wrap">
              <Link
                to={`/profile/${event.author.pubkey}`}
                className="flex items-center gap-1.5 hover:opacity-80 transition-opacity"
              >
                <span className="font-bold text-base text-gray-900 dark:text-gray-100">
                  {displayName}
                </span>
                <span className="text-gray-500 dark:text-gray-400 text-sm font-normal">
                  {handle}
                </span>
              </Link>
              <span className="text-gray-300 dark:text-gray-600 text-xs">·</span>
              <time className="text-gray-500 dark:text-gray-400 text-sm hover:underline cursor-help">
                {formatDistanceToNow(new Date(event.created_at! * 1000), { addSuffix: true })}
              </time>
            </div>
            {/* Note content */}
            <div className="mt-2.5">
              <p className="text-gray-900 dark:text-gray-100 text-base leading-relaxed whitespace-pre-wrap break-words">
                {event.content}
              </p>
            </div>
            {/* Action buttons */}
            <div className="flex items-center justify-between mt-4 -ml-2">
              <div className="flex items-center gap-2">
                <button
                  onClick={() => {/* TODO: Implement reply */}}
                  className="group flex items-center gap-2 p-3 rounded-xl hover:bg-blue-50 dark:hover:bg-blue-950/20 transition-all duration-200 active:scale-95"
                  disabled={!currentUser}
                >
                  <MessageCircle className="w-5 h-5 text-gray-500 group-hover:text-blue-500 dark:text-gray-400 dark:group-hover:text-blue-400" />
                  {0 > 0 && (
                    <span className="text-sm text-gray-500 group-hover:text-blue-500 dark:text-gray-400 dark:group-hover:text-blue-400 font-medium">
                      0
                    </span>
                  )}
                </button>
                <button
                  onClick={handleRepost}
                  className="group flex items-center gap-2 p-3 rounded-xl hover:bg-green-50 dark:hover:bg-green-950/20 transition-all duration-200 active:scale-95"
                  disabled={!currentUser}
                >
                  <Repeat2 className="w-5 h-5 text-gray-500 group-hover:text-green-500 dark:text-gray-400 dark:group-hover:text-green-400" />
                  {0 > 0 && (
                    <span className="text-sm text-gray-500 group-hover:text-green-500 dark:text-gray-400 dark:group-hover:text-green-400 font-medium">
                      0
                    </span>
                  )}
                </button>
                <button
                  onClick={handleLike}
                  className={cn(
                    "group flex items-center gap-2 p-3 rounded-xl transition-all duration-200 active:scale-95",
                    isLiked
                      ? "bg-pink-50 dark:bg-pink-950/20"
                      : "hover:bg-pink-50 dark:hover:bg-pink-950/20"
                  )}
                  disabled={!currentUser}
                >
                  <Heart
                    className={cn(
                      "w-5 h-5 transition-all duration-200",
                      isLiked
                        ? "fill-current text-pink-500 dark:text-pink-400 scale-110"
                        : "text-gray-500 group-hover:text-pink-500 dark:text-gray-400 dark:group-hover:text-pink-400"
                    )}
                  />
                  {likeCount > 0 && (
                    <span className={cn(
                      "text-sm font-medium",
                      isLiked
                        ? "text-pink-500 dark:text-pink-400"
                        : "text-gray-500 group-hover:text-pink-500 dark:text-gray-400 dark:group-hover:text-pink-400"
                    )}>
                      {likeCount}
                    </span>
                  )}
                </button>
                {/* Zap Button */}
                <ZapButton
                  eventId={event.id}
                  authorPubkey={event.pubkey}
                  onZap={(amount) => console.log(`Zapped ${amount} sats to`, event.pubkey)}
                />
                <button
                  onClick={() => {/* TODO: Implement share */}}
                  className="group p-3 rounded-xl hover:bg-blue-50 dark:hover:bg-blue-950/20 transition-all duration-200 active:scale-95"
                >
                  <Share className="w-5 h-5 text-gray-500 group-hover:text-blue-500 dark:text-gray-400 dark:group-hover:text-blue-400" />
                </button>
              </div>
              <button className="p-2 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200">
                <MoreHorizontal className="w-5 h-5 text-gray-500 dark:text-gray-400" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </article>
  );
}
</file>

<file path="features/feed/NoteFeed.tsx">
import { useSubscribe, NDKKind } from '@nostr-dev-kit/ndk-hooks';
import { NoteCard } from './NoteCard';
import { Loader2 } from 'lucide-react';
export function NoteFeed() {
  const { events, isLoading } = useSubscribe([{
    kinds: [NDKKind.Text],
    limit: 20,
  }]);
  if (isLoading && events.length === 0) {
    return (
      <div className="flex items-center justify-center py-12">
        <Loader2 className="w-8 h-8 animate-spin text-purple-600 dark:text-purple-400" />
      </div>
    );
  }
  if (events.length === 0) {
    return (
      <div className="text-center py-12 px-4">
        <p className="text-gray-500 dark:text-gray-400">
          No notes yet. Be the first to share something!
        </p>
      </div>
    );
  }
  return (
    <div className="divide-y divide-gray-200 dark:divide-gray-800">
      {events.map((event) => (
        <NoteCard key={event.id} event={event} />
      ))}
    </div>
  );
}
</file>

<file path="features/settings/NotificationSettings.tsx">
export function NotificationSettings() {
  return (
    <div className="text-center py-12 text-gray-500">
      Notification settings coming soon...
    </div>
  );
}
</file>

<file path="features/settings/PrivacySettings.tsx">
export function PrivacySettings() {
  return (
    <div className="text-center py-12 text-gray-500">
      Privacy settings coming soon...
    </div>
  );
}
</file>

<file path="features/settings/ProfileSettings.tsx">
export function ProfileSettings() {
  return (
    <div className="text-center py-12 text-gray-500">
      Profile settings coming soon...
    </div>
  );
}
</file>

<file path="features/settings/RelaySettings.tsx">
import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Plus,
  Trash2,
  Check,
  X,
  Zap,
  BookOpen,
  Edit2,
  Globe,
  AlertCircle,
  WifiOff,
  Wifi
} from 'lucide-react';
import { useSettingsStore, type Relay } from '@/stores/settingsStore';
import { cn } from '@/lib/utils';
export function RelaySettings() {
  const { relays, addRelay, removeRelay, updateRelay, toggleRelay } = useSettingsStore();
  const [isAdding, setIsAdding] = useState(false);
  const [newRelay, setNewRelay] = useState({ url: '', read: true, write: true });
  const [testingRelay, setTestingRelay] = useState<string | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<Record<string, 'connected' | 'disconnected' | 'testing'>>({});
  const handleAddRelay = () => {
    if (newRelay.url && !relays.some(r => r.url === newRelay.url)) {
      addRelay({
        ...newRelay,
        enabled: true,
        url: newRelay.url.startsWith('wss://') ? newRelay.url : `wss://${newRelay.url}`,
      });
      setNewRelay({ url: '', read: true, write: true });
      setIsAdding(false);
    }
  };
  const testRelayConnection = async (url: string) => {
    setTestingRelay(url);
    setConnectionStatus(prev => ({ ...prev, [url]: 'testing' }));
    // Mock connection test
    setTimeout(() => {
      const isConnected = Math.random() > 0.3; // 70% success rate for demo
      setConnectionStatus(prev => ({
        ...prev,
        [url]: isConnected ? 'connected' : 'disconnected'
      }));
      setTestingRelay(null);
    }, 1500);
  };
  const getRelayStatus = (url: string) => {
    if (testingRelay === url) return 'testing';
    return connectionStatus[url] || 'disconnected';
  };
  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
          Relay Configuration
        </h2>
        <p className="text-sm text-gray-600 dark:text-gray-400">
          Configure which Nostr relays your app connects to for reading and publishing events.
        </p>
      </div>
      {/* Stats */}
      <div className="grid grid-cols-3 gap-2 md:gap-4">
        <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-3 md:p-4">
          <div className="flex items-center gap-1 md:gap-2 text-green-600 dark:text-green-400 mb-1">
            <Wifi className="w-3 h-3 md:w-4 md:h-4" />
            <span className="text-xs md:text-sm font-medium">Active</span>
          </div>
          <div className="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">
            {relays.filter(r => r.enabled).length}
          </div>
        </div>
        <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-3 md:p-4">
          <div className="flex items-center gap-1 md:gap-2 text-blue-600 dark:text-blue-400 mb-1">
            <BookOpen className="w-3 h-3 md:w-4 md:h-4" />
            <span className="text-xs md:text-sm font-medium">Read</span>
          </div>
          <div className="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">
            {relays.filter(r => r.enabled && r.read).length}
          </div>
        </div>
        <div className="bg-gray-50 dark:bg-gray-900 rounded-lg p-3 md:p-4">
          <div className="flex items-center gap-1 md:gap-2 text-purple-600 dark:text-purple-400 mb-1">
            <Edit2 className="w-3 h-3 md:w-4 md:h-4" />
            <span className="text-xs md:text-sm font-medium">Write</span>
          </div>
          <div className="text-xl md:text-2xl font-bold text-gray-900 dark:text-gray-100">
            {relays.filter(r => r.enabled && r.write).length}
          </div>
        </div>
      </div>
      {/* Relay List */}
      <div className="space-y-2">
        <AnimatePresence>
          {relays.map((relay) => {
            const status = getRelayStatus(relay.url);
            return (
              <motion.div
                key={relay.url}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                className={cn(
                  'border rounded-lg p-4 transition-all',
                  relay.enabled
                    ? 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700'
                    : 'bg-gray-50 dark:bg-gray-900 border-gray-200 dark:border-gray-800 opacity-60'
                )}
              >
                <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-3">
                  <div className="flex-1">
                    <div className="flex items-start md:items-center gap-3">
                      <button
                        onClick={() => toggleRelay(relay.url)}
                        className={cn(
                          'w-5 h-5 rounded-full border-2 flex items-center justify-center transition-all flex-shrink-0 mt-0.5 md:mt-0',
                          relay.enabled
                            ? 'bg-purple-600 border-purple-600'
                            : 'bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600'
                        )}
                      >
                        {relay.enabled && <Check className="w-3 h-3 text-white" />}
                      </button>
                      <div className="flex-1 min-w-0">
                        <div className="flex flex-wrap items-center gap-2">
                          <Globe className="w-4 h-4 text-gray-400 flex-shrink-0" />
                          <span className="font-mono text-xs md:text-sm text-gray-900 dark:text-gray-100 break-all">
                            {relay.url}
                          </span>
                          {status === 'connected' && (
                            <span className="text-xs bg-green-100 dark:bg-green-950 text-green-700 dark:text-green-400 px-2 py-0.5 rounded-full">
                              Connected
                            </span>
                          )}
                          {status === 'disconnected' && connectionStatus[relay.url] !== undefined && (
                            <span className="text-xs bg-red-100 dark:bg-red-950 text-red-700 dark:text-red-400 px-2 py-0.5 rounded-full">
                              Offline
                            </span>
                          )}
                          {status === 'testing' && (
                            <span className="text-xs bg-yellow-100 dark:bg-yellow-950 text-yellow-700 dark:text-yellow-400 px-2 py-0.5 rounded-full">
                              Testing...
                            </span>
                          )}
                        </div>
                        <div className="flex items-center gap-4 mt-2">
                          <label className="flex items-center gap-2 cursor-pointer">
                            <input
                              type="checkbox"
                              checked={relay.read}
                              onChange={(e) => updateRelay(relay.url, { read: e.target.checked })}
                              className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                            />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                              Read
                            </span>
                          </label>
                          <label className="flex items-center gap-2 cursor-pointer">
                            <input
                              type="checkbox"
                              checked={relay.write}
                              onChange={(e) => updateRelay(relay.url, { write: e.target.checked })}
                              className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                            />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                              Write
                            </span>
                          </label>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2 ml-8 md:ml-0">
                    <button
                      onClick={() => testRelayConnection(relay.url)}
                      disabled={testingRelay === relay.url}
                      className="p-1.5 md:p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors disabled:opacity-50"
                      title="Test connection"
                    >
                      <Zap className="w-4 h-4 text-gray-500" />
                    </button>
                    <button
                      onClick={() => removeRelay(relay.url)}
                      className="p-1.5 md:p-2 hover:bg-red-50 dark:hover:bg-red-950/30 rounded-lg transition-colors group"
                      title="Remove relay"
                    >
                      <Trash2 className="w-4 h-4 text-gray-500 group-hover:text-red-600" />
                    </button>
                  </div>
                </div>
              </motion.div>
            );
          })}
        </AnimatePresence>
        {/* Add New Relay */}
        <AnimatePresence>
          {isAdding ? (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="border-2 border-dashed border-purple-300 dark:border-purple-700 rounded-lg p-4"
            >
              <div className="space-y-3">
                <input
                  type="text"
                  value={newRelay.url}
                  onChange={(e) => setNewRelay({ ...newRelay, url: e.target.value })}
                  placeholder="wss://relay.example.com"
                  className="w-full px-3 py-2 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
                  autoFocus
                />
                <div className="flex items-center gap-4">
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={newRelay.read}
                      onChange={(e) => setNewRelay({ ...newRelay, read: e.target.checked })}
                      className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                    />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Read</span>
                  </label>
                  <label className="flex items-center gap-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={newRelay.write}
                      onChange={(e) => setNewRelay({ ...newRelay, write: e.target.checked })}
                      className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                    />
                    <span className="text-sm text-gray-600 dark:text-gray-400">Write</span>
                  </label>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={handleAddRelay}
                    disabled={!newRelay.url}
                    className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    Add Relay
                  </button>
                  <button
                    onClick={() => {
                      setIsAdding(false);
                      setNewRelay({ url: '', read: true, write: true });
                    }}
                    className="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                  >
                    Cancel
                  </button>
                </div>
              </div>
            </motion.div>
          ) : (
            <motion.button
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              onClick={() => setIsAdding(true)}
              className="w-full border-2 border-dashed border-gray-300 dark:border-gray-700 rounded-lg p-4 hover:border-purple-400 dark:hover:border-purple-600 transition-colors group"
            >
              <div className="flex items-center justify-center gap-2 text-gray-500 group-hover:text-purple-600 dark:group-hover:text-purple-400">
                <Plus className="w-5 h-5" />
                <span className="font-medium">Add Relay</span>
              </div>
            </motion.button>
          )}
        </AnimatePresence>
      </div>
      {/* Warning */}
      <div className="bg-yellow-50 dark:bg-yellow-950/30 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
        <div className="flex gap-3">
          <AlertCircle className="w-5 h-5 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5" />
          <div className="text-sm text-yellow-800 dark:text-yellow-300">
            <p className="font-medium mb-1">Important</p>
            <p>Changes to relay configuration will take effect after refreshing the app.</p>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="features/settings/ThemeSettings.tsx">
export function ThemeSettings() {
  return (
    <div className="text-center py-12 text-gray-500">
      Theme settings coming soon...
    </div>
  );
}
</file>

<file path="features/trades/CompactFilters.tsx">
import { ChevronDown } from 'lucide-react';
import { useState, useRef, useEffect } from 'react';
interface CompactFiltersProps {
  filters: {
    currency: string;
    paymentMethod: string;
    orderType: 'all' | 'buy' | 'sell';
  };
  onFiltersChange: (filters: any) => void;
}
const orderTypes = [
  { value: 'all', label: 'All', color: 'text-gray-700' },
  { value: 'buy', label: 'Buy', color: 'text-green-600' },
  { value: 'sell', label: 'Sell', color: 'text-red-600' },
];
const currencies = [
  { code: 'all', name: 'All', flag: '🌍' },
  { code: 'USD', name: 'USD', flag: '🇺🇸' },
  { code: 'EUR', name: 'EUR', flag: '🇪🇺' },
  { code: 'BRL', name: 'BRL', flag: '🇧🇷' },
  { code: 'ARS', name: 'ARS', flag: '🇦🇷' },
  { code: 'GBP', name: 'GBP', flag: '🇬🇧' },
  { code: 'PLN', name: 'PLN', flag: '🇵🇱' },
  { code: 'JPY', name: 'JPY', flag: '🇯🇵' },
];
const paymentMethods = [
  { id: 'all', name: 'All', icon: '💰' },
  { id: 'Cash', name: 'Cash', icon: '💵' },
  { id: 'PIX', name: 'PIX', icon: '🔄' },
  { id: 'BLIK', name: 'BLIK', icon: '📱' },
  { id: 'Revolut', name: 'Revolut', icon: '💳' },
  { id: 'Zelle', name: 'Zelle', icon: '🏦' },
  { id: 'CashApp', name: 'CashApp', icon: '📲' },
];
function Dropdown({
  value,
  options,
  onChange,
  renderOption,
  renderValue,
  className = ''
}: any) {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    }
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);
  return (
    <div ref={dropdownRef} className={`relative ${className}`}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-1 px-3 py-1.5 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-lg text-sm font-medium hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
      >
        {renderValue(value)}
        <ChevronDown className={`w-3 h-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      {isOpen && (
        <div className="absolute top-full mt-1 left-0 w-max min-w-[120px] bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-[100] max-h-64 overflow-y-auto">
          {options.map((option: any) => (
            <button
              key={option.value || option.code || option.id}
              onClick={() => {
                onChange(option);
                setIsOpen(false);
              }}
              className="w-full flex items-center gap-2 px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-left"
            >
              {renderOption(option)}
            </button>
          ))}
        </div>
      )}
    </div>
  );
}
export function CompactFilters({ filters, onFiltersChange }: CompactFiltersProps) {
  const selectedOrderType = orderTypes.find(t => t.value === filters.orderType);
  const selectedCurrency = currencies.find(c => c.code === filters.currency);
  const selectedPayment = paymentMethods.find(p => p.id === filters.paymentMethod);
  return (
    <div className="relative flex items-center gap-2 p-3 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 overflow-visible">
      {/* Order Type Dropdown */}
      <Dropdown
        value={filters.orderType}
        options={orderTypes}
        onChange={(option: any) => onFiltersChange({ ...filters, orderType: option.value })}
        renderValue={() => (
          <span className={selectedOrderType?.color}>
            {selectedOrderType?.label}
          </span>
        )}
        renderOption={(option: any) => (
          <span className={`text-sm font-medium ${option.color}`}>
            {option.label}
          </span>
        )}
      />
      {/* Currency Dropdown */}
      <Dropdown
        value={filters.currency}
        options={currencies}
        onChange={(option: any) => onFiltersChange({ ...filters, currency: option.code })}
        renderValue={() => (
          <>
            <span>{selectedCurrency?.flag}</span>
            <span>{selectedCurrency?.code === 'all' ? 'Currency' : selectedCurrency?.name}</span>
          </>
        )}
        renderOption={(option: any) => (
          <>
            <span className="text-lg">{option.flag}</span>
            <span className="text-sm">{option.code === 'all' ? 'All Currencies' : option.name}</span>
          </>
        )}
      />
      {/* Payment Method Dropdown */}
      <Dropdown
        value={filters.paymentMethod}
        options={paymentMethods}
        onChange={(option: any) => onFiltersChange({ ...filters, paymentMethod: option.id })}
        renderValue={() => (
          <>
            <span>{selectedPayment?.icon}</span>
            <span>{selectedPayment?.id === 'all' ? 'Payment' : selectedPayment?.name}</span>
          </>
        )}
        renderOption={(option: any) => (
          <>
            <span className="text-lg">{option.icon}</span>
            <span className="text-sm">{option.id === 'all' ? 'All Methods' : option.name}</span>
          </>
        )}
      />
      {/* Clear filters button - only show if filters are active */}
      {(filters.currency !== 'all' || filters.paymentMethod !== 'all' || filters.orderType !== 'all') && (
        <button
          onClick={() => onFiltersChange({
            ...filters,
            currency: 'all',
            paymentMethod: 'all',
            orderType: 'all'
          })}
          className="ml-auto px-2 py-1 text-xs text-purple-600 dark:text-purple-400 hover:underline"
        >
          Clear
        </button>
      )}
    </div>
  );
}
</file>

<file path="features/trades/CreateOrderModal.tsx">
import { useState } from 'react';
import { X, Bitcoin } from 'lucide-react';
import { useNDK } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent } from '@nostr-dev-kit/ndk';
interface CreateOrderModalProps {
  onClose: () => void;
}
const currencies = [
  { code: 'USD', symbol: '$', name: 'US Dollar' },
  { code: 'EUR', symbol: '€', name: 'Euro' },
  { code: 'GBP', symbol: '£', name: 'British Pound' },
  { code: 'BRL', symbol: 'R$', name: 'Brazilian Real' },
  { code: 'ARS', symbol: '$', name: 'Argentine Peso' },
  { code: 'PLN', symbol: 'zł', name: 'Polish Złoty' },
];
const paymentMethods = [
  { id: 'Cash', name: 'Cash (F2F)', icon: '💵' },
  { id: 'Revolut', name: 'Revolut', icon: '💳' },
  { id: 'PIX', name: 'PIX (Brazil)', icon: '🔄' },
  { id: 'BLIK', name: 'BLIK (Poland)', icon: '📱' },
  { id: 'Zelle', name: 'Zelle', icon: '🏦' },
  { id: 'CashApp', name: 'Cash App', icon: '📲' },
];
export function CreateOrderModal({ onClose }: CreateOrderModalProps) {
  const { ndk } = useNDK();
  const [orderType, setOrderType] = useState<'buy' | 'sell'>('buy');
  const [currency, setCurrency] = useState('USD');
  const [satsAmount, setSatsAmount] = useState('100000');
  const [fiatAmount, setFiatAmount] = useState('50');
  const [paymentMethod, setPaymentMethod] = useState('Cash');
  const [premium, setPremium] = useState('0');
  const [expirationHours, setExpirationHours] = useState('24');
  const [creating, setCreating] = useState(false);
  const handleCreate = async () => {
    if (!ndk) return;
    setCreating(true);
    try {
      const event = new NDKEvent(ndk);
      event.kind = 38383;
      // Generate unique ID
      const orderId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      event.tags = [
        ['d', orderId],
        ['k', orderType],
        ['f', currency],
        ['s', 'pending'],
        ['amt', satsAmount],
        ['fa', fiatAmount],
        ['pm', paymentMethod],
        ['premium', premium],
        ['y', 'Voces'],
        ['z', 'order'],
        ['network', 'mainnet'],
        ['layer', 'lightning'],
        ['expiration', (Math.floor(Date.now() / 1000) + parseInt(expirationHours) * 3600).toString()]
      ];
      event.content = '';
      await event.publish();
      onClose();
    } catch (error) {
      console.error('Failed to create order:', error);
    } finally {
      setCreating(false);
    }
  };
  const btcAmount = parseInt(satsAmount) / 100000000;
  const pricePerBtc = parseFloat(fiatAmount) / btcAmount;
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
      <div className="bg-white dark:bg-gray-900 rounded-2xl max-w-lg w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 p-6">
          <div className="flex items-center justify-between">
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
              Create P2P Order
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>
        <div className="p-6 space-y-6">
          {/* Order Type */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Order Type
            </label>
            <div className="grid grid-cols-2 gap-3">
              <button
                onClick={() => setOrderType('buy')}
                className={`px-4 py-3 rounded-lg border-2 transition-colors ${
                  orderType === 'buy'
                    ? 'border-green-500 bg-green-50 text-green-700 dark:bg-green-900/30 dark:text-green-400'
                    : 'border-gray-300 dark:border-gray-700'
                }`}
              >
                I want to buy Bitcoin
              </button>
              <button
                onClick={() => setOrderType('sell')}
                className={`px-4 py-3 rounded-lg border-2 transition-colors ${
                  orderType === 'sell'
                    ? 'border-red-500 bg-red-50 text-red-700 dark:bg-red-900/30 dark:text-red-400'
                    : 'border-gray-300 dark:border-gray-700'
                }`}
              >
                I want to sell Bitcoin
              </button>
            </div>
          </div>
          {/* Bitcoin Amount */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Bitcoin Amount (sats)
            </label>
            <div className="relative">
              <Bitcoin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-orange-500" />
              <input
                type="number"
                value={satsAmount}
                onChange={(e) => setSatsAmount(e.target.value)}
                className="w-full pl-10 pr-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                placeholder="100000"
              />
            </div>
            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
              = {btcAmount.toFixed(8)} BTC
            </p>
          </div>
          {/* Fiat Amount & Currency */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Fiat Amount
              </label>
              <input
                type="number"
                value={fiatAmount}
                onChange={(e) => setFiatAmount(e.target.value)}
                className="w-full px-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                placeholder="50"
              />
              <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
                ≈ ${pricePerBtc.toFixed(2)}/BTC
              </p>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Currency
              </label>
              <select
                value={currency}
                onChange={(e) => setCurrency(e.target.value)}
                className="w-full px-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
              >
                {currencies.map((curr) => (
                  <option key={curr.code} value={curr.code}>
                    {curr.symbol} {curr.code}
                  </option>
                ))}
              </select>
            </div>
          </div>
          {/* Payment Method */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Payment Method
            </label>
            <div className="grid grid-cols-2 gap-3">
              {paymentMethods.map((method) => (
                <button
                  key={method.id}
                  onClick={() => setPaymentMethod(method.id)}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg border-2 transition-colors ${
                    paymentMethod === method.id
                      ? 'border-purple-500 bg-purple-50 dark:bg-purple-900/30'
                      : 'border-gray-300 dark:border-gray-700'
                  }`}
                >
                  <span className="text-lg">{method.icon}</span>
                  <span className="text-sm">{method.name}</span>
                </button>
              ))}
            </div>
          </div>
          {/* Premium */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Premium (%)
            </label>
            <input
              type="number"
              value={premium}
              onChange={(e) => setPremium(e.target.value)}
              className="w-full px-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
              placeholder="0"
            />
            <p className="mt-1 text-xs text-gray-500 dark:text-gray-400">
              Positive for above market, negative for below
            </p>
          </div>
          {/* Expiration */}
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Expiration (hours)
            </label>
            <select
              value={expirationHours}
              onChange={(e) => setExpirationHours(e.target.value)}
              className="w-full px-3 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
            >
              <option value="1">1 hour</option>
              <option value="6">6 hours</option>
              <option value="12">12 hours</option>
              <option value="24">24 hours</option>
              <option value="48">48 hours</option>
              <option value="72">72 hours</option>
            </select>
          </div>
          {/* Action Buttons */}
          <div className="flex gap-3">
            <button
              onClick={onClose}
              className="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleCreate}
              disabled={creating || !satsAmount || !fiatAmount}
              className="flex-1 px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {creating ? 'Creating...' : 'Create Order'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="features/trades/MobileFilters.tsx">
import { useState } from 'react';
import { Filter, X } from 'lucide-react';
interface MobileFiltersProps {
  selectedCurrency: string;
  selectedPaymentMethod: string;
  onCurrencyChange: (currency: string) => void;
  onPaymentMethodChange: (method: string) => void;
}
const currencies = [
  { code: 'all', flag: '🌍' },
  { code: 'USD', flag: '🇺🇸' },
  { code: 'EUR', flag: '🇪🇺' },
  { code: 'BRL', flag: '🇧🇷' },
  { code: 'ARS', flag: '🇦🇷' },
  { code: 'GBP', flag: '🇬🇧' },
  { code: 'PLN', flag: '🇵🇱' },
  { code: 'JPY', flag: '🇯🇵' },
];
const paymentMethods = [
  { id: 'all', name: 'All', icon: '💰' },
  { id: 'Cash', name: 'Cash', icon: '💵' },
  { id: 'PIX', name: 'PIX', icon: '🔄' },
  { id: 'BLIK', name: 'BLIK', icon: '📱' },
  { id: 'Revolut', name: 'Revolut', icon: '💳' },
  { id: 'Zelle', name: 'Zelle', icon: '🏦' },
];
export function MobileFilters({
  selectedCurrency,
  selectedPaymentMethod,
  onCurrencyChange,
  onPaymentMethodChange,
}: MobileFiltersProps) {
  const [showFilters, setShowFilters] = useState(false);
  const selectedCurrencyData = currencies.find(c => c.code === selectedCurrency);
  const selectedPaymentData = paymentMethods.find(p => p.id === selectedPaymentMethod);
  return (
    <>
      {/* Compact Filter Bar */}
      <div className="flex gap-2 p-3 bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800">
        <button
          onClick={() => setShowFilters(true)}
          className="flex-1 flex items-center justify-center gap-2 px-3 py-2 bg-gray-100 dark:bg-gray-800 rounded-lg text-sm"
        >
          <Filter className="w-4 h-4" />
          <span className="font-medium">Filters</span>
          {(selectedCurrency !== 'all' || selectedPaymentMethod !== 'all') && (
            <span className="px-2 py-0.5 bg-purple-600 text-white rounded-full text-xs">
              {[selectedCurrency !== 'all' && selectedCurrency, selectedPaymentMethod !== 'all' && selectedPaymentMethod].filter(Boolean).length}
            </span>
          )}
        </button>
        {selectedCurrency !== 'all' && (
          <button
            onClick={() => onCurrencyChange('all')}
            className="flex items-center gap-1 px-3 py-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg text-sm"
          >
            <span>{selectedCurrencyData?.flag}</span>
            <span className="font-medium">{selectedCurrency}</span>
            <X className="w-3 h-3" />
          </button>
        )}
        {selectedPaymentMethod !== 'all' && (
          <button
            onClick={() => onPaymentMethodChange('all')}
            className="flex items-center gap-1 px-3 py-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg text-sm"
          >
            <span>{selectedPaymentData?.icon}</span>
            <span className="font-medium">{selectedPaymentMethod}</span>
            <X className="w-3 h-3" />
          </button>
        )}
      </div>
      {/* Full Screen Filter Modal */}
      {showFilters && (
        <div className="fixed inset-0 z-50 bg-white dark:bg-gray-900">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-800">
            <h2 className="text-lg font-semibold">Filters</h2>
            <button
              onClick={() => setShowFilters(false)}
              className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          {/* Filter Content */}
          <div className="p-4 space-y-6 overflow-y-auto max-h-[calc(100vh-140px)]">
            {/* Currency */}
            <div>
              <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Currency</h3>
              <div className="grid grid-cols-4 gap-2">
                {currencies.map((currency) => (
                  <button
                    key={currency.code}
                    onClick={() => onCurrencyChange(currency.code)}
                    className={`
                      flex flex-col items-center gap-1 p-3 rounded-lg transition-all
                      ${selectedCurrency === currency.code
                        ? 'bg-purple-600 text-white'
                        : 'bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700'
                      }
                    `}
                  >
                    <span className="text-2xl">{currency.flag}</span>
                    <span className="text-xs font-medium">{currency.code === 'all' ? 'All' : currency.code}</span>
                  </button>
                ))}
              </div>
            </div>
            {/* Payment Method */}
            <div>
              <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">Payment Method</h3>
              <div className="space-y-2">
                {paymentMethods.map((method) => (
                  <button
                    key={method.id}
                    onClick={() => onPaymentMethodChange(method.id)}
                    className={`
                      w-full flex items-center gap-3 p-3 rounded-lg transition-all
                      ${selectedPaymentMethod === method.id
                        ? 'bg-purple-600 text-white'
                        : 'bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700'
                      }
                    `}
                  >
                    <span className="text-xl">{method.icon}</span>
                    <span className="font-medium">{method.name}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>
          {/* Footer */}
          <div className="absolute bottom-0 left-0 right-0 p-4 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800">
            <div className="flex gap-2">
              <button
                onClick={() => {
                  onCurrencyChange('all');
                  onPaymentMethodChange('all');
                }}
                className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800"
              >
                Clear All
              </button>
              <button
                onClick={() => setShowFilters(false)}
                className="flex-1 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700"
              >
                Apply Filters
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
</file>

<file path="features/trades/OrderBook.tsx">
import { useEffect, useState } from 'react';
import { useNDK } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent, type NDKFilter } from '@nostr-dev-kit/ndk';
import { OrderCard } from './OrderCard';
interface Order {
  id: string;
  pubkey: string;
  type: 'buy' | 'sell';
  currency: string;
  status: string;
  paymentMethod: string;
  satsAmount: number;
  fiatAmount: number;
  premium?: number;
  rating?: number;
  platform?: string;
  createdAt: number;
  event: NDKEvent;
}
interface OrderBookProps {
  filters: {
    currency: string;
    paymentMethod: string;
    orderType: 'all' | 'buy' | 'sell';
    minAmount: number;
    maxAmount: number;
  };
}
export function OrderBook({ filters }: OrderBookProps) {
  const { ndk } = useNDK();
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    if (!ndk) return;
    const fetchOrders = async () => {
      setLoading(true);
      const filter: NDKFilter = {
        kinds: [38383 as any],
        limit: 100,
      };
      const events = await ndk.fetchEvents(filter);
      const parsedOrders: Order[] = [];
      events.forEach((event: NDKEvent) => {
        const tags = event.tags;
        // Skip info events
        const zTag = tags.find((t: string[]) => t[0] === 'z');
        if (zTag && zTag[1] === 'info') return;
        // Extract order data from tags
        const orderType = tags.find((t: string[]) => t[0] === 'k')?.[1] as 'buy' | 'sell';
        const currency = tags.find((t: string[]) => t[0] === 'f')?.[1];
        const status = tags.find((t: string[]) => t[0] === 's')?.[1];
        const paymentMethod = tags.find((t: string[]) => t[0] === 'pm')?.[1];
        const satsAmount = parseInt(tags.find((t: string[]) => t[0] === 'amt')?.[1] || '0');
        const fiatAmount = parseFloat(tags.find((t: string[]) => t[0] === 'fa')?.[1] || '0');
        const premium = parseFloat(tags.find((t: string[]) => t[0] === 'premium')?.[1] || '0');
        const rating = parseFloat(tags.find((t: string[]) => t[0] === 'rating')?.[1] || '0');
        const platform = tags.find((t: string[]) => t[0] === 'y')?.[1];
        const dTag = tags.find((t: string[]) => t[0] === 'd')?.[1];
        // Only include active orders
        if (status === 'pending' && orderType && currency && dTag) {
          parsedOrders.push({
            id: dTag,
            pubkey: event.pubkey,
            type: orderType,
            currency,
            status,
            paymentMethod: paymentMethod || 'Unknown',
            satsAmount,
            fiatAmount,
            premium,
            rating,
            platform,
            createdAt: event.created_at || Date.now() / 1000,
            event
          });
        }
      });
      // Sort by created date, newest first
      parsedOrders.sort((a, b) => b.createdAt - a.createdAt);
      setOrders(parsedOrders);
      setLoading(false);
    };
    fetchOrders();
    // Subscribe to new orders
    const sub = ndk.subscribe(
      { kinds: [38383 as any], since: Math.floor(Date.now() / 1000) },
      { closeOnEose: false }
    );
    sub.on('event', (event: NDKEvent) => {
      const tags = event.tags;
      const zTag = tags.find((t: string[]) => t[0] === 'z');
      if (zTag && zTag[1] === 'info') return;
      const orderType = tags.find((t: string[]) => t[0] === 'k')?.[1] as 'buy' | 'sell';
      const currency = tags.find((t: string[]) => t[0] === 'f')?.[1];
      const status = tags.find((t: string[]) => t[0] === 's')?.[1];
      const dTag = tags.find((t: string[]) => t[0] === 'd')?.[1];
      if (status === 'pending' && orderType && currency && dTag) {
        const newOrder: Order = {
          id: dTag,
          pubkey: event.pubkey,
          type: orderType,
          currency,
          status,
          paymentMethod: tags.find((t: string[]) => t[0] === 'pm')?.[1] || 'Unknown',
          satsAmount: parseInt(tags.find((t: string[]) => t[0] === 'amt')?.[1] || '0'),
          fiatAmount: parseFloat(tags.find((t: string[]) => t[0] === 'fa')?.[1] || '0'),
          premium: parseFloat(tags.find((t: string[]) => t[0] === 'premium')?.[1] || '0'),
          rating: parseFloat(tags.find((t: string[]) => t[0] === 'rating')?.[1] || '0'),
          platform: tags.find((t: string[]) => t[0] === 'y')?.[1],
          createdAt: event.created_at || Date.now() / 1000,
          event
        };
        setOrders(prev => [newOrder, ...prev.filter(o => o.id !== dTag)]);
      }
    });
    return () => {
      sub.stop();
    };
  }, [ndk]);
  // Filter orders based on user preferences
  const filteredOrders = orders.filter(order => {
    if (filters.currency !== 'all' && order.currency !== filters.currency) return false;
    if (filters.paymentMethod !== 'all' && order.paymentMethod !== filters.paymentMethod) return false;
    if (filters.orderType !== 'all' && order.type !== filters.orderType) return false;
    if (order.satsAmount < filters.minAmount || order.satsAmount > filters.maxAmount) return false;
    return true;
  });
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600"></div>
      </div>
    );
  }
  return (
    <div className="w-full">
      <div className="grid gap-3 md:gap-4">
        {filteredOrders.length === 0 ? (
          <div className="text-center py-12 text-gray-500">
            No orders available matching your filters
          </div>
        ) : (
          filteredOrders.map(order => (
            <OrderCard key={order.id} order={order} />
          ))
        )}
      </div>
    </div>
  );
}
</file>

<file path="features/trades/OrderCard.tsx">
import { useState } from 'react';
import { Bitcoin, Star, MessageSquare, ArrowRight, Shield } from 'lucide-react';
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { formatDistanceToNow } from 'date-fns';
import { NDKEvent } from '@nostr-dev-kit/ndk';
import { TakeOrderModal } from './TakeOrderModal';
interface OrderCardProps {
  order: {
    id: string;
    pubkey: string;
    type: 'buy' | 'sell';
    currency: string;
    status: string;
    paymentMethod: string;
    satsAmount: number;
    fiatAmount: number;
    premium?: number;
    rating?: number;
    platform?: string;
    createdAt: number;
    event: NDKEvent;
  };
}
const currencyData: { [key: string]: { symbol: string; flag: string } } = {
  USD: { symbol: '$', flag: '🇺🇸' },
  EUR: { symbol: '€', flag: '🇪🇺' },
  GBP: { symbol: '£', flag: '🇬🇧' },
  BRL: { symbol: 'R$', flag: '🇧🇷' },
  ARS: { symbol: '$', flag: '🇦🇷' },
  PLN: { symbol: 'zł', flag: '🇵🇱' },
  JPY: { symbol: '¥', flag: '🇯🇵' },
  CHF: { symbol: 'Fr', flag: '🇨🇭' },
  PEN: { symbol: 'S/', flag: '🇵🇪' },
  UYU: { symbol: '$', flag: '🇺🇾' },
  VES: { symbol: 'Bs', flag: '🇻🇪' },
  RUB: { symbol: '₽', flag: '🇷🇺' },
  SEK: { symbol: 'kr', flag: '🇸🇪' },
  NOK: { symbol: 'kr', flag: '🇳🇴' },
  AUD: { symbol: '$', flag: '🇦🇺' },
  CUP: { symbol: '$', flag: '🇨🇺' },
};
const paymentMethodData: { [key: string]: { icon: string; region: string } } = {
  'Cash': { icon: '💵', region: 'Universal' },
  'PIX': { icon: '🔄', region: 'Brazil' },
  'BLIK': { icon: '📱', region: 'Poland' },
  'Revolut': { icon: '💳', region: 'Europe' },
  'Zelle': { icon: '🏦', region: 'USA' },
  'CashApp': { icon: '📲', region: 'USA' },
  'CVU': { icon: '🏧', region: 'Argentina' },
  'MP': { icon: '📲', region: 'Argentina' },
  'f2f': { icon: '🤝', region: 'Local' },
  'СБП': { icon: '🏦', region: 'Russia' },
};
export function OrderCard({ order }: OrderCardProps) {
  const profile = useProfile(order.pubkey);
  const [showTakeModal, setShowTakeModal] = useState(false);
  const currencyInfo = currencyData[order.currency] || { symbol: order.currency, flag: '🌍' };
  const paymentInfo = paymentMethodData[order.paymentMethod] || { icon: '💰', region: '' };
  // Calculate price per BTC
  const pricePerBtc = order.fiatAmount > 0 && order.satsAmount > 0
    ? (order.fiatAmount / order.satsAmount) * 100000000
    : 0;
  return (
    <>
      <div className="bg-white dark:bg-gray-900 rounded-lg md:rounded-xl border border-gray-200 dark:border-gray-800 p-3 md:p-4 hover:shadow-lg transition-shadow">
        <div className="flex items-start justify-between mb-2 md:mb-3">
          <div className="flex items-center gap-3">
            {profile?.picture ? (
              <img
                src={profile.picture}
                alt={profile.name || 'User'}
                className="w-10 h-10 md:w-12 md:h-12 rounded-full object-cover"
              />
            ) : (
              <div className="w-10 h-10 md:w-12 md:h-12 bg-gradient-to-br from-purple-400 to-pink-400 rounded-full" />
            )}
            <div>
              <div className="flex items-center gap-2">
                <h3 className="font-semibold text-sm md:text-base text-gray-900 dark:text-white">
                  {profile?.name || `@${order.pubkey.slice(0, 6)}...`}
                </h3>
                {order.rating && order.rating > 0 && (
                  <div className="flex items-center gap-1 text-yellow-500">
                    <Star className="w-4 h-4 fill-current" />
                    <span className="text-sm">{order.rating.toFixed(1)}</span>
                  </div>
                )}
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400">
                {formatDistanceToNow(order.createdAt * 1000, { addSuffix: true })}
                {order.platform && ` • ${order.platform}`}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-1 md:gap-2">
            <span className="text-lg md:text-2xl">{currencyInfo.flag}</span>
            <div className={`px-2 md:px-3 py-0.5 md:py-1 rounded-full text-xs md:text-sm font-medium ${
              order.type === 'buy'
                ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400'
                : 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400'
            }`}>
              {order.type === 'buy' ? 'Buying' : 'Selling'}
            </div>
          </div>
        </div>
        <div className="grid grid-cols-3 gap-2 md:gap-4 mb-3 md:mb-4">
          <div>
            <p className="text-xs text-gray-500 dark:text-gray-400 mb-0.5 md:mb-1">Amount</p>
            <div className="flex items-center gap-1 md:gap-2">
              <Bitcoin className="w-3 h-3 md:w-4 md:h-4 text-orange-500" />
              <span className="font-mono font-semibold text-xs md:text-base text-gray-900 dark:text-white">
                {(order.satsAmount / 100000000).toFixed(4)}
              </span>
            </div>
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-0.5 md:mt-1 hidden md:block">
              {order.satsAmount.toLocaleString()} sats
            </p>
          </div>
          <div>
            <p className="text-xs text-gray-500 dark:text-gray-400 mb-0.5 md:mb-1">Price</p>
            <div className="flex items-center gap-1">
              <span className="text-sm md:text-base hidden md:inline">{currencyInfo.flag}</span>
              <p className="text-sm md:text-lg font-semibold text-gray-900 dark:text-white">
                {currencyInfo.symbol}{order.fiatAmount.toFixed(0)}
              </p>
            </div>
            {pricePerBtc > 0 && (
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                {currencyInfo.symbol}{pricePerBtc.toFixed(2)}/BTC
                {order.premium && order.premium !== 0 && (
                  <span className={order.premium > 0 ? 'text-red-500' : 'text-green-500'}>
                    {' '}({order.premium > 0 ? '+' : ''}{order.premium}%)
                  </span>
                )}
              </p>
            )}
          </div>
          <div className="min-w-0">
            <p className="text-xs text-gray-500 dark:text-gray-400 mb-0.5 md:mb-1">Payment</p>
            <div className="flex items-center gap-1 md:gap-2">
              <span className="text-sm md:text-lg flex-shrink-0">{paymentInfo.icon}</span>
              <div className="flex flex-col min-w-0">
                <span className="font-medium text-xs md:text-base text-gray-900 dark:text-white truncate max-w-[80px] md:max-w-none">
                  {order.paymentMethod}
                </span>
                {paymentInfo.region && (
                  <span className="text-xs text-gray-500 dark:text-gray-400 hidden md:inline">
                    {paymentInfo.region}
                  </span>
                )}
              </div>
            </div>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setShowTakeModal(true)}
            className="flex-1 flex items-center justify-center gap-1 md:gap-2 px-3 md:px-4 py-1.5 md:py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm md:text-base"
          >
            <ArrowRight className="w-3 h-3 md:w-4 md:h-4" />
            <span className="hidden md:inline">{order.type === 'buy' ? 'Sell to User' : 'Buy from User'}</span>
            <span className="md:hidden">{order.type === 'buy' ? 'Sell' : 'Buy'}</span>
          </button>
          <button className="p-1.5 md:p-2 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors">
            <MessageSquare className="w-3 h-3 md:w-4 md:h-4" />
          </button>
          <button className="p-1.5 md:p-2 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors hidden md:block">
            <Shield className="w-3 h-3 md:w-4 md:h-4" />
          </button>
        </div>
      </div>
      {showTakeModal && (
        <TakeOrderModal order={order} onClose={() => setShowTakeModal(false)} />
      )}
    </>
  );
}
</file>

<file path="features/trades/QuickFilters.tsx">
import { Globe, CreditCard } from 'lucide-react';
interface QuickFiltersProps {
  selectedCurrency: string;
  selectedPaymentMethod: string;
  onCurrencyChange: (currency: string) => void;
  onPaymentMethodChange: (method: string) => void;
}
const popularCurrencies = [
  { code: 'all', name: 'All', flag: '🌍' },
  { code: 'USD', name: 'USD', flag: '🇺🇸' },
  { code: 'EUR', name: 'EUR', flag: '🇪🇺' },
  { code: 'BRL', name: 'BRL', flag: '🇧🇷' },
  { code: 'ARS', name: 'ARS', flag: '🇦🇷' },
  { code: 'GBP', name: 'GBP', flag: '🇬🇧' },
  { code: 'PLN', name: 'PLN', flag: '🇵🇱' },
  { code: 'JPY', name: 'JPY', flag: '🇯🇵' },
];
const popularPaymentMethods = [
  { id: 'all', name: 'All Methods', icon: '💰', countries: [] },
  { id: 'Cash', name: 'Cash', icon: '💵', countries: ['Universal'] },
  { id: 'PIX', name: 'PIX', icon: '🔄', countries: ['Brazil'] },
  { id: 'BLIK', name: 'BLIK', icon: '📱', countries: ['Poland'] },
  { id: 'Revolut', name: 'Revolut', icon: '💳', countries: ['Europe'] },
  { id: 'Zelle', name: 'Zelle', icon: '🏦', countries: ['USA'] },
  { id: 'CashApp', name: 'CashApp', icon: '📲', countries: ['USA'] },
  { id: 'CVU', name: 'CVU/MP', icon: '🏧', countries: ['Argentina'] },
  { id: 'f2f', name: 'Face to Face', icon: '🤝', countries: ['Local'] },
];
export function QuickFilters({
  selectedCurrency,
  selectedPaymentMethod,
  onCurrencyChange,
  onPaymentMethodChange,
}: QuickFiltersProps) {
  return (
    <div className="space-y-4">
      {/* Currency Filter */}
      <div>
        <div className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <Globe className="w-4 h-4" />
          <span>Currency</span>
        </div>
        <div className="flex flex-wrap gap-2">
          {popularCurrencies.map((currency) => (
            <button
              key={currency.code}
              onClick={() => onCurrencyChange(currency.code)}
              className={`
                flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium transition-all
                ${selectedCurrency === currency.code
                  ? 'bg-purple-600 text-white shadow-md scale-105'
                  : 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 hover:border-purple-400 dark:hover:border-purple-600 hover:shadow-sm'
                }
              `}
            >
              <span className="text-base">{currency.flag}</span>
              <span>{currency.name}</span>
            </button>
          ))}
        </div>
      </div>
      {/* Payment Method Filter */}
      <div>
        <div className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <CreditCard className="w-4 h-4" />
          <span>Payment Method</span>
        </div>
        <div className="flex flex-wrap gap-2">
          {popularPaymentMethods.map((method) => (
            <button
              key={method.id}
              onClick={() => onPaymentMethodChange(method.id)}
              className={`
                group flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium transition-all
                ${selectedPaymentMethod === method.id
                  ? 'bg-purple-600 text-white shadow-md scale-105'
                  : 'bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 hover:border-purple-400 dark:hover:border-purple-600 hover:shadow-sm'
                }
              `}
            >
              <span className="text-base">{method.icon}</span>
              <span>{method.name}</span>
              {method.countries.length > 0 && method.id !== 'all' && (
                <span className={`
                  text-xs px-1.5 py-0.5 rounded-full ml-1
                  ${selectedPaymentMethod === method.id
                    ? 'bg-purple-700/50'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-500 dark:text-gray-400'
                  }
                `}>
                  {method.countries[0]}
                </span>
              )}
            </button>
          ))}
        </div>
      </div>
      {/* Active Filters Summary */}
      {(selectedCurrency !== 'all' || selectedPaymentMethod !== 'all') && (
        <div className="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
          <span>Active filters:</span>
          {selectedCurrency !== 'all' && (
            <span className="px-2 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-400 rounded-full text-xs font-medium">
              {popularCurrencies.find(c => c.code === selectedCurrency)?.flag} {selectedCurrency}
            </span>
          )}
          {selectedPaymentMethod !== 'all' && (
            <span className="px-2 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-400 rounded-full text-xs font-medium">
              {popularPaymentMethods.find(m => m.id === selectedPaymentMethod)?.icon} {selectedPaymentMethod}
            </span>
          )}
          <button
            onClick={() => {
              onCurrencyChange('all');
              onPaymentMethodChange('all');
            }}
            className="text-purple-600 hover:text-purple-700 dark:text-purple-400 dark:hover:text-purple-300 underline text-xs"
          >
            Clear all
          </button>
        </div>
      )}
    </div>
  );
}
</file>

<file path="features/trades/TakeOrderModal.tsx">
import { useState } from 'react';
import { X, AlertTriangle, Bitcoin, Shield } from 'lucide-react';
import { useNDK } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent } from '@nostr-dev-kit/ndk';
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
interface TakeOrderModalProps {
  order: {
    id: string;
    pubkey: string;
    type: 'buy' | 'sell';
    currency: string;
    status: string;
    paymentMethod: string;
    satsAmount: number;
    fiatAmount: number;
    premium?: number;
    rating?: number;
    platform?: string;
    createdAt: number;
    event: NDKEvent;
  };
  onClose: () => void;
}
export function TakeOrderModal({ order, onClose }: TakeOrderModalProps) {
  const { ndk } = useNDK();
  const profile = useProfile(order.pubkey);
  const [step, setStep] = useState<'confirm' | 'processing' | 'complete'>('confirm');
  const [accepted, setAccepted] = useState(false);
  const handleTakeOrder = async () => {
    if (!ndk) return;
    setStep('processing');
    try {
      // Create a take order event
      const event = new NDKEvent(ndk);
      event.kind = 38383;
      // Create response event with reference to original order
      event.tags = [
        ['d', `take-${order.id}-${Date.now()}`],
        ['e', order.event.id],
        ['p', order.pubkey],
        ['k', order.type === 'buy' ? 'sell' : 'buy'],
        ['f', order.currency],
        ['s', 'in-progress'],
        ['amt', order.satsAmount.toString()],
        ['fa', order.fiatAmount.toString()],
        ['pm', order.paymentMethod],
        ['y', 'Voces'],
        ['z', 'take-order']
      ];
      event.content = `Taking order ${order.id}`;
      await event.publish();
      // Update original order status (in real implementation, this would be handled by the maker)
      const statusUpdate = new NDKEvent(ndk);
      statusUpdate.kind = 38383;
      statusUpdate.tags = [
        ...order.event.tags.filter(t => t[0] !== 's'),
        ['s', 'in-progress']
      ];
      statusUpdate.content = '';
      await statusUpdate.publish();
      setStep('complete');
      // Close modal after a delay
      setTimeout(() => {
        onClose();
      }, 2000);
    } catch (error) {
      console.error('Failed to take order:', error);
      setStep('confirm');
    }
  };
  const currencySymbol = { USD: '$', EUR: '€', GBP: '£', BRL: 'R$' }[order.currency] || order.currency;
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 p-4">
      <div className="bg-white dark:bg-gray-900 rounded-2xl max-w-md w-full">
        {step === 'confirm' && (
          <>
            <div className="p-6 border-b border-gray-200 dark:border-gray-800">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-bold text-gray-900 dark:text-white">
                  Confirm Trade
                </h2>
                <button
                  onClick={onClose}
                  className="p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>
            <div className="p-6 space-y-4">
              {/* Trade Summary */}
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500 dark:text-gray-400">You will {order.type === 'buy' ? 'sell' : 'buy'}</span>
                  <div className="flex items-center gap-1">
                    <Bitcoin className="w-4 h-4 text-orange-500" />
                    <span className="font-mono font-semibold">{(order.satsAmount / 100000000).toFixed(8)} BTC</span>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500 dark:text-gray-400">For</span>
                  <span className="font-semibold">{currencySymbol}{order.fiatAmount.toFixed(2)}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500 dark:text-gray-400">Via</span>
                  <span className="font-medium">{order.paymentMethod}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500 dark:text-gray-400">Trading with</span>
                  <div className="flex items-center gap-2">
                    <span className="font-medium">{profile?.name || 'Anonymous'}</span>
                    {order.rating && (
                      <span className="text-yellow-500 text-sm">★ {order.rating.toFixed(1)}</span>
                    )}
                  </div>
                </div>
              </div>
              {/* Warning */}
              <div className="flex items-start gap-3 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                <AlertTriangle className="w-5 h-5 text-yellow-600 dark:text-yellow-500 flex-shrink-0 mt-0.5" />
                <div className="text-sm text-yellow-800 dark:text-yellow-300">
                  <p className="font-medium mb-1">Trade Safely</p>
                  <ul className="space-y-1 text-xs">
                    <li>• Never release funds before confirming payment</li>
                    <li>• Use escrow when available</li>
                    <li>• Communicate only through secure channels</li>
                    <li>• Report suspicious behavior immediately</li>
                  </ul>
                </div>
              </div>
              {/* Terms Acceptance */}
              <label className="flex items-start gap-3 cursor-pointer">
                <input
                  type="checkbox"
                  checked={accepted}
                  onChange={(e) => setAccepted(e.target.checked)}
                  className="mt-1 w-4 h-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500"
                />
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  I understand the risks and agree to proceed with this P2P trade
                </span>
              </label>
              {/* Actions */}
              <div className="flex gap-3">
                <button
                  onClick={onClose}
                  className="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleTakeOrder}
                  disabled={!accepted}
                  className="flex-1 px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  Take Order
                </button>
              </div>
            </div>
          </>
        )}
        {step === 'processing' && (
          <div className="p-12 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>
            <p className="text-gray-900 dark:text-white font-medium">Processing Trade...</p>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
              Connecting with trader
            </p>
          </div>
        )}
        {step === 'complete' && (
          <div className="p-12 text-center">
            <div className="w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mx-auto mb-4">
              <Shield className="w-6 h-6 text-green-600 dark:text-green-400" />
            </div>
            <p className="text-gray-900 dark:text-white font-medium">Trade Initiated!</p>
            <p className="text-sm text-gray-500 dark:text-gray-400 mt-2">
              Check your messages for next steps
            </p>
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="features/trades/TradeFilters.tsx">
import { DollarSign, CreditCard, TrendingUp } from 'lucide-react';
interface TradeFiltersProps {
  filters: {
    currency: string;
    paymentMethod: string;
    orderType: 'all' | 'buy' | 'sell';
    minAmount: number;
    maxAmount: number;
  };
  onChange: (filters: any) => void;
}
const currencies = [
  { code: 'all', name: 'All Currencies' },
  { code: 'USD', name: 'US Dollar' },
  { code: 'EUR', name: 'Euro' },
  { code: 'GBP', name: 'British Pound' },
  { code: 'BRL', name: 'Brazilian Real' },
  { code: 'ARS', name: 'Argentine Peso' },
  { code: 'PLN', name: 'Polish Złoty' },
];
const paymentMethods = [
  { id: 'all', name: 'All Methods' },
  { id: 'Cash', name: 'Cash' },
  { id: 'Revolut', name: 'Revolut' },
  { id: 'PIX', name: 'PIX' },
  { id: 'BLIK', name: 'BLIK' },
  { id: 'Zelle', name: 'Zelle' },
  { id: 'CashApp', name: 'Cash App' },
];
export function TradeFilters({ filters, onChange }: TradeFiltersProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
      {/* Currency Filter */}
      <div>
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <DollarSign className="w-4 h-4" />
          Currency
        </label>
        <select
          value={filters.currency}
          onChange={(e) => onChange({ ...filters, currency: e.target.value })}
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
        >
          {currencies.map((curr) => (
            <option key={curr.code} value={curr.code}>
              {curr.name}
            </option>
          ))}
        </select>
      </div>
      {/* Payment Method Filter */}
      <div>
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <CreditCard className="w-4 h-4" />
          Payment Method
        </label>
        <select
          value={filters.paymentMethod}
          onChange={(e) => onChange({ ...filters, paymentMethod: e.target.value })}
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
        >
          {paymentMethods.map((method) => (
            <option key={method.id} value={method.id}>
              {method.name}
            </option>
          ))}
        </select>
      </div>
      {/* Order Type Filter */}
      <div>
        <label className="flex items-center gap-2 text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
          <TrendingUp className="w-4 h-4" />
          Order Type
        </label>
        <select
          value={filters.orderType}
          onChange={(e) => onChange({ ...filters, orderType: e.target.value as 'all' | 'buy' | 'sell' })}
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
        >
          <option value="all">All Orders</option>
          <option value="buy">Buy Orders</option>
          <option value="sell">Sell Orders</option>
        </select>
      </div>
      {/* Amount Range */}
      <div>
        <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block">
          Amount Range (sats)
        </label>
        <div className="flex items-center gap-2">
          <input
            type="number"
            value={filters.minAmount}
            onChange={(e) => onChange({ ...filters, minAmount: parseInt(e.target.value) || 0 })}
            className="w-full px-2 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white text-sm"
            placeholder="Min"
          />
          <span className="text-gray-500">-</span>
          <input
            type="number"
            value={filters.maxAmount}
            onChange={(e) => onChange({ ...filters, maxAmount: parseInt(e.target.value) || 1000000 })}
            className="w-full px-2 py-2 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white text-sm"
            placeholder="Max"
          />
        </div>
      </div>
    </div>
  );
}
</file>

<file path="lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="pages/marketplace/CreateListingPage.tsx">
import { useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { ListingForm } from '@/features/classifieds/components/ListingForm';
import { useCreateListing } from '@/features/classifieds/hooks/useCreateListing';
import type { ListingFormData } from '@/features/classifieds/types';
import { useState } from 'react';
export function CreateListingPage() {
  const navigate = useNavigate();
  const { createListing, isAuthenticated } = useCreateListing();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const handleSubmit = async (data: ListingFormData) => {
    if (!isAuthenticated) {
      alert('Please log in to create a listing');
      return;
    }
    try {
      setIsSubmitting(true);
      await createListing(data);
      navigate('/marketplace');
    } catch (error) {
      console.error('Failed to create listing:', error);
      alert('Failed to create listing. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };
  if (!isAuthenticated) {
    return (
      <div className="container mx-auto px-4 py-12">
        <div className="max-w-2xl mx-auto text-center">
          <h2 className="text-2xl font-bold mb-4">Sign In Required</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            You need to be logged in to create a listing.
          </p>
          <Button onClick={() => navigate('/')}>
            Go to Home
          </Button>
        </div>
      </div>
    );
  }
  return (
    <div className="container mx-auto px-4 py-6">
      <div className="max-w-4xl mx-auto">
        <div className="mb-6">
          <Button
            variant="ghost"
            onClick={() => navigate('/marketplace')}
            className="mb-4"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Marketplace
          </Button>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            Create New Listing
          </h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            Fill in the details below to create your classified listing
          </p>
        </div>
        <ListingForm onSubmit={handleSubmit} isSubmitting={isSubmitting} />
      </div>
    </div>
  );
}
</file>

<file path="pages/marketplace/ListingDetailPage.tsx">
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ArrowLeft, MapPin, Clock, Tag, Share2, MessageCircle, Edit, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { UserAvatar } from '@/components/ui/UserAvatar';
import { PriceTag } from '@/features/classifieds/components/PriceTag';
import { useSubscribe, useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { CLASSIFIED_LISTING_KIND, parseListingFromEvent } from '@/features/classifieds/types';
import { formatDistanceToNow } from 'date-fns';
import { Loader2 } from 'lucide-react';
import { useCreateListing } from '@/features/classifieds/hooks/useCreateListing';
import { useState } from 'react';
export function ListingDetailPage() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const currentUser = useNDKCurrentUser();
  const { deleteListing } = useCreateListing();
  const [isDeleting, setIsDeleting] = useState(false);
  const { events, eose } = useSubscribe([{
    ids: id ? [id] : [],
    kinds: [CLASSIFIED_LISTING_KIND]
  }]);
  if (!eose && events.length === 0) {
    return (
      <div className="container mx-auto px-4 py-12">
        <div className="flex items-center justify-center">
          <Loader2 className="w-8 h-8 animate-spin text-purple-600 dark:text-purple-400" />
        </div>
      </div>
    );
  }
  const event = events[0];
  if (!event) {
    return (
      <div className="container mx-auto px-4 py-12">
        <div className="max-w-2xl mx-auto text-center">
          <h2 className="text-2xl font-bold mb-4">Listing Not Found</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-6">
            This listing may have been removed or doesn't exist.
          </p>
          <Button onClick={() => navigate('/marketplace')}>
            Back to Marketplace
          </Button>
        </div>
      </div>
    );
  }
  const listing = parseListingFromEvent(event);
  const isOwner = currentUser?.pubkey === listing.author;
  const timeAgo = listing.publishedAt
    ? formatDistanceToNow(new Date(listing.publishedAt * 1000), { addSuffix: true })
    : 'recently';
  const handleDelete = async () => {
    if (!confirm('Are you sure you want to delete this listing?')) return;
    try {
      setIsDeleting(true);
      await deleteListing(listing.id);
      navigate('/marketplace');
    } catch (error) {
      console.error('Failed to delete listing:', error);
      alert('Failed to delete listing. Please try again.');
    } finally {
      setIsDeleting(false);
    }
  };
  const handleShare = () => {
    const url = window.location.href;
    navigator.clipboard.writeText(url);
    alert('Link copied to clipboard!');
  };
  return (
    <div className="container mx-auto px-4 py-6">
      <div className="max-w-6xl mx-auto">
        <Button
          variant="ghost"
          onClick={() => navigate('/marketplace')}
          className="mb-6"
        >
          <ArrowLeft className="w-4 h-4 mr-2" />
          Back to Marketplace
        </Button>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            {listing.images && listing.images.length > 0 && (
              <div className="mb-6">
                <div className="grid gap-4">
                  <img
                    src={listing.images[0]}
                    alt={listing.title}
                    className="w-full rounded-lg object-cover aspect-video"
                  />
                  {listing.images.length > 1 && (
                    <div className="grid grid-cols-4 gap-2">
                      {listing.images.slice(1).map((image, index) => (
                        <img
                          key={index}
                          src={image}
                          alt={`${listing.title} ${index + 2}`}
                          className="w-full h-24 rounded-lg object-cover cursor-pointer hover:opacity-75"
                        />
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}
            <Card>
              <CardContent className="p-6">
                <div className="mb-6">
                  <div className="flex items-start justify-between mb-4">
                    <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
                      {listing.title}
                    </h1>
                    {listing.price && (
                      <PriceTag price={listing.price} className="text-lg px-4 py-2" />
                    )}
                  </div>
                  {listing.status === 'sold' && (
                    <div className="mb-4 p-4 bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-400 rounded-lg text-center font-semibold">
                      This item has been sold
                    </div>
                  )}
                  <div className="flex flex-wrap gap-4 text-sm text-gray-500 dark:text-gray-400 mb-6">
                    {listing.location && (
                      <div className="flex items-center gap-1">
                        <MapPin className="w-4 h-4" />
                        <span>{listing.location}</span>
                      </div>
                    )}
                    <div className="flex items-center gap-1">
                      <Clock className="w-4 h-4" />
                      <span>Posted {timeAgo}</span>
                    </div>
                  </div>
                  {listing.categories && listing.categories.length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-6">
                      {listing.categories.map(category => (
                        <span
                          key={category}
                          className="inline-flex items-center gap-1 px-3 py-1 bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400 rounded-full text-sm"
                        >
                          <Tag className="w-3 h-3" />
                          {category}
                        </span>
                      ))}
                    </div>
                  )}
                  <div className="prose dark:prose-invert max-w-none">
                    <h3 className="text-lg font-semibold mb-2">Description</h3>
                    <div className="whitespace-pre-wrap">{listing.content}</div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          <div className="lg:col-span-1">
            <Card className="sticky top-6">
              <CardContent className="p-6">
                <div className="flex items-center gap-3 mb-6">
                  <UserAvatar pubkey={listing.author} size="lg" />
                  <div>
                    <p className="text-sm text-gray-500 dark:text-gray-400">Listed by</p>
                    <p className="font-medium">User</p>
                  </div>
                </div>
                <div className="space-y-3">
                  {isOwner ? (
                    <>
                      <Link to={`/marketplace/edit/${listing.id}`} className="block">
                        <Button className="w-full" variant="outline">
                          <Edit className="w-4 h-4 mr-2" />
                          Edit Listing
                        </Button>
                      </Link>
                      <Button
                        className="w-full"
                        variant="destructive"
                        onClick={handleDelete}
                        disabled={isDeleting}
                      >
                        <Trash2 className="w-4 h-4 mr-2" />
                        {isDeleting ? 'Deleting...' : 'Delete Listing'}
                      </Button>
                    </>
                  ) : (
                    <Button className="w-full">
                      <MessageCircle className="w-4 h-4 mr-2" />
                      Contact Seller
                    </Button>
                  )}
                  <Button
                    className="w-full"
                    variant="outline"
                    onClick={handleShare}
                  >
                    <Share2 className="w-4 h-4 mr-2" />
                    Share Listing
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="pages/marketplace/MarketplacePage.tsx">
import { useState, useMemo, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { ListingGrid } from '@/features/classifieds/components/ListingGrid';
import { CategorySection } from '@/features/classifieds/components/CategorySection';
import { FilterButton } from '@/features/classifieds/components/FilterButton';
import { useListings } from '@/features/classifieds/hooks/useListings';
import type { ClassifiedListing } from '@/features/classifieds/types';
const CATEGORIES = [
  { value: '', label: 'All Categories' },
  { value: 'electronics', label: 'Electronics' },
  { value: 'furniture', label: 'Furniture' },
  { value: 'clothing', label: 'Clothing' },
  { value: 'books', label: 'Books' },
  { value: 'services', label: 'Services' },
  { value: 'vehicles', label: 'Vehicles' },
  { value: 'real-estate', label: 'Real Estate' },
  { value: 'jobs', label: 'Jobs' },
  { value: 'free', label: 'Free' },
  { value: 'wanted', label: 'Wanted' }
];
export function MarketplacePage() {
  const [searchParams, setSearchParams] = useSearchParams();
  const [selectedCategory, setSelectedCategory] = useState(searchParams.get('category') || '');
  const [searchQuery, setSearchQuery] = useState('');
  const { listings, isLoading } = useListings({
    category: selectedCategory || undefined
  });
  // Update URL when category changes
  useEffect(() => {
    if (selectedCategory) {
      setSearchParams({ category: selectedCategory });
    } else {
      setSearchParams({});
    }
  }, [selectedCategory, setSearchParams]);
  // Filter and group listings
  const { filteredListings, listingsByCategory } = useMemo(() => {
    // First filter by search query
    const filtered = listings.filter(listing => {
      if (!searchQuery) return true;
      const query = searchQuery.toLowerCase();
      return (
        listing.title.toLowerCase().includes(query) ||
        listing.summary?.toLowerCase().includes(query) ||
        listing.content.toLowerCase().includes(query) ||
        listing.location?.toLowerCase().includes(query)
      );
    });
    // Group by category for the category sections view
    const byCategory = filtered.reduce<Record<string, ClassifiedListing[]>>((acc, listing) => {
      if (listing.categories && listing.categories.length > 0) {
        listing.categories.forEach(category => {
          const key = category.toLowerCase();
          if (!acc[key]) acc[key] = [];
          acc[key].push(listing);
        });
      } else {
        if (!acc['uncategorized']) acc['uncategorized'] = [];
        acc['uncategorized'].push(listing);
      }
      return acc;
    }, {});
    return { filteredListings: filtered, listingsByCategory: byCategory };
  }, [listings, searchQuery]);
  // Determine view mode
  const isFilteredView = selectedCategory || searchQuery;
  return (
    <div className="container mx-auto px-4 py-6">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">
          Marketplace
        </h1>
        {/* Search and Filter Bar */}
        <div className="flex gap-3">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <Input
                placeholder="Search listings..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10"
              />
            </div>
          </div>
          <FilterButton
            categories={CATEGORIES}
            selectedCategory={selectedCategory}
            onCategoryChange={setSelectedCategory}
          />
        </div>
      </div>
      {/* Content */}
      {isFilteredView ? (
        // Filtered view - show grid
        <div>
          {selectedCategory && (
            <div className="mb-6">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                {CATEGORIES.find(c => c.value === selectedCategory)?.label || selectedCategory}
              </h2>
              <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                {filteredListings.length} listings found
              </p>
            </div>
          )}
          <ListingGrid listings={filteredListings} isLoading={isLoading} />
        </div>
      ) : (
        // Category sections view
        <div>
          {isLoading && Object.keys(listingsByCategory).length === 0 ? (
            <ListingGrid listings={[]} isLoading={true} />
          ) : (
            <>
              {/* Featured/Recent listings */}
              {listings.length > 0 && (
                <CategorySection
                  category="Recent Listings"
                  listings={listings.slice(0, 10)}
                  showViewAll={false}
                />
              )}
              {/* Category sections */}
              {CATEGORIES.filter(c => c.value && listingsByCategory[c.value]?.length > 0).map(category => (
                <CategorySection
                  key={category.value}
                  category={category.value}
                  listings={listingsByCategory[category.value]}
                />
              ))}
              {/* Uncategorized section */}
              {listingsByCategory['uncategorized']?.length > 0 && (
                <CategorySection
                  category="Other"
                  listings={listingsByCategory['uncategorized']}
                  showViewAll={false}
                />
              )}
            </>
          )}
        </div>
      )}
    </div>
  );
}
</file>

<file path="pages/ComposePage.tsx">
import { ComposeNote } from '@/features/feed/ComposeNote';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
export function ComposePage() {
  const navigate = useNavigate();
  return (
    <div className="max-w-2xl mx-auto">
      {/* Page header */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="flex items-center gap-4 px-4 py-3 sm:px-6">
          <button
            onClick={() => navigate(-1)}
            className="p-2 -ml-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">Compose</h2>
        </div>
      </div>
      {/* Compose section */}
      <div className="p-4 sm:p-6">
        <ComposeNote />
      </div>
    </div>
  );
}
</file>

<file path="pages/HomePage.tsx">
import { NoteFeed } from '@/features/feed/NoteFeed';
import { ComposeNote } from '@/features/feed/ComposeNote';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
export function HomePage() {
  const currentUser = useNDKCurrentUser();
  return (
    <div className="max-w-2xl mx-auto">
      {/* Feed header */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="px-4 py-3 sm:px-6">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">Home</h2>
        </div>
      </div>
      {/* Compose section for logged-in users - hidden on mobile */}
      {currentUser && (
        <div className="hidden md:block border-b border-gray-200 dark:border-gray-800">
          <div className="p-4 sm:p-6">
            <ComposeNote />
          </div>
        </div>
      )}
      {/* Notes feed */}
      <NoteFeed />
    </div>
  );
}
</file>

<file path="pages/NotificationsPage.tsx">
import { Bell } from 'lucide-react';
export function NotificationsPage() {
  return (
    <div className="max-w-2xl mx-auto">
      {/* Page header */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="px-4 py-3 sm:px-6">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">Notifications</h2>
        </div>
      </div>
      {/* Empty state */}
      <div className="flex flex-col items-center justify-center py-16 px-4">
        <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mb-4">
          <Bell className="w-8 h-8 text-gray-400 dark:text-gray-600" />
        </div>
        <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-1">
          No notifications yet
        </h3>
        <p className="text-gray-500 dark:text-gray-400 text-center max-w-sm">
          When someone mentions you or interacts with your notes, you'll see it here.
        </p>
      </div>
    </div>
  );
}
</file>

<file path="pages/ProfilePage.tsx">
import { useNDKCurrentUser, useProfile, useSubscribe, NDKKind } from '@nostr-dev-kit/ndk-hooks';
import { Calendar, MapPin, Link as LinkIcon } from 'lucide-react';
import { NoteCard } from '@/features/feed/NoteCard';
import { useParams } from 'react-router-dom';
export function ProfilePage() {
  const { pubkey } = useParams<{ pubkey?: string }>();
  const currentUser = useNDKCurrentUser();
  const targetPubkey = pubkey || currentUser?.pubkey;
  const profile = useProfile(targetPubkey);
  const { events } = useSubscribe(targetPubkey ? [{
    kinds: [NDKKind.Text],
    authors: [targetPubkey],
    limit: 20,
  }] : []);
  if (!targetPubkey) return null;
  return (
    <div className="max-w-2xl mx-auto">
      {/* Profile header */}
      <div className="bg-white dark:bg-gray-950 border-b border-gray-200 dark:border-gray-800">
        {/* Cover image */}
        <div className="h-32 sm:h-48 bg-gradient-to-br from-purple-500 to-pink-500"></div>
        {/* Profile info */}
        <div className="px-4 sm:px-6 pb-4">
          {/* Avatar */}
          <div className="relative -mt-12 sm:-mt-16 mb-4">
            {profile?.picture ? (
              <img
                src={profile.picture}
                alt={profile?.name || 'Profile'}
                className="w-24 h-24 sm:w-32 sm:h-32 rounded-full border-4 border-white dark:border-gray-950 object-cover"
              />
            ) : (
              <div className="w-24 h-24 sm:w-32 sm:h-32 rounded-full border-4 border-white dark:border-gray-950 bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-bold text-3xl">
                {(profile?.name || 'A')[0].toUpperCase()}
              </div>
            )}
          </div>
          {/* Name and bio */}
          <div className="mb-4">
            <h1 className="text-xl sm:text-2xl font-bold text-gray-900 dark:text-gray-100">
              {profile?.name || 'Anonymous'}
            </h1>
            {profile?.nip05 && (
              <p className="text-gray-500 dark:text-gray-400">
                @{profile.nip05.split('@')[0]}
              </p>
            )}
            {profile?.about && (
              <p className="mt-3 text-gray-700 dark:text-gray-300">
                {profile.about}
              </p>
            )}
          </div>
          {/* Meta info */}
          <div className="flex flex-wrap gap-4 text-sm text-gray-500 dark:text-gray-400">
            {profile?.website && (
              <a 
                href={profile.website} 
                target="_blank" 
                rel="noopener noreferrer"
                className="flex items-center gap-1 hover:text-purple-600 dark:hover:text-purple-400"
              >
                <LinkIcon className="w-4 h-4" />
                <span>{profile.website.replace(/^https?:\/\//, '')}</span>
              </a>
            )}
            <div className="flex items-center gap-1">
              <Calendar className="w-4 h-4" />
              <span>Joined recently</span>
            </div>
          </div>
          {/* Stats */}
          <div className="flex gap-6 mt-4">
            <div>
              <span className="font-semibold text-gray-900 dark:text-gray-100">
                {events.length}
              </span>
              <span className="text-gray-500 dark:text-gray-400 ml-1">Notes</span>
            </div>
            <div>
              <span className="font-semibold text-gray-900 dark:text-gray-100">0</span>
              <span className="text-gray-500 dark:text-gray-400 ml-1">Following</span>
            </div>
            <div>
              <span className="font-semibold text-gray-900 dark:text-gray-100">0</span>
              <span className="text-gray-500 dark:text-gray-400 ml-1">Followers</span>
            </div>
          </div>
        </div>
      </div>
      {/* Tabs */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-gray-950/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="flex px-4 sm:px-6">
          <button className="px-4 py-3 font-medium text-purple-600 dark:text-purple-400 border-b-2 border-purple-600 dark:border-purple-400">
            Notes
          </button>
          <button className="px-4 py-3 font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
            Replies
          </button>
          <button className="px-4 py-3 font-medium text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
            Media
          </button>
        </div>
      </div>
      {/* User's notes */}
      <div>
        {events.map((event) => (
          <NoteCard key={event.id} event={event} />
        ))}
        {events.length === 0 && (
          <div className="text-center py-8 text-gray-500 dark:text-gray-400">
            No notes yet
          </div>
        )}
      </div>
    </div>
  );
}
</file>

<file path="pages/SettingsPage.tsx">
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import {
  Server,
  Bell,
  Shield,
  Palette,
  User,
  ChevronRight,
  Settings as SettingsIcon
} from 'lucide-react';
import { cn } from '@/lib/utils';
import { RelaySettings } from '@/features/settings/RelaySettings';
import { ThemeSettings } from '@/features/settings/ThemeSettings';
import { NotificationSettings } from '@/features/settings/NotificationSettings';
import { PrivacySettings } from '@/features/settings/PrivacySettings';
import { ProfileSettings } from '@/features/settings/ProfileSettings';
type SettingsSection = 'relays' | 'theme' | 'notifications' | 'privacy' | 'profile';
interface SectionConfig {
  id: SettingsSection;
  label: string;
  description: string;
  icon: React.ElementType;
  component: React.ComponentType;
  available: boolean;
}
const sections: SectionConfig[] = [
  {
    id: 'relays',
    label: 'Relays',
    description: 'Configure Nostr relay connections',
    icon: Server,
    component: RelaySettings,
    available: true,
  },
  {
    id: 'profile',
    label: 'Profile',
    description: 'Edit your profile information',
    icon: User,
    component: ProfileSettings,
    available: false,
  },
  {
    id: 'theme',
    label: 'Appearance',
    description: 'Customize app theme and display',
    icon: Palette,
    component: ThemeSettings,
    available: false,
  },
  {
    id: 'notifications',
    label: 'Notifications',
    description: 'Control notification preferences',
    icon: Bell,
    component: NotificationSettings,
    available: false,
  },
  {
    id: 'privacy',
    label: 'Privacy',
    description: 'Manage privacy and security settings',
    icon: Shield,
    component: PrivacySettings,
    available: false,
  },
];
export function SettingsPage() {
  const [activeSection, setActiveSection] = useState<SettingsSection>('relays');
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const currentSection = sections.find(s => s.id === activeSection);
  const SectionComponent = currentSection?.component;
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 pb-20 md:pb-0">
      <div className="max-w-7xl mx-auto px-4 py-4 md:py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6"
        >
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-2 md:gap-3">
            <SettingsIcon className="w-6 h-6 md:w-8 md:h-8 text-purple-600" />
            Settings
          </h1>
          <p className="mt-1 text-sm md:text-base text-gray-600 dark:text-gray-400">
            Manage your app preferences and configuration
          </p>
        </motion.div>
        {/* Mobile Section Selector */}
        <div className="lg:hidden mb-4">
          <button
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            className="w-full bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 px-4 py-3 flex items-center justify-between"
          >
            <div className="flex items-center gap-3">
              {currentSection && (
                <>
                  {React.createElement(currentSection.icon, { className: "w-5 h-5 text-purple-600" })}
                  <span className="font-medium text-gray-900 dark:text-gray-100">
                    {currentSection.label}
                  </span>
                </>
              )}
            </div>
            <ChevronRight className={cn(
              "w-5 h-5 text-gray-400 transition-transform",
              mobileMenuOpen ? "rotate-90" : ""
            )} />
          </button>
          {mobileMenuOpen && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="absolute left-4 right-4 z-20 mt-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden"
            >
              {sections.map((section) => {
                const Icon = section.icon;
                return (
                  <button
                    key={section.id}
                    onClick={() => {
                      if (section.available) {
                        setActiveSection(section.id);
                        setMobileMenuOpen(false);
                      }
                    }}
                    disabled={!section.available}
                    className={cn(
                      'w-full px-4 py-3 flex items-center gap-3 transition-all border-b border-gray-100 dark:border-gray-700 last:border-0',
                      section.available
                        ? 'hover:bg-gray-50 dark:hover:bg-gray-750'
                        : 'opacity-50 cursor-not-allowed'
                    )}
                  >
                    <Icon className="w-5 h-5" />
                    <span className="text-sm font-medium">
                      {section.label}
                      {!section.available && (
                        <span className="ml-2 text-xs bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded">
                          Soon
                        </span>
                      )}
                    </span>
                  </button>
                );
              })}
            </motion.div>
          )}
        </div>
        <div className="flex flex-col lg:flex-row gap-6 lg:gap-8">
          {/* Desktop Sidebar Navigation */}
          <motion.nav
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="hidden lg:block lg:w-64"
          >
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
              {sections.map((section) => {
                const Icon = section.icon;
                const isActive = section.id === activeSection;
                return (
                  <button
                    key={section.id}
                    onClick={() => section.available && setActiveSection(section.id)}
                    disabled={!section.available}
                    className={cn(
                      'w-full px-4 py-3 flex items-center gap-3 transition-all border-b border-gray-100 dark:border-gray-700 last:border-0',
                      isActive
                        ? 'bg-purple-50 dark:bg-purple-950/30 text-purple-700 dark:text-purple-400'
                        : section.available
                        ? 'hover:bg-gray-50 dark:hover:bg-gray-750 text-gray-700 dark:text-gray-300'
                        : 'opacity-50 cursor-not-allowed text-gray-400 dark:text-gray-500'
                    )}
                  >
                    <Icon className={cn(
                      'w-5 h-5',
                      isActive ? 'text-purple-600 dark:text-purple-400' : ''
                    )} />
                    <div className="flex-1 text-left">
                      <div className="font-medium text-sm flex items-center gap-2">
                        {section.label}
                        {!section.available && (
                          <span className="text-xs bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded">
                            Soon
                          </span>
                        )}
                      </div>
                      <div className="text-xs text-gray-500 dark:text-gray-400 mt-0.5">
                        {section.description}
                      </div>
                    </div>
                    {section.available && (
                      <ChevronRight className={cn(
                        'w-4 h-4 transition-transform',
                        isActive ? 'translate-x-1' : ''
                      )} />
                    )}
                  </button>
                );
              })}
            </div>
          </motion.nav>
          {/* Main Content */}
          <motion.main
            key={activeSection}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex-1"
          >
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
              {SectionComponent && <SectionComponent />}
            </div>
          </motion.main>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="pages/TradePage.tsx">
import { useState, useEffect } from 'react';
import { Plus } from 'lucide-react';
import { OrderBook } from '@/features/trades/OrderBook';
import { CreateOrderModal } from '@/features/trades/CreateOrderModal';
import { QuickFilters } from '@/features/trades/QuickFilters';
import { CompactFilters } from '@/features/trades/CompactFilters';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
export function TradePage() {
  const currentUser = useNDKCurrentUser();
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [filters, setFilters] = useState({
    currency: 'all',
    paymentMethod: 'all',
    orderType: 'all' as 'all' | 'buy' | 'sell',
    minAmount: 0,
    maxAmount: 1000000
  });
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-950">
      {/* Header */}
      <div className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 sticky top-0 z-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3 md:py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-lg md:text-2xl font-bold text-gray-900 dark:text-white">P2P Trading</h1>
              <p className="text-xs md:text-sm text-gray-500 dark:text-gray-400 mt-0.5 md:mt-1 hidden sm:block">
                Buy and sell Bitcoin directly
              </p>
            </div>
            {currentUser && (
              <button
                onClick={() => setShowCreateModal(true)}
                className="hidden md:flex items-center gap-2 px-3 md:px-4 py-1.5 md:py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm md:text-base"
              >
                <Plus className="w-4 h-4" />
                <span>Create Order</span>
              </button>
            )}
          </div>
        </div>
      </div>
      {/* Filters - Mobile vs Desktop */}
      {isMobile ? (
        <CompactFilters
          filters={filters}
          onFiltersChange={setFilters}
        />
      ) : (
        <div className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <QuickFilters
              selectedCurrency={filters.currency}
              selectedPaymentMethod={filters.paymentMethod}
              onCurrencyChange={(currency) => setFilters({ ...filters, currency })}
              onPaymentMethodChange={(method) => setFilters({ ...filters, paymentMethod: method })}
            />
          </div>
        </div>
      )}
      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <OrderBook filters={filters} />
      </div>
      {/* Create Order Modal */}
      {showCreateModal && (
        <CreateOrderModal onClose={() => setShowCreateModal(false)} />
      )}
    </div>
  );
}
</file>

<file path="pages/WalletPage.tsx">
import { ProfessionalWallet } from '../components/wallet/ProfessionalWallet';
export function WalletPage() {
  return <ProfessionalWallet />;
}
</file>

<file path="stores/settingsStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
export interface Relay {
  url: string;
  read: boolean;
  write: boolean;
  enabled: boolean;
}
interface AppSettings {
  // Relay settings
  relays: Relay[];
  selectedRelay: string | null; // null means use all enabled relays
  // Theme settings (for future)
  theme: 'light' | 'dark' | 'system';
  // Notification settings (for future)
  notifications: {
    enabled: boolean;
    mentions: boolean;
    replies: boolean;
    zaps: boolean;
  };
  // Privacy settings (for future)
  privacy: {
    hideReadReceipts: boolean;
    hideTypingIndicator: boolean;
  };
}
interface SettingsStore extends AppSettings {
  // Relay actions
  addRelay: (relay: Relay) => void;
  removeRelay: (url: string) => void;
  updateRelay: (url: string, updates: Partial<Relay>) => void;
  toggleRelay: (url: string) => void;
  setRelays: (relays: Relay[]) => void;
  setSelectedRelay: (url: string | null) => void;
  // Theme actions
  setTheme: (theme: 'light' | 'dark' | 'system') => void;
  // Notification actions
  updateNotifications: (settings: Partial<AppSettings['notifications']>) => void;
  // Privacy actions
  updatePrivacy: (settings: Partial<AppSettings['privacy']>) => void;
  // General actions
  resetToDefaults: () => void;
}
const defaultRelays: Relay[] = [
  { url: 'wss://relay.damus.io', read: true, write: true, enabled: true },
  { url: 'wss://relay.nostr.band', read: true, write: false, enabled: true },
  { url: 'wss://nos.lol', read: true, write: true, enabled: true },
  { url: 'wss://relay.snort.social', read: true, write: true, enabled: true },
  { url: 'wss://relay.primal.net', read: true, write: true, enabled: true },
];
const defaultSettings: AppSettings = {
  relays: defaultRelays,
  selectedRelay: null,
  theme: 'system',
  notifications: {
    enabled: true,
    mentions: true,
    replies: true,
    zaps: true,
  },
  privacy: {
    hideReadReceipts: false,
    hideTypingIndicator: false,
  },
};
export const useSettingsStore = create<SettingsStore>()(
  persist(
    (set) => ({
      ...defaultSettings,
      // Relay actions
      addRelay: (relay) =>
        set((state) => ({
          relays: [...state.relays, relay],
        })),
      removeRelay: (url) =>
        set((state) => ({
          relays: state.relays.filter((r) => r.url !== url),
        })),
      updateRelay: (url, updates) =>
        set((state) => ({
          relays: state.relays.map((r) =>
            r.url === url ? { ...r, ...updates } : r
          ),
        })),
      toggleRelay: (url) =>
        set((state) => ({
          relays: state.relays.map((r) =>
            r.url === url ? { ...r, enabled: !r.enabled } : r
          ),
        })),
      setRelays: (relays) => set({ relays }),
      setSelectedRelay: (url) => set({ selectedRelay: url }),
      // Theme actions
      setTheme: (theme) => set({ theme }),
      // Notification actions
      updateNotifications: (settings) =>
        set((state) => ({
          notifications: { ...state.notifications, ...settings },
        })),
      // Privacy actions
      updatePrivacy: (settings) =>
        set((state) => ({
          privacy: { ...state.privacy, ...settings },
        })),
      // General actions
      resetToDefaults: () => set(defaultSettings),
    }),
    {
      name: 'voces-settings',
      version: 1,
    }
  )
);
</file>

<file path="app.css">
@import "tailwindcss";
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
@theme {
  --color-background: 0 0% 100%;
  --color-foreground: 222.2 84% 4.9%;
  --color-card: 0 0% 100%;
  --color-card-foreground: 222.2 84% 4.9%;
  --color-popover: 0 0% 100%;
  --color-popover-foreground: 222.2 84% 4.9%;
  --color-primary: 267 84% 60%;
  --color-primary-foreground: 0 0% 100%;
  --color-secondary: 210 40% 96.1%;
  --color-secondary-foreground: 222.2 47.4% 11.2%;
  --color-muted: 210 40% 96.1%;
  --color-muted-foreground: 215.4 16.3% 46.9%;
  --color-accent: 210 40% 96.1%;
  --color-accent-foreground: 222.2 47.4% 11.2%;
  --color-destructive: 0 84.2% 60.2%;
  --color-destructive-foreground: 210 40% 98%;
  --color-border: 214.3 31.8% 91.4%;
  --color-input: 214.3 31.8% 91.4%;
  --color-ring: 267 84% 60%;
  --radius-sm: 0.5rem;
  --radius-md: 0.75rem;
  --radius-lg: 1rem;
}
@layer base {
  * {
    border-color: hsl(var(--color-border));
  }
  html {
    scroll-behavior: smooth;
  }
  body {
    background-color: hsl(var(--color-background));
    color: hsl(var(--color-foreground));
    font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  /* Dark mode */
  @media (prefers-color-scheme: dark) {
    :root {
      --color-background: 224 71% 4%;
      --color-foreground: 213 31% 91%;
      --color-card: 224 71% 4%;
      --color-card-foreground: 213 31% 91%;
      --color-popover: 224 71% 4%;
      --color-popover-foreground: 213 31% 91%;
      --color-primary: 267 84% 60%;
      --color-primary-foreground: 0 0% 100%;
      --color-secondary: 222.2 47.4% 11.2%;
      --color-secondary-foreground: 210 40% 98%;
      --color-muted: 223 47% 11%;
      --color-muted-foreground: 215 20.2% 65.1%;
      --color-accent: 223 47% 11%;
      --color-accent-foreground: 210 40% 98%;
      --color-destructive: 0 62.8% 30.6%;
      --color-destructive-foreground: 210 40% 98%;
      --color-border: 223 47% 11%;
      --color-input: 223 47% 11%;
      --color-ring: 267 84% 60%;
    }
  }
  .dark {
    --color-background: 224 71% 4%;
    --color-foreground: 213 31% 91%;
    --color-card: 224 71% 4%;
    --color-card-foreground: 213 31% 91%;
    --color-popover: 224 71% 4%;
    --color-popover-foreground: 213 31% 91%;
    --color-primary: 267 84% 60%;
    --color-primary-foreground: 0 0% 100%;
    --color-secondary: 222.2 47.4% 11.2%;
    --color-secondary-foreground: 210 40% 98%;
    --color-muted: 223 47% 11%;
    --color-muted-foreground: 215 20.2% 65.1%;
    --color-accent: 223 47% 11%;
    --color-accent-foreground: 210 40% 98%;
    --color-destructive: 0 62.8% 30.6%;
    --color-destructive-foreground: 210 40% 98%;
    --color-border: 223 47% 11%;
    --color-input: 223 47% 11%;
    --color-ring: 267 84% 60%;
  }
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 0.5rem;
    height: 0.5rem;
  }
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  ::-webkit-scrollbar-thumb {
    background-color: rgb(209 213 219);
    border-radius: 9999px;
  }
  .dark ::-webkit-scrollbar-thumb {
    background-color: rgb(55 65 81);
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(156 163 175);
  }
  .dark ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(75 85 99);
  }
  /* Focus visible improvements */
  :focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--color-ring));
  }
  button:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--color-ring));
  }
}
@layer utilities {
  /* Text selection */
  ::selection {
    background-color: rgb(233 213 255);
    color: rgb(88 28 135);
  }
  .dark ::selection {
    background-color: rgb(88 28 135);
    color: rgb(233 213 255);
  }
  /* Animation utilities */
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes slide-up {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  .animate-fade-in {
    animation: fade-in 0.5s ease-in-out;
  }
  .animate-slide-up {
    animation: slide-up 0.3s ease-out;
  }
}
</file>

<file path="App.tsx">
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { Layout } from './components/layout/Layout';
import { HomePage } from './pages/HomePage';
import { ComposePage } from './pages/ComposePage';
import { NotificationsPage } from './pages/NotificationsPage';
import { ProfilePage } from './pages/ProfilePage';
import { WalletPage } from './pages/WalletPage';
import { SettingsPage } from './pages/SettingsPage';
import { TradePage } from './pages/TradePage';
import { MarketplacePage } from './pages/marketplace/MarketplacePage';
import { CreateListingPage } from './pages/marketplace/CreateListingPage';
import { ListingDetailPage } from './pages/marketplace/ListingDetailPage';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
const queryClient = new QueryClient();
function AppRoutes() {
  const currentUser = useNDKCurrentUser();
  return (
    <Routes>
      <Route path="/" element={<Layout />}>
        <Route index element={<HomePage />} />
        <Route path="compose" element={currentUser ? <ComposePage /> : <Navigate to="/" />} />
        <Route path="notifications" element={currentUser ? <NotificationsPage /> : <Navigate to="/" />} />
        <Route path="profile" element={currentUser ? <ProfilePage /> : <Navigate to="/" />} />
        <Route path="profile/:pubkey" element={<ProfilePage />} />
        <Route path="wallet" element={<WalletPage />} />
        <Route path="trades" element={<TradePage />} />
        <Route path="marketplace" element={<MarketplacePage />} />
        <Route path="marketplace/create" element={<CreateListingPage />} />
        <Route path="marketplace/:id" element={<ListingDetailPage />} />
        <Route path="settings" element={<SettingsPage />} />
      </Route>
    </Routes>
  );
}
function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        <AppRoutes />
      </BrowserRouter>
    </QueryClientProvider>
  );
}
export default App;
</file>

<file path="index.css">
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 267 84% 60%;
    --primary-foreground: 0 0% 100%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 267 84% 60%;
    --radius: 0.75rem;
  }
  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;
    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;
    --popover: 224 71% 4%;
    --popover-foreground: 213 31% 91%;
    --primary: 267 84% 60%;
    --primary-foreground: 0 0% 100%;
    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;
    --muted: 223 47% 11%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 223 47% 11%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 223 47% 11%;
    --input: 223 47% 11%;
    --ring: 267 84% 60%;
  }
}
@layer base {
  * {
    border-color: hsl(var(--border));
  }
  html {
    scroll-behavior: smooth;
  }
  body {
    background-color: rgb(249 250 251);
    color: rgb(17 24 39);
    font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  .dark body {
    background-color: rgb(17 24 39);
    color: rgb(243 244 246);
  }
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 0.5rem;
    height: 0.5rem;
  }
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  ::-webkit-scrollbar-thumb {
    background-color: rgb(209 213 219);
    border-radius: 9999px;
  }
  .dark ::-webkit-scrollbar-thumb {
    background-color: rgb(55 65 81);
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(156 163 175);
  }
  .dark ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(75 85 99);
  }
  /* Focus visible improvements */
  :focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring));
  }
  button:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring));
  }
}
@layer utilities {
  /* Text selection */
  ::selection {
    background-color: rgb(233 213 255);
    color: rgb(88 28 135);
  }
  .dark ::selection {
    background-color: rgb(88 28 135);
    color: rgb(233 213 255);
  }
  /* Animation utilities */
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes slide-up {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  .animate-fade-in {
    animation: fade-in 0.5s ease-in-out;
  }
  .animate-slide-up {
    animation: slide-up 0.3s ease-out;
  }
  /* Hide scrollbar for horizontal scrolling sections */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;  /* Chrome, Safari and Opera */
  }
}
</file>

<file path="main.tsx">
import React from 'react';
import { createRoot } from 'react-dom/client';
import { NDKHeadless, NDKSessionLocalStorage } from '@nostr-dev-kit/ndk-hooks';
import NDKCacheAdapterDexie from '@nostr-dev-kit/ndk-cache-dexie';
import { useSettingsStore } from './stores/settingsStore';
import './app.css';
import App from './App.tsx';
const root = createRoot(document.getElementById('root')!);
function AppWithNDK() {
  // Get relay configuration from settings store
  const relays = useSettingsStore((state) => state.relays);
  const selectedRelay = useSettingsStore((state) => state.selectedRelay);
  // If a specific relay is selected, use only that one
  // Otherwise use all enabled relays
  let relayUrls: string[];
  if (selectedRelay) {
    // Single relay mode
    relayUrls = [selectedRelay];
  } else {
    // All enabled relays mode
    const enabledRelayUrls = relays
      .filter((relay) => relay.enabled)
      .map((relay) => relay.url);
    // Fallback to default relays if none are enabled
    relayUrls = enabledRelayUrls.length > 0
      ? enabledRelayUrls
      : ['wss://relay.damus.io', 'wss://nos.lol'];
  }
  return (
    <>
      <NDKHeadless
        ndk={{
          explicitRelayUrls: relayUrls,
          cacheAdapter: new NDKCacheAdapterDexie({ dbName: 'voces-ndk-cache' }),
        }}
        session={{
          storage: new NDKSessionLocalStorage(),
          opts: {
            follows: true,
            profile: true
          }
        }}
      />
      <App />
    </>
  );
}
root.render(
  <React.StrictMode>
    <AppWithNDK />
  </React.StrictMode>
);
</file>

</files>
</file>

<file path="src/app.css">
@import "tailwindcss";
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
@theme {
  --color-background: 0 0% 100%;
  --color-foreground: 222.2 84% 4.9%;
  --color-card: 0 0% 100%;
  --color-card-foreground: 222.2 84% 4.9%;
  --color-popover: 0 0% 100%;
  --color-popover-foreground: 222.2 84% 4.9%;
  --color-primary: 267 84% 60%;
  --color-primary-foreground: 0 0% 100%;
  --color-secondary: 210 40% 96.1%;
  --color-secondary-foreground: 222.2 47.4% 11.2%;
  --color-muted: 210 40% 96.1%;
  --color-muted-foreground: 215.4 16.3% 46.9%;
  --color-accent: 210 40% 96.1%;
  --color-accent-foreground: 222.2 47.4% 11.2%;
  --color-destructive: 0 84.2% 60.2%;
  --color-destructive-foreground: 210 40% 98%;
  --color-border: 214.3 31.8% 91.4%;
  --color-input: 214.3 31.8% 91.4%;
  --color-ring: 267 84% 60%;
  --radius-sm: 0.5rem;
  --radius-md: 0.75rem;
  --radius-lg: 1rem;
}
@layer base {
  * {
    border-color: hsl(var(--color-border));
  }
  html {
    scroll-behavior: smooth;
  }
  body {
    background-color: hsl(var(--color-background));
    color: hsl(var(--color-foreground));
    font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
  /* Dark mode */
  @media (prefers-color-scheme: dark) {
    :root {
      --color-background: 224 71% 4%;
      --color-foreground: 213 31% 91%;
      --color-card: 224 71% 4%;
      --color-card-foreground: 213 31% 91%;
      --color-popover: 224 71% 4%;
      --color-popover-foreground: 213 31% 91%;
      --color-primary: 267 84% 60%;
      --color-primary-foreground: 0 0% 100%;
      --color-secondary: 222.2 47.4% 11.2%;
      --color-secondary-foreground: 210 40% 98%;
      --color-muted: 223 47% 11%;
      --color-muted-foreground: 215 20.2% 65.1%;
      --color-accent: 223 47% 11%;
      --color-accent-foreground: 210 40% 98%;
      --color-destructive: 0 62.8% 30.6%;
      --color-destructive-foreground: 210 40% 98%;
      --color-border: 223 47% 11%;
      --color-input: 223 47% 11%;
      --color-ring: 267 84% 60%;
    }
  }
  .dark {
    --color-background: 224 71% 4%;
    --color-foreground: 213 31% 91%;
    --color-card: 224 71% 4%;
    --color-card-foreground: 213 31% 91%;
    --color-popover: 224 71% 4%;
    --color-popover-foreground: 213 31% 91%;
    --color-primary: 267 84% 60%;
    --color-primary-foreground: 0 0% 100%;
    --color-secondary: 222.2 47.4% 11.2%;
    --color-secondary-foreground: 210 40% 98%;
    --color-muted: 223 47% 11%;
    --color-muted-foreground: 215 20.2% 65.1%;
    --color-accent: 223 47% 11%;
    --color-accent-foreground: 210 40% 98%;
    --color-destructive: 0 62.8% 30.6%;
    --color-destructive-foreground: 210 40% 98%;
    --color-border: 223 47% 11%;
    --color-input: 223 47% 11%;
    --color-ring: 267 84% 60%;
  }
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 0.5rem;
    height: 0.5rem;
  }
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  ::-webkit-scrollbar-thumb {
    background-color: rgb(209 213 219);
    border-radius: 9999px;
  }
  .dark ::-webkit-scrollbar-thumb {
    background-color: rgb(55 65 81);
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(156 163 175);
  }
  .dark ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(75 85 99);
  }
  /* Focus visible improvements */
  :focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--color-ring));
  }
  button:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--color-ring));
  }
}
@layer utilities {
  /* Text selection */
  ::selection {
    background-color: rgb(233 213 255);
    color: rgb(88 28 135);
  }
  .dark ::selection {
    background-color: rgb(88 28 135);
    color: rgb(233 213 255);
  }
  /* Animation utilities */
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes slide-up {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  .animate-fade-in {
    animation: fade-in 0.5s ease-in-out;
  }
  .animate-slide-up {
    animation: slide-up 0.3s ease-out;
  }
}
</file>

<file path=".gitignore">
# TENEX project files
.tenex/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Voces - NDK Nostr App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="README.md">
# Voces - Modern NDK Nostr App

A modern React-based Nostr client built with NDK (Nostr Development Kit), Vite, shadcn/ui, and TypeScript.

## Features

- **Nostr Authentication**: Login with NIP-07 browser extensions (Alby, nos2x, etc.) or private key
- **Real-time Feed**: View and publish notes to the Nostr network
- **Modern UI**: Built with shadcn/ui and Tailwind CSS for a clean, responsive interface
- **State Management**: Zustand for global state, React Query for server state
- **Caching**: Dexie-based caching for improved performance
- **TypeScript**: Full type safety throughout the application

## Tech Stack

- **Framework**: React 19 with TypeScript
- **Build Tool**: Vite
- **Nostr SDK**: @nostr-dev-kit/ndk with React hooks
- **UI Components**: shadcn/ui with Radix UI primitives
- **Styling**: Tailwind CSS
- **State Management**: Zustand
- **Data Fetching**: TanStack Query (React Query)
- **Database**: Dexie (IndexedDB wrapper) for caching
- **Routing**: React Router DOM

## Project Structure

```
src/
├── components/       # Reusable UI components
│   ├── ui/          # shadcn/ui components
│   ├── nostr/       # Nostr-specific components
│   └── layout/      # Layout components
├── features/        # Feature-based modules
│   ├── auth/        # Authentication features
│   ├── feed/        # Feed and notes features
│   └── profile/     # User profile features
├── hooks/           # Custom React hooks
├── lib/             # Utility functions
├── contexts/        # React contexts (NDK provider, etc.)
├── types/           # TypeScript type definitions
├── utils/           # Helper functions
└── config/          # Configuration files (NDK setup, etc.)
```

## Getting Started

### Prerequisites

- Node.js 18+ and npm
- A Nostr browser extension (recommended: [Alby](https://getalby.com/))

### Installation

```bash
# Install dependencies
npm install

# Start development server
npm run dev

# Build for production
npm run build

# Preview production build
npm run preview
```

### Development

The app will run on `http://localhost:5173` by default.

### Configuration

The app connects to multiple public Nostr relays by default:
- wss://relay.damus.io
- wss://relay.nostr.band
- wss://nos.lol
- wss://relay.snort.social
- wss://relay.primal.net

You can modify the relay list in `src/config/ndk.ts`.

## Key Features Implementation

### NDK Integration

The app uses NDK with:
- Auto-connection to user relays
- Outbox model support
- Dexie cache adapter for performance
- NIP-07 signer support for browser extensions

### Component Architecture

- **Feature-based organization**: Each feature (auth, feed, profile) has its own folder
- **Shared UI components**: Common UI elements in `components/ui`
- **Type-safe**: Full TypeScript coverage with strict mode

### State Management

- **NDK Context**: Provides NDK instance and user state globally
- **Zustand**: For complex client state (included, ready for use)
- **React Query**: For server state and caching

## License

MIT
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "types": ["vite/client"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    /* Path aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "types": [],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="src/features/auth/LoginButton.tsx">
import { useState } from 'react';
import { 
  useNDKCurrentUser,
  useNDKSessionLogin,
  useNDKSessionLogout,
  NDKNip07Signer,
  NDKPrivateKeySigner
} from '@nostr-dev-kit/ndk-hooks';
import { Button } from '@/components/ui/button';
import { User, LogOut, Key, Sparkles } from 'lucide-react';
export function LoginButton() {
  const currentUser = useNDKCurrentUser();
  const login = useNDKSessionLogin();
  const logout = useNDKSessionLogout();
  const [showOptions, setShowOptions] = useState(false);
  const [nsec, setNsec] = useState('');
  const [showNsecInput, setShowNsecInput] = useState(false);
  const [isConnecting, setIsConnecting] = useState(false);
  const handleExtensionLogin = async () => {
    setIsConnecting(true);
    try {
      if (!window.nostr) {
        throw new Error('No Nostr extension found. Please install Alby or nos2x.');
      }
      const signer = new NDKNip07Signer();
      await login(signer, true);
      setShowOptions(false);
    } catch (error) {
      console.error('Extension login failed:', error);
      alert(error instanceof Error ? error.message : 'Extension login failed');
    } finally {
      setIsConnecting(false);
    }
  };
  const handlePrivateKeyLogin = async () => {
    if (!nsec) return;
    setIsConnecting(true);
    try {
      const signer = new NDKPrivateKeySigner(nsec);
      await login(signer, true);
      localStorage.setItem('nostr_private_key', nsec);
      setNsec('');
      setShowNsecInput(false);
      setShowOptions(false);
    } catch (error) {
      console.error('Private key login failed:', error);
      alert('Invalid private key');
    } finally {
      setIsConnecting(false);
    }
  };
  const handleGenerateIdentity = async () => {
    setIsConnecting(true);
    try {
      const signer = NDKPrivateKeySigner.generate();
      await login(signer, true);
      const privateKey = signer.privateKey!;
      localStorage.setItem('nostr_private_key', privateKey);
      const user = await signer.user();
      alert(`New identity created!\nnpub: ${user.npub}\nnsec: ${privateKey}\n\nIMPORTANT: Save your nsec somewhere safe!`);
      setShowOptions(false);
    } catch (error) {
      console.error('Failed to generate identity:', error);
      alert('Failed to generate new identity');
    } finally {
      setIsConnecting(false);
    }
  };
  const handleLogout = () => {
    logout();
    localStorage.removeItem('nostr_private_key');
  };
  if (currentUser) {
    return (
      <div className="flex items-center gap-4">
        <button
          onClick={handleLogout}
          className="px-4 py-2 rounded-full bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 transition-colors text-sm font-medium flex items-center gap-2"
        >
          <LogOut className="w-4 h-4" />
          <span className="hidden sm:inline">Logout</span>
        </button>
      </div>
    );
  }
  if (showOptions) {
    return (
      <div className="flex flex-col gap-2">
        <Button
          onClick={handleExtensionLogin}
          disabled={isConnecting}
          variant="default"
          size="sm"
        >
          <User className="w-4 h-4 mr-2" />
          Login with Extension
        </Button>
        {showNsecInput ? (
          <div className="flex gap-2">
            <input
              type="password"
              placeholder="Enter nsec or hex key"
              value={nsec}
              onChange={(e) => setNsec(e.target.value)}
              className="px-3 py-1 border rounded text-sm"
              disabled={isConnecting}
            />
            <Button
              onClick={handlePrivateKeyLogin}
              disabled={!nsec || isConnecting}
              size="sm"
              variant="outline"
            >
              Login
            </Button>
          </div>
        ) : (
          <Button
            onClick={() => setShowNsecInput(true)}
            disabled={isConnecting}
            variant="outline"
            size="sm"
          >
            <Key className="w-4 h-4 mr-2" />
            Login with Private Key
          </Button>
        )}
        <Button
          onClick={handleGenerateIdentity}
          disabled={isConnecting}
          variant="outline"
          size="sm"
        >
          <Sparkles className="w-4 h-4 mr-2" />
          Generate New Identity
        </Button>
        <Button
          onClick={() => {
            setShowOptions(false);
            setShowNsecInput(false);
            setNsec('');
          }}
          variant="ghost"
          size="sm"
          disabled={isConnecting}
        >
          Cancel
        </Button>
      </div>
    );
  }
  return (
    <button
      onClick={() => setShowOptions(true)}
      disabled={isConnecting}
      className="px-4 py-2 rounded-lg bg-white hover:bg-neutral-100 dark:bg-neutral-900 dark:hover:bg-neutral-800 text-neutral-900 dark:text-white border border-neutral-200 dark:border-neutral-700 transition-all text-sm font-medium flex items-center gap-2"
    >
      <User className="w-4 h-4" />
      <span className="hidden sm:inline">{isConnecting ? 'Connecting...' : 'Login'}</span>
      <span className="sm:hidden">{isConnecting ? '...' : 'Login'}</span>
    </button>
  );
}
</file>

<file path="src/features/feed/ComposeNote.tsx">
import { useState, type FormEvent, useRef, useEffect } from 'react';
import { useNDK, NDKEvent, useNDKCurrentUser, NDKKind, useProfile } from '@nostr-dev-kit/ndk-hooks';
import { Image, Smile, MapPin } from 'lucide-react';
import { cn } from '@/lib/utils';
export function ComposeNote() {
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const profile = useProfile(currentUser?.pubkey);
  const [content, setContent] = useState('');
  const [isPublishing, setIsPublishing] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  // Auto-resize textarea
  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = `${Math.min(textarea.scrollHeight, 300)}px`;
    }
  }, [content]);
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!content.trim() || !currentUser || !ndk) return;
    setIsPublishing(true);
    try {
      const event = new NDKEvent(ndk);
      event.kind = NDKKind.Text;
      event.content = content;
      await event.publish();
      setContent('');
    } catch (error) {
      console.error('Failed to publish note:', error);
    } finally {
      setIsPublishing(false);
    }
  };
  if (!currentUser) {
    return null;
  }
  const displayName = profile?.name || 'Anonymous';
  const remainingChars = 280 - content.length;
  const isOverLimit = remainingChars < 0;
  return (
    <div className="bg-white dark:bg-gray-950 rounded-lg">
      <form onSubmit={handleSubmit}>
        <div className="flex gap-3">
          {/* Avatar */}
          <div className="flex-shrink-0">
            {profile?.picture ? (
              <img
                src={profile.picture}
                alt={displayName}
                className="w-10 h-10 sm:w-12 sm:h-12 rounded-full object-cover"
              />
            ) : (
              <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-semibold">
                {displayName[0]?.toUpperCase()}
              </div>
            )}
          </div>
          {/* Input area */}
          <div className="flex-1">
            <textarea
              ref={textareaRef}
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="What's happening?"
              className="w-full p-0 text-lg placeholder:text-gray-500 dark:placeholder:text-gray-400 bg-transparent resize-none focus:outline-none text-gray-900 dark:text-gray-100 min-h-[60px]"
              disabled={isPublishing}
            />
            {/* Actions bar */}
            <div className="flex items-center justify-between mt-3 pt-3 border-t border-gray-200 dark:border-gray-800">
              <div className="flex items-center gap-1">
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add image (coming soon)"
                >
                  <Image className="w-5 h-5" />
                </button>
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add emoji (coming soon)"
                >
                  <Smile className="w-5 h-5" />
                </button>
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add location (coming soon)"
                >
                  <MapPin className="w-5 h-5" />
                </button>
              </div>
              <div className="flex items-center gap-3">
                {/* Character counter */}
                {content.length > 0 && (
                  <div className="relative">
                    <svg className="w-8 h-8 -rotate-90">
                      <circle
                        cx="16"
                        cy="16"
                        r="14"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        className="text-gray-200 dark:text-gray-700"
                      />
                      <circle
                        cx="16"
                        cy="16"
                        r="14"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeDasharray={`${Math.max(0, (Math.min(280, content.length) / 280) * 88)} 88`}
                        strokeLinecap="round"
                        className={cn(
                          "transition-all duration-150",
                          isOverLimit ? "text-red-500" : 
                          remainingChars < 20 ? "text-yellow-500" : 
                          "text-purple-500"
                        )}
                      />
                    </svg>
                    {remainingChars < 20 && (
                      <span className={cn(
                        "absolute inset-0 flex items-center justify-center text-xs font-medium",
                        isOverLimit ? "text-red-500" : "text-gray-500 dark:text-gray-400"
                      )}>
                        {remainingChars}
                      </span>
                    )}
                  </div>
                )}
                {/* Publish button */}
                <button
                  type="submit"
                  disabled={!content.trim() || isPublishing || isOverLimit}
                  className={cn(
                    "px-4 py-1.5 rounded-full font-medium transition-all",
                    (!content.trim() || isOverLimit)
                      ? "bg-gray-200 text-gray-400 dark:bg-gray-800 dark:text-gray-600 cursor-not-allowed"
                      : "bg-purple-600 text-white hover:bg-purple-700 dark:bg-purple-500 dark:hover:bg-purple-600"
                  )}
                >
                  {isPublishing ? (
                    <span className="flex items-center gap-2">
                      <span className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                      Publishing
                    </span>
                  ) : (
                    'Publish'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}
</file>

<file path="src/features/feed/NoteFeed.tsx">
import { useSubscribe, NDKKind } from '@nostr-dev-kit/ndk-hooks';
import { NoteCard } from './NoteCard';
export function NoteFeed() {
  const { events } = useSubscribe([{
    kinds: [NDKKind.Text],
  }], { subId: 'note-feed' });
  if (events.length === 0) {
    return (
      <div className="text-center py-12 px-4">
        <p className="text-gray-500 dark:text-gray-400">
          No notes yet. Be the first to share something!
        </p>
      </div>
    );
  }
  return (
    <div className="divide-y divide-gray-200 dark:divide-gray-800">
      {events.length}
      {events.map((event) => (
        <NoteCard key={event.id} event={event} />
      ))}
    </div>
  );
}
</file>

<file path="src/App.tsx">
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { Layout } from './components/layout/Layout';
import { HomePage } from './pages/HomePage';
import { ComposePage } from './pages/ComposePage';
import { NotificationsPage } from './pages/NotificationsPage';
import { ProfilePage } from './pages/ProfilePage';
import { WalletPage } from './pages/WalletPage';
import { SettingsPage } from './pages/SettingsPage';
import { TradePage } from './pages/TradePage';
import { MarketplacePage } from './pages/marketplace/MarketplacePage';
import { CreateListingPage } from './pages/marketplace/CreateListingPage';
import { ListingDetailPage } from './pages/marketplace/ListingDetailPage';
import { FollowPacksPage } from './pages/FollowPacksPage';
import { FollowPackDetailPage } from './pages/FollowPackDetailPage';
import { NoteDetailPage } from './pages/NoteDetailPage';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
const queryClient = new QueryClient();
function AppRoutes() {
  const currentUser = useNDKCurrentUser();
  return (
    <Routes>
      <Route path="/" element={<Layout />}>
        <Route index element={<HomePage />} />
        <Route path="compose" element={currentUser ? <ComposePage /> : <Navigate to="/" />} />
        <Route path="notifications" element={currentUser ? <NotificationsPage /> : <Navigate to="/" />} />
        <Route path="profile" element={currentUser ? <ProfilePage /> : <Navigate to="/" />} />
        <Route path="p/:identifier" element={<ProfilePage />} />
        <Route path="e/:nevent" element={<NoteDetailPage />} />
        <Route path="packs" element={<FollowPacksPage />} />
        <Route path="packs/:packId" element={<FollowPackDetailPage />} />
        <Route path="wallet" element={<WalletPage />} />
        <Route path="trades" element={<TradePage />} />
        <Route path="marketplace" element={<MarketplacePage />} />
        <Route path="marketplace/create" element={<CreateListingPage />} />
        <Route path="marketplace/:id" element={<ListingDetailPage />} />
        <Route path="settings" element={<SettingsPage />} />
      </Route>
    </Routes>
  );
}
function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        <AppRoutes />
      </BrowserRouter>
    </QueryClientProvider>
  );
}
export default App;
</file>

<file path="src/index.css">
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 9%;
    --primary: 217 91% 60%;
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 217 91% 60%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 72% 51%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 217 91% 60%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 0%;
    --foreground: 0 0% 95%;
    --card: 0 0% 0%;
    --card-foreground: 0 0% 95%;
    --popover: 0 0% 4%;
    --popover-foreground: 0 0% 95%;
    --primary: 217 91% 60%;
    --primary-foreground: 0 0% 0%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 60%;
    --accent: 217 91% 60%;
    --accent-foreground: 0 0% 0%;
    --destructive: 0 62% 30%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 217 91% 60%;
  }
}
@layer base {
  * {
    border-color: hsl(var(--border));
  }
  html {
    scroll-behavior: smooth;
  }
  body {
    background: linear-gradient(180deg, #FFFFFF 0%, #F8F9FA 100%);
    min-height: 100vh;
    color: #1A1A1A;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Inter', system-ui, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-feature-settings: 'cv02', 'cv03', 'cv04', 'cv11';
  }
  .dark body {
    background: #000000;
    color: #FFFFFF;
  }
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 0.5rem;
    height: 0.5rem;
  }
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  ::-webkit-scrollbar-thumb {
    background-color: rgb(209 213 219);
    border-radius: 9999px;
  }
  .dark ::-webkit-scrollbar-thumb {
    background-color: rgb(55 65 81);
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(156 163 175);
  }
  .dark ::-webkit-scrollbar-thumb:hover {
    background-color: rgb(75 85 99);
  }
  /* Focus visible improvements */
  :focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring));
  }
  button:focus-visible {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring));
  }
}
@layer utilities {
  /* Text selection */
  ::selection {
    background-color: rgb(233 213 255);
    color: rgb(88 28 135);
  }
  .dark ::selection {
    background-color: rgb(88 28 135);
    color: rgb(233 213 255);
  }
  /* Animation utilities */
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes slide-up {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  .animate-fade-in {
    animation: fade-in 0.5s ease-in-out;
  }
  .animate-slide-up {
    animation: slide-up 0.3s ease-out;
  }
  /* Hide scrollbar for horizontal scrolling sections */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;  /* Chrome, Safari and Opera */
  }
}
</file>

<file path="src/main.tsx">
import React from 'react';
import { createRoot } from 'react-dom/client';
import { NDKHeadless, NDKSessionLocalStorage } from '@nostr-dev-kit/ndk-hooks';
import NDKCacheAdapterDexie from '@nostr-dev-kit/ndk-cache-dexie';
import { useSettingsStore } from './stores/settingsStore';
import './i18n/config';
import './app.css';
import App from './App.tsx';
const root = createRoot(document.getElementById('root')!);
function AppWithNDK() {
  // Get relay configuration from settings store
  const relays = useSettingsStore((state) => state.relays);
  const selectedRelay = useSettingsStore((state) => state.selectedRelay);
  // If a specific relay is selected, use only that one
  // Otherwise use all enabled relays
  let relayUrls: string[];
  if (selectedRelay) {
    // Single relay mode
    relayUrls = [selectedRelay];
  } else {
    // All enabled relays mode
    const enabledRelayUrls = relays
      .filter((relay) => relay.enabled)
      .map((relay) => relay.url);
    // Fallback to default relays if none are enabled
    relayUrls = enabledRelayUrls.length > 0
      ? enabledRelayUrls
      : ['wss://relay.damus.io', 'wss://nos.lol'];
  }
  return (
    <>
      <NDKHeadless
        ndk={{
          explicitRelayUrls: relayUrls,
          cacheAdapter: new NDKCacheAdapterDexie({ dbName: 'voces-ndk-cache' }),
        }}
        session={{
          storage: new NDKSessionLocalStorage(),
          opts: {
            follows: true,
            profile: true
          }
        }}
      />
      <App />
    </>
  );
}
root.render(
  <React.StrictMode>
    <AppWithNDK />
  </React.StrictMode>
);
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
export default tseslint.config(
  { ignores: ['dist', 'node_modules', '.playwright-mcp'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react': react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
      'react/react-in-jsx-scope': 'off',
      'react/prop-types': 'off',
      '@typescript-eslint/no-unused-vars': ['error', {
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
        caughtErrorsIgnorePattern: '^_'
      }],
      '@typescript-eslint/no-explicit-any': 'warn',
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
)
</file>

<file path="package.json">
{
  "name": "voces-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@nostr-dev-kit/ndk": "^2.14.35",
    "@nostr-dev-kit/ndk-cache-dexie": "^2.0.10",
    "@nostr-dev-kit/ndk-hooks": "^1.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.13",
    "@tanstack/react-query": "^5.90.2",
    "axios": "^1.12.2",
    "blossom-client-sdk": "^4.1.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.23.22",
    "i18next": "^25.5.2",
    "i18next-browser-languagedetector": "^8.2.0",
    "lucide-react": "^0.544.0",
    "nostr-tools": "^2.17.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-i18next": "^16.0.0",
    "react-router-dom": "^7.9.1",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@tailwindcss/postcss": "^4.1.13",
    "@tailwindcss/typography": "^0.5.18",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.3",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.36.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.13",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.44.0",
    "vite": "^7.1.7"
  }
}
</file>

<file path="postcss.config.js">
import tailwindcss from '@tailwindcss/postcss';
export default {
  plugins: [
    tailwindcss(),
  ],
};
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    './index.html',
    './src/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      colors: {
        // Sophisticated monochrome base
        neutral: {
          50: '#FAFAFA',
          100: '#F5F5F5',
          150: '#EDEDED',
          200: '#E5E5E5',
          300: '#D4D4D4',
          400: '#A3A3A3',
          500: '#737373',
          600: '#525252',
          700: '#404040',
          800: '#262626',
          850: '#1A1A1A',
          900: '#171717',
          950: '#0A0A0A',
        },
        // Premium accent - deep blue/indigo
        accent: {
          50: '#EEF2FF',
          100: '#E0E7FF',
          200: '#C7D2FE',
          300: '#A5B4FC',
          400: '#818CF8',
          500: '#6366F1',
          600: '#4F46E5',
          700: '#4338CA',
          800: '#3730A3',
          900: '#312E81',
        },
        // Success - muted sage green
        success: {
          50: '#F0FDF4',
          100: '#DCFCE7',
          200: '#BBF7D0',
          300: '#86EFAC',
          400: '#4ADE80',
          500: '#22C55E',
          600: '#16A34A',
          700: '#15803D',
          800: '#166534',
          900: '#14532D',
        },
        // Warning - warm amber
        warning: {
          50: '#FFFBEB',
          100: '#FEF3C7',
          200: '#FDE68A',
          300: '#FCD34D',
          400: '#FBBF24',
          500: '#F59E0B',
          600: '#D97706',
          700: '#B45309',
          800: '#92400E',
          900: '#78350F',
        },
        // Error - muted red
        danger: {
          50: '#FEF2F2',
          100: '#FEE2E2',
          200: '#FECACA',
          300: '#FCA5A5',
          400: '#F87171',
          500: '#EF4444',
          600: '#DC2626',
          700: '#B91C1C',
          800: '#991B1B',
          900: '#7F1D1D',
        },
      },
      fontFamily: {
        sans: ['SF Pro Display', 'Inter', 'system-ui', '-apple-system', 'sans-serif'],
        mono: ['SF Mono', 'Monaco', 'Inconsolata', 'monospace'],
      },
      fontSize: {
        '2xs': '0.625rem',
        'xs': '0.75rem',
        'sm': '0.875rem',
        'base': '1rem',
        'lg': '1.125rem',
        'xl': '1.25rem',
        '2xl': '1.5rem',
        '3xl': '1.875rem',
        '4xl': '2.25rem',
        '5xl': '3rem',
      },
      animation: {
        'fade-in': 'fadeIn 0.15s ease-out',
        'slide-up': 'slideUp 0.2s ease-out',
        'scale-in': 'scaleIn 0.15s ease-out',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        scaleIn: {
          '0%': { transform: 'scale(0.95)', opacity: '0' },
          '100%': { transform: 'scale(1)', opacity: '1' },
        },
      },
      boxShadow: {
        'soft': '0 1px 3px 0 rgb(0 0 0 / 0.02), 0 1px 2px -1px rgb(0 0 0 / 0.02)',
        'soft-md': '0 4px 6px -1px rgb(0 0 0 / 0.03), 0 2px 4px -2px rgb(0 0 0 / 0.03)',
        'soft-lg': '0 10px 15px -3px rgb(0 0 0 / 0.04), 0 4px 6px -4px rgb(0 0 0 / 0.04)',
        'soft-xl': '0 20px 25px -5px rgb(0 0 0 / 0.05), 0 8px 10px -6px rgb(0 0 0 / 0.05)',
        'glow': '0 0 20px rgba(99, 102, 241, 0.15)',
        'inner-soft': 'inset 0 1px 4px 0 rgb(0 0 0 / 0.05)',
      },
      backdropBlur: {
        xs: '2px',
      },
      borderRadius: {
        'sm': '0.25rem',
        'DEFAULT': '0.375rem',
        'md': '0.5rem',
        'lg': '0.75rem',
        'xl': '1rem',
        '2xl': '1.25rem',
        '3xl': '1.5rem',
      },
    },
  },
  plugins: [],
};
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'
// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  optimizeDeps: {
    exclude: ['@nostr-dev-kit/ndk-cache-sqlite-wasm']
  },
  server: {
    headers: {
      'Cross-Origin-Embedder-Policy': 'credentialless',
      'Cross-Origin-Opener-Policy': 'same-origin',
    },
    fs: {
      allow: ['..']
    }
  },
  assetsInclude: ['**/*.wasm'],
})
</file>

</files>
