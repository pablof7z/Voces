This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: local-research/nip17-current-state.md, local-research/nip17-implementation-plan.md, local-research/nip17-spec-details.md, package.json, src/main.tsx, src/App.tsx, src/config/auth.ts, src/features/auth/LoginModal.tsx, src/features/auth/useAutoLogin.ts, src/features/auth/utils/logout.ts, src/stores/settingsStore.ts, src/components/navigation/RelaySelector.tsx, src/components/navigation/NavItems.tsx, src/components/navigation/BottomNav.tsx, src/components/navigation/UserMenu.tsx, src/features/feed/ComposeNote.tsx, src/pages/ComposePage.tsx, src/features/feed/NoteCard.tsx, src/components/thread/ThreadNoteCard.tsx, src/pages/NoteDetailPage.tsx, src/lib/utils.ts, src/i18n/locales/en.json, src/i18n/locales/es.json
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo, **/certdata.txt
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
local-research/
  nip17-current-state.md
  nip17-implementation-plan.md
  nip17-spec-details.md
src/
  components/
    navigation/
      BottomNav.tsx
      NavItems.tsx
      RelaySelector.tsx
      UserMenu.tsx
    thread/
      ThreadNoteCard.tsx
  config/
    auth.ts
  features/
    auth/
      utils/
        logout.ts
      LoginModal.tsx
      useAutoLogin.ts
    feed/
      ComposeNote.tsx
      NoteCard.tsx
  i18n/
    locales/
      en.json
      es.json
  lib/
    utils.ts
  pages/
    ComposePage.tsx
    NoteDetailPage.tsx
  stores/
    settingsStore.ts
  App.tsx
  main.tsx
package.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="local-research/nip17-current-state.md">
Packing repository using Repomix...
Analyzing repository using gemini-2.5-flash...
The project "Voces" is a modern React-based Nostr client that utilizes the Nostr Development Kit (NDK) for interaction with the Nostr network.

Here's an analysis of the existing messaging/DM functionality, encryption utilities, and overall architecture for handling Nostr events:

### 1. Messaging or DM functionality

The project currently implements **public threading and replies** rather than private direct messages (DMs).

*   **Public Replies/Threading**:
    *   `src/features/feed/NoteCard.tsx` includes UI for a "MessageCircle" icon, which is intended for public replies to notes. The associated `onClick` handler has a `TODO: Implement reply`, indicating future development for this feature.
    *   `src/pages/NoteDetailPage.tsx` is dedicated to displaying a single Nostr note and its replies, creating a thread. The `handleReply` function in this file creates new `NDKKind.Text` events, linking them to the parent note using `e` tags with `reply` and `root` markers. This is a standard Nostr approach for public conversations.
*   **Implicit Messaging for Trades**:
    *   `src/features/trades/TakeOrderModal.tsx` includes a "Trade Safely" warning that advises users to "Communicate only through secure channels" and "Check your messages for next steps." While this implies that a communication channel is expected for P2P trades, the modal itself does not implement any direct messaging capabilities. It suggests that such communication would happen via an external or implicitly integrated messaging system.

**Conclusion**: The project does not currently include explicit implementation for NIP-04 encrypted direct messaging (private DMs). The existing "messaging" functionality is focused on public replies and threading within the feed.

### 2. Encryption utilities

The project relies primarily on the `@nostr-dev-kit/ndk` library for cryptographic operations and secure key handling, rather than implementing custom encryption utilities directly in its application logic.

*   **Authentication and Key Management**:
    *   `src/features/auth/LoginModal.tsx` and `src/features/auth/useAutoLogin.ts` handle user authentication using various signers provided by `ndk-hooks`:
        *   `NDKPrivateKeySigner`: This signer requires the application to handle the user's private key (nsec or hex). While `localStorage` is used for demonstration purposes, the codebase notes that for production, a more secure storage mechanism would be needed. The NDK library then uses this private key for signing Nostr events. The application does not apply additional encryption to event content using this key, beyond what NDK does internally for standard event formats.
        *   `NDKNip07Signer`: This signer delegates private key operations to a browser extension (e.g., Alby, nos2x). The private key remains within the secure confines of the extension and is never exposed to the application, enhancing security.
        *   `NDKNip46Signer`: This is used for remote signers (like Nostr Bunkers), where the private key is held and managed by an external service. The application communicates with this service to request event signing.
*   **NIP-60/61 (Nutzaps)**:
    *   `local-research/nip60-61-summary.md` describes Nutzaps as a token-based micropayment system where payments are "locked with the recipientâ€™s public key (P2PK)" and "cryptographically binding payments to recipients and events." This cryptographic binding is handled by the `NDKNutzap` and `NDKCashuWallet` classes from `@nostr-dev-kit/ndk-wallet`, abstracting the underlying encryption details from the application code.
*   **Absence of Custom Encryption**:
    *   There are no explicit implementations of cryptographic algorithms like AES, ECDH, or custom key derivation functions within the application's source files. The project delegates these concerns to the NDK library and the chosen signer implementations.

**Conclusion**: The project's encryption strategy is to leverage NDK's built-in cryptographic capabilities for event signing and NIP-specific operations (like NIP-60/61). For NIP-07 and NIP-46, the handling of private keys and cryptographic signing is externalized. There is no custom encryption of application data or message content implemented by the project itself, nor is there any NIP-04 specific encryption code.

### 3. Overall architecture for handling Nostr events

The project's architecture for handling Nostr events is centered around the `@nostr-dev-kit/ndk` library and its React hooks (`@nostr-dev-kit/ndk-hooks`), providing a robust and reactive client-side structure.

*   **NDK Core Setup (`src/main.tsx`)**:
    *   A single `NDKHeadless` instance serves as the central client for interacting with the Nostr network.
    *   **Relay Management**: Relay URLs are dynamically configured based on user settings stored in `src/stores/settingsStore.ts`. This allows users to add, remove, enable/disable relays, and select a single relay or all enabled relays. The `RelaySelector` component (`src/components/navigation/RelaySelector.tsx`) provides the UI for this.
    *   **Caching**: `NDKCacheAdapterDexie` is integrated to provide client-side caching of Nostr events using IndexedDB, significantly improving performance and user experience.
    *   **Session Management**: `NDKSessionLocalStorage` is used for persisting user sessions, including followed profiles and active authentication methods.
*   **Authentication and User Context (`src/features/auth/`)**:
    *   The `useNDKCurrentUser` hook provides global access to the authenticated user's NDKUser object.
    *   `LoginButton` and `LoginModal` facilitate various login methods (browser extension, remote signer, private key) and manage the `ndk.signer` instance.
    *   `useAutoLogin` provides a mechanism for automatic re-authentication upon app load based on saved preferences.
*   **Data Fetching and Real-time Updates**:
    *   The `useSubscribe` hook from `ndk-hooks` is extensively used across various features (e.g., `NoteFeed`, `useListings`, `OrderBook`, `ProfilePage`, `FollowPackDetailPage`). This hook sets up persistent subscriptions to Nostr relays based on NDK filters, ensuring real-time updates for displayed content.
    *   `ndk.fetchEvent` and `ndk.fetchEvents` are used for one-time fetches of specific events or sets of events (e.g., retrieving parent notes in a thread on `NoteDetailPage`).
*   **Event Publishing**:
    *   New Nostr events are created as instances of `NDKEvent` (e.g., in `ComposeNote` for text notes, `useCreateListing` for marketplace listings, `CreateOrderModal` for P2P trade orders).
    *   Events are populated with their `kind`, `content`, and relevant `tags` (e.g., `e` tags for replies, `p` tags for mentions, `title`, `price`, `image` tags for classifieds).
    *   The `event.sign()` method uses the active `ndk.signer` to cryptographically sign the event.
    *   `event.publish()` sends the signed event to the configured Nostr relays.
*   **State Management beyond NDK**:
    *   **Zustand**: `src/stores/walletStore.ts`, `src/stores/settingsStore.ts`, and `src/stores/followPacksStore.ts` utilize Zustand for managing application-specific global state (e.g., wallet balance, preferred mints, UI settings, subscribed follow packs). These stores are often hydrated from or persist to `localStorage`.
    *   **React `useState`/`useEffect`/`useMemo`/`useCallback`**: Standard React hooks are used for local component state, side effects, and performance optimizations.
*   **Nostr NIPs Implemented**:
    *   **NIP-01 (Basic Protocol)**: Fundamental to all event creation, signing, and publishing.
    *   **NIP-02 (Contact List and Petnames)**: Managed via `NDKUser.follow()` and `NDKUser.unfollow()` (exposed through `src/utils/followUtils.ts` and `src/components/ui/FollowButton.tsx`).
    *   **NIP-05 (Profile Metadata)**: Profile data is fetched and displayed using `useProfile` hooks.
    *   **NIP-19 (Bech32 Encoding)**: Used for encoding and decoding Nostr identifiers (`npub`, `note`, `nevent`, `nprofile`, `naddr`) for navigation and display.
    *   **NIP-60 & NIP-61 (Cashu Wallets and Nutzaps)**: Integrated via `ndk-wallet` for Cashu token management, deposits, and sending Nutzaps. The `useWallet` hook (`src/hooks/wallet/useWallet.ts`) encapsulates this functionality.
    *   **NIP-99 (Classifieds)**: Implemented for the marketplace feature (kind 30402 events) in `src/features/classifieds/`.
    *   **Kind 38383 (P2P Trades)**: Used for P2P trading orders, handled in `src/features/trades/`.
    *   **NIP-68 (Private/Public Event Metadata)**: Referenced in `src/components/media/MediaGrid.tsx` for extracting media metadata from `imeta` tags.
*   **UI Rendering**: Components like `NoteCard`, `ListingCard`, `OrderCard`, and `ContentRenderer` are responsible for parsing and rendering the raw Nostr event data into a user-friendly interface.

**In summary**, the project utilizes a modern React frontend architecture, tightly coupled with NDK for all Nostr-related interactions. It emphasizes modularity, reactive data flows through hooks, client-side caching for performance, and user-configurable settings, while delegating low-level Nostr protocol and cryptographic complexities to the NDK library.

---
### Most Relevant Files:

*   `src/main.tsx`
*   `src/App.tsx`
*   `src/features/auth/LoginModal.tsx`
*   `src/features/auth/useAutoLogin.ts`
*   `src/hooks/wallet/useWallet.ts`
*   `src/pages/NoteDetailPage.tsx`
*   `src/features/feed/NoteCard.tsx`
*   `src/features/feed/ComposeNote.tsx`
*   `src/stores/settingsStore.ts`
*   `src/components/navigation/RelaySelector.tsx`
*   `local-research/nip60-61-summary.md`
*   `src/features/trades/TakeOrderModal.tsx`
*   `src/components/content/ContentRenderer.tsx`
</file>

<file path="local-research/nip17-implementation-plan.md">
Executing plan command with query: Add support for NIP-17 Direct Messages with NIP-44 encryption and gift wraps using @nostr-dev-kit/ndk ^2.14.35. Include creating utilities for encryption/decryption, sending and receiving encrypted DMs, a UI component for viewing DM threads, and a compose UI for new DMsUsing file provider: gemini
Using file model: gemini-2.5-flash
Using thinking provider: gemini
Using thinking model: gemini-2.5-pro
Finding relevant files...
Running repomix to get file listing...
Found 138 files, approx 206516 tokens.
Fetching and extracting text from 3 document(s)...
Fetching from: https://github.com/nostr-protocol/nips/blob/master/17.md...
Successfully extracted content from: https://github.com/nostr-protocol/nips/blob/master/17.md
Fetching from: https://github.com/nostr-protocol/nips/blob/master/44.md...
Successfully extracted content from: https://github.com/nostr-protocol/nips/blob/master/44.md
Fetching from: https://github.com/nostr-protocol/nips/blob/master/59.md...
Successfully extracted content from: https://github.com/nostr-protocol/nips/blob/master/59.md
Successfully added content from 3 document(s) to the context.
Asking gemini to identify relevant files using model: gemini-2.5-flash with max tokens: 64000...
Found 23 relevant files:
local-research/nip17-current-state.md
local-research/nip17-implementation-plan.md
local-research/nip17-spec-details.md
package.json
src/main.tsx
src/App.tsx
src/config/auth.ts
src/features/auth/LoginModal.tsx
src/features/auth/useAutoLogin.ts
src/features/auth/utils/logout.ts
src/stores/settingsStore.ts
src/components/navigation/RelaySelector.tsx
src/components/navigation/NavItems.tsx
src/components/navigation/BottomNav.tsx
src/components/navigation/UserMenu.tsx
src/features/feed/ComposeNote.tsx
src/pages/ComposePage.tsx
src/features/feed/NoteCard.tsx
src/components/thread/ThreadNoteCard.tsx
src/pages/NoteDetailPage.tsx
src/lib/utils.ts
src/i18n/locales/en.json
src/i18n/locales/es.json

Extracting content from relevant files...
</file>

<file path="local-research/nip17-spec-details.md">
Querying perplexity using sonar for: Explain NIP-17 Direct Messages specification including NIP-44 encryption and gift wraps implementation details with maxTokens: 21000
NIP-17 is a Nostr Implementation Possibility (NIP) that defines a **private, encrypted direct messaging scheme** using the advanced encryption methods specified in NIP-44 and NIP-59. It establishes a protocol for sending encrypted direct messages (kind 14 events) between users on Nostr, ensuring the confidentiality and privacy of messages.

### Key aspects of NIP-17

- **Direct Message Kind**: Messages are of type `kind=14`, which designates them as chat messages. The messages contain `p` tags that identify one or more recipient public keys, enabling multi-party direct messaging.

- **Message content**: The message `.content` field remains *plain text for the receiver's client*, but this plaintext is after decryption using NIP-44 encryption. Messages **must never be signed** because signing could cause messages to leak as publicly visible events.

- **Tags**:
  - `p` tags specify receiver(s) (their public keys and relay URLs).
  - Optional `e` tags indicate parent message IDs for threading or replies.
  - Optional `subject` tags can define conversation titles.

- **Encryption**: NIP-17 relies on **NIP-44** for encryption, which specifies a *versioned, keypair-based encryption format* designed for upgrading and robust security. NIP-44 uses:
  - secp256k1 ECDH (Elliptic Curve Diffie-Hellman) for shared secret derivation
  - HKDF (key derivation)
  - ChaCha20-Poly1305 for authenticated encryption
  - HMAC-SHA256 for authentication of ciphertext
  - Base64 for encoding ciphertext

- **Gift Wraps and Seals**: NIP-17 leverages **NIP-59**, which defines a **gift wrap protocol** for encapsulating events, thus further obscuring message metadata and providing collaborative signing capabilities. This involves:
  1. **Rumor**: The core event payload (the actual message).
  2. **Seal**: Encrypted rumor with additional metadata, ensuring confidentiality.
  3. **Gift Wrap**: The public event that wraps the sealed rumor, allowing it to be distributed without leaking sensitive information.

This layered approach in NIP-59 enhances privacy by making it difficult for relays or third parties to discern message contents or metadata beyond what is necessary.

### Implementation details summary

| Aspect              | Description                                                                                   |
|---------------------|-----------------------------------------------------------------------------------------------|
| Message Kind        | 14 (chat messages, encrypted direct messages)                                                 |
| Recipient Tags       | `p` tags list intended recipients by public key and relay                                       |
| Encryption scheme    | NIP-44: secp256k1 ECDH, HKDF, ChaCha20-Poly1305, HMAC-SHA256, base64 encoding                  |
| Metadata obfuscation | NIP-59 gift wraps & seals encapsulate and encrypt entire events for privacy & collaborative signing |
| Signatures          | Direct messages **must not be signed** to prevent public leakage                                |
| Content format       | Post-decryption plaintext stored in `.content`                                                |

### Summary

NIP-17 establishes a **secure private messaging protocol on Nostr** by combining:

- **NIP-44's modern, versioned encryption** for encrypting message content,
- **NIP-59's gift wrap protocol** to wrap and encrypt full messages or events to obscure metadata,
- a designated event kind (`14`) and tagging scheme for sender/receiver identification,

thus enabling **private, metadata-protected, encrypted direct messages** in the decentralized Nostr ecosystem[1][2][3][4].
</file>

<file path="src/components/navigation/NavItems.tsx">
import { Home, Edit3, Bell, User, Wallet, TrendingUp, ShoppingBag, Package } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { cn } from '@/lib/utils';
import { useWallet } from '@/hooks/useWallet';
const NAV_ITEMS_CONFIG = [
  { path: '/', icon: Home, labelKey: 'feed' },
  { path: '/compose', icon: Edit3, labelKey: 'compose' },
  { path: '/notifications', icon: Bell, labelKey: 'notifications' },
  { path: '/profile', icon: User, labelKey: 'profile' },
  { path: '/packs', icon: Package, labelKey: 'followPacks' },
  { path: '/marketplace', icon: ShoppingBag, labelKey: 'marketplace' },
  { path: '/wallet', icon: Wallet, labelKey: 'wallet' },
  { path: '/trades', icon: TrendingUp, labelKey: 'trades' },
] as const;
export function NavItems() {
  const { t } = useTranslation();
  const location = useLocation();
  const { balance } = useWallet();
  return (
    <nav className="flex-1 px-3 py-6">
      <div className="space-y-1">
        {NAV_ITEMS_CONFIG.map(({ path, icon: Icon, labelKey }) => {
          const isActive = location.pathname === path ||
                         (path === '/packs' && location.pathname.startsWith('/packs/'));
          const isWallet = path === '/wallet';
          return (
            <Link
              key={path}
              to={path}
              className={cn(
                'flex items-center gap-3 px-3 py-2.5 rounded-lg transition-all font-medium text-sm',
                isActive
                  ? 'bg-neutral-900 text-white'
                  : 'text-neutral-400 hover:bg-neutral-900/50 hover:text-neutral-200'
              )}
            >
              <Icon className="w-5 h-5" strokeWidth={isActive ? 2 : 1.5} />
              <span>{t(`navigation.${labelKey}`)}</span>
              {isWallet && (
                <span className="ml-auto text-xs font-normal text-orange-500">
                  {balance.toLocaleString()} sats
                </span>
              )}
            </Link>
          );
        })}
      </div>
    </nav>
  );
}
</file>

<file path="src/components/navigation/UserMenu.tsx">
import { Settings, LogOut } from 'lucide-react';
import { Link } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { useNDKCurrentUser, useNDKSessionLogout } from '@nostr-dev-kit/ndk-hooks';
import { useProfile } from '@nostr-dev-kit/ndk-hooks';
import { UserAvatar } from '@/components/ui/UserAvatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { clearAuthStorage } from '@/features/auth/utils/logout';
export function UserMenu() {
  const { t } = useTranslation();
  const currentUser = useNDKCurrentUser();
  const profile = useProfile(currentUser?.pubkey);
  const logout = useNDKSessionLogout();
  const handleLogout = () => {
    logout();
    clearAuthStorage();
  };
  if (!currentUser) {
    return null;
  }
  return (
    <DropdownMenu>
      <DropdownMenuTrigger className="w-full">
        <div className="flex items-center gap-3 px-2 py-2 rounded-lg hover:bg-neutral-900/50 transition-colors cursor-pointer">
          <UserAvatar pubkey={currentUser.pubkey} size="md" />
          <div className="flex-1 min-w-0 text-left">
            <p className="font-medium text-sm truncate text-white">
              {profile?.name || 'Anonymous'}
            </p>
            <p className="text-xs text-neutral-500 truncate">
              {profile?.nip05 || currentUser.npub?.slice(0, 16) + '...'}
            </p>
          </div>
        </div>
      </DropdownMenuTrigger>
      {/* 
        Positioned above (side="top") to avoid dropdown being cut off at bottom of screen.
        Aligned to start (left edge) to match the trigger element's position.
      */}
      <DropdownMenuContent 
        className="w-56 mb-2 ml-4"
        align="start"
        side="top"
      >
        <DropdownMenuItem asChild>
          <Link
            to="/settings"
            className="flex items-center gap-3 cursor-pointer"
          >
            <Settings className="w-4 h-4" />
            <span>{t('navigation.settings')}</span>
          </Link>
        </DropdownMenuItem>
        <DropdownMenuSeparator />
        <DropdownMenuItem
          onClick={handleLogout}
          className="flex items-center gap-3 cursor-pointer text-red-500 focus:text-red-600 dark:text-red-400 dark:focus:text-red-300"
        >
          <LogOut className="w-4 h-4" />
          <span>{t('navigation.logout')}</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
</file>

<file path="src/config/auth.ts">
export const AUTH_STORAGE_KEYS = {
  PRIVATE_KEY: 'nostr_private_key',
  BUNKER_URL: 'nostr_bunker_url',
  EXTENSION_AUTO_LOGIN: 'nostr_extension_auto_login',
} as const;
</file>

<file path="src/features/auth/utils/logout.ts">
import { AUTH_STORAGE_KEYS } from '@/config/auth';
export function clearAuthStorage(): void {
  Object.values(AUTH_STORAGE_KEYS).forEach(key => {
    localStorage.removeItem(key);
  });
}
</file>

<file path="src/features/auth/useAutoLogin.ts">
import { useEffect, useState } from 'react';
import {
  useNDKCurrentUser,
  useNDKSessionLogin,
  NDKNip07Signer,
  NDKNip46Signer,
  NDKPrivateKeySigner
} from '@nostr-dev-kit/ndk-hooks';
export function useAutoLogin() {
  const currentUser = useNDKCurrentUser();
  const login = useNDKSessionLogin();
  const [isAttempting, setIsAttempting] = useState(false);
  const [attempted, setAttempted] = useState(false);
  useEffect(() => {
    if (currentUser || attempted || isAttempting) return;
    const attemptAutoLogin = async () => {
      setIsAttempting(true);
      try {
        // Check for saved bunker URL first (NIP-46)
        const bunkerUrl = localStorage.getItem('nostr_bunker_url');
        if (bunkerUrl) {
          try {
            const signer = new NDKNip46Signer(bunkerUrl);
            await signer.blockUntilReady();
            await login(signer, true);
            return;
          } catch (error) {
            console.error('Bunker auto-login failed:', error);
            localStorage.removeItem('nostr_bunker_url');
          }
        }
        // Check for saved private key
        const privateKey = localStorage.getItem('nostr_private_key');
        if (privateKey) {
          try {
            const signer = new NDKPrivateKeySigner(privateKey);
            await login(signer, true);
            return;
          } catch (error) {
            console.error('Private key auto-login failed:', error);
            localStorage.removeItem('nostr_private_key');
          }
        }
        // Check for browser extension (NIP-07)
        if (window.nostr) {
          try {
            const hasAutoLoginConsent = localStorage.getItem('nostr_extension_auto_login');
            if (hasAutoLoginConsent === 'true') {
              const signer = new NDKNip07Signer();
              await login(signer, false); // Don't persist for extension
              return;
            }
          } catch (error) {
            console.error('Extension auto-login failed:', error);
            localStorage.removeItem('nostr_extension_auto_login');
          }
        }
      } finally {
        setIsAttempting(false);
        setAttempted(true);
      }
    };
    attemptAutoLogin();
  }, [currentUser, login, attempted, isAttempting]);
  return { isAttempting };
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/stores/settingsStore.ts">
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
export interface Relay {
  url: string;
  read: boolean;
  write: boolean;
  enabled: boolean;
}
interface AppSettings {
  // Relay settings
  relays: Relay[];
  selectedRelay: string | null; // null means use all enabled relays
  // Theme settings (for future)
  theme: 'light' | 'dark' | 'system';
  // Language settings
  language: 'en' | 'es';
  // Notification settings (for future)
  notifications: {
    enabled: boolean;
    mentions: boolean;
    replies: boolean;
    zaps: boolean;
  };
  // Privacy settings (for future)
  privacy: {
    hideReadReceipts: boolean;
    hideTypingIndicator: boolean;
  };
}
interface SettingsStore extends AppSettings {
  // Relay actions
  addRelay: (relay: Relay) => void;
  removeRelay: (url: string) => void;
  updateRelay: (url: string, updates: Partial<Relay>) => void;
  toggleRelay: (url: string) => void;
  setRelays: (relays: Relay[]) => void;
  setSelectedRelay: (url: string | null) => void;
  // Theme actions
  setTheme: (theme: 'light' | 'dark' | 'system') => void;
  // Language actions
  setLanguage: (language: 'en' | 'es') => void;
  // Notification actions
  updateNotifications: (settings: Partial<AppSettings['notifications']>) => void;
  // Privacy actions
  updatePrivacy: (settings: Partial<AppSettings['privacy']>) => void;
  // General actions
  resetToDefaults: () => void;
}
const defaultRelays: Relay[] = [
  { url: 'wss://relay.damus.io', read: true, write: true, enabled: true },
  { url: 'wss://relay.nostr.band', read: true, write: false, enabled: true },
  { url: 'wss://nos.lol', read: true, write: true, enabled: true },
  { url: 'wss://relay.snort.social', read: true, write: true, enabled: true },
  { url: 'wss://relay.primal.net', read: true, write: true, enabled: true },
];
const defaultSettings: AppSettings = {
  relays: defaultRelays,
  selectedRelay: null,
  theme: 'system',
  language: 'en',
  notifications: {
    enabled: true,
    mentions: true,
    replies: true,
    zaps: true,
  },
  privacy: {
    hideReadReceipts: false,
    hideTypingIndicator: false,
  },
};
export const useSettingsStore = create<SettingsStore>()(
  persist(
    (set) => ({
      ...defaultSettings,
      // Relay actions
      addRelay: (relay) =>
        set((state) => ({
          relays: [...state.relays, relay],
        })),
      removeRelay: (url) =>
        set((state) => ({
          relays: state.relays.filter((r) => r.url !== url),
        })),
      updateRelay: (url, updates) =>
        set((state) => ({
          relays: state.relays.map((r) =>
            r.url === url ? { ...r, ...updates } : r
          ),
        })),
      toggleRelay: (url) =>
        set((state) => ({
          relays: state.relays.map((r) =>
            r.url === url ? { ...r, enabled: !r.enabled } : r
          ),
        })),
      setRelays: (relays) => set({ relays }),
      setSelectedRelay: (url) => set({ selectedRelay: url }),
      // Theme actions
      setTheme: (theme) => set({ theme }),
      // Language actions
      setLanguage: (language) => set({ language }),
      // Notification actions
      updateNotifications: (settings) =>
        set((state) => ({
          notifications: { ...state.notifications, ...settings },
        })),
      // Privacy actions
      updatePrivacy: (settings) =>
        set((state) => ({
          privacy: { ...state.privacy, ...settings },
        })),
      // General actions
      resetToDefaults: () => set(defaultSettings),
    }),
    {
      name: 'voces-settings',
      version: 1,
    }
  )
);
</file>

<file path="src/components/navigation/RelaySelector.tsx">
import { ChevronDown, Globe, Circle, Check } from "lucide-react";
import { useState, useRef, useEffect } from "react";
import { useSettingsStore } from "@/stores/settingsStore";
import { useNavigate } from "react-router-dom";
export function RelaySelector() {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const navigate = useNavigate();
  const { relays, selectedRelay, setSelectedRelay } = useSettingsStore();
  const enabledRelays = relays.filter(r => r.enabled);
  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);
  const handleRelaySelect = (relayUrl: string | null) => {
    setSelectedRelay(relayUrl);
    setIsOpen(false);
  };
  const getRelayDisplayName = (url: string) => {
    try {
      const urlObj = new URL(url);
      return urlObj.hostname.replace("wss://", "").replace("ws://", "");
    } catch {
      return url.replace("wss://", "").replace("ws://", "");
    }
  };
  const currentRelayDisplay = selectedRelay
    ? getRelayDisplayName(selectedRelay)
    : `All Relays (${enabledRelays.length})`;
  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-1.5 px-2 py-1 text-sm text-gray-600 dark:text-gray-400
                   hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
      >
        <Globe className="h-4 w-4" />
        <span className="max-w-[140px] truncate font-normal">{currentRelayDisplay}</span>
        <ChevronDown className={`h-3 w-3 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
      </button>
      {isOpen && (
        <div className="absolute top-full mt-2 right-0 w-64 bg-white dark:bg-black rounded-lg shadow-lg
                        border border-gray-200 dark:border-gray-700 overflow-hidden z-50">
          <div className="py-1">
            {/* All Relays option */}
            <button
              onClick={() => handleRelaySelect(null)}
              className="w-full flex items-center justify-between px-4 py-2 text-sm text-gray-700 dark:text-gray-200
                         hover:bg-gray-100 dark:hover:bg-neutral-900 transition-colors"
            >
              <div className="flex items-center gap-2">
                <Globe className="h-4 w-4 text-blue-500" />
                <span>All Relays ({enabledRelays.length})</span>
              </div>
              {!selectedRelay && <Check className="h-4 w-4 text-green-500" />}
            </button>
            {/* Divider */}
            <div className="h-px bg-gray-200 dark:bg-black my-1" />
            {/* Individual relays */}
            {enabledRelays.length > 0 ? (
              enabledRelays.map((relay) => (
                <button
                  key={relay.url}
                  onClick={() => handleRelaySelect(relay.url)}
                  className="w-full flex items-center justify-between px-4 py-2 text-sm text-gray-700 dark:text-gray-200
                             hover:bg-gray-100 dark:hover:bg-neutral-900 transition-colors"
                >
                  <div className="flex items-center gap-2">
                    <Circle
                      className={`h-2 w-2 ${relay.write && relay.read ? 'fill-green-500 text-green-500' :
                                             relay.read ? 'fill-blue-500 text-blue-500' :
                                             'fill-orange-500 text-orange-500'}`}
                    />
                    <span className="truncate">{getRelayDisplayName(relay.url)}</span>
                  </div>
                  {selectedRelay === relay.url && <Check className="h-4 w-4 text-green-500" />}
                </button>
              ))
            ) : (
              <div className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">
                No relays enabled
              </div>
            )}
            {/* Divider */}
            <div className="h-px bg-gray-200 dark:bg-black my-1" />
            {/* Settings link */}
            <button
              onClick={() => {
                setIsOpen(false);
                navigate('/settings');
              }}
              className="w-full flex items-center px-4 py-2 text-sm text-blue-600 dark:text-blue-400
                         hover:bg-gray-100 dark:hover:bg-neutral-900 transition-colors"
            >
              Manage Relays â†’
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/features/auth/LoginModal.tsx">
import { useState } from 'react';
import {
  useNDKSessionLogin,
  NDKNip07Signer,
  NDKNip46Signer,
  NDKPrivateKeySigner
} from '@nostr-dev-kit/ndk-hooks';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Chrome, Shield, Key, Sparkles, Loader2, Info } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
interface LoginModalProps {
  isOpen: boolean;
  onClose: () => void;
}
export function LoginModal({ isOpen, onClose }: LoginModalProps) {
  const login = useNDKSessionLogin();
  const [activeMethod, setActiveMethod] = useState<string | null>(null);
  const [nsec, setNsec] = useState('');
  const [bunkerUrl, setBunkerUrl] = useState('');
  const [isConnecting, setIsConnecting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const resetState = () => {
    setActiveMethod(null);
    setNsec('');
    setBunkerUrl('');
    setError(null);
  };
  const handleClose = () => {
    resetState();
    onClose();
  };
  const handleExtensionLogin = async () => {
    setIsConnecting(true);
    setError(null);
    try {
      if (!window.nostr) {
        throw new Error('No Nostr extension found. Please install Alby, nos2x, or another NIP-07 compatible extension.');
      }
      const signer = new NDKNip07Signer();
      await login(signer, true);
      localStorage.setItem('nostr_extension_auto_login', 'true');
      handleClose();
    } catch (error) {
      console.error('Extension login failed:', error);
      setError(error instanceof Error ? error.message : 'Extension login failed');
    } finally {
      setIsConnecting(false);
    }
  };
  const handleBunkerLogin = async () => {
    if (!bunkerUrl) return;
    setIsConnecting(true);
    setError(null);
    try {
      const signer = new NDKNip46Signer(bunkerUrl);
      await signer.blockUntilReady();
      await login(signer, true);
      localStorage.setItem('nostr_bunker_url', bunkerUrl);
      handleClose();
    } catch (error) {
      console.error('Bunker login failed:', error);
      setError(error instanceof Error ? error.message : 'Bunker connection failed. Please check your bunker URL.');
    } finally {
      setIsConnecting(false);
    }
  };
  const handlePrivateKeyLogin = async () => {
    if (!nsec) return;
    setIsConnecting(true);
    setError(null);
    try {
      const signer = new NDKPrivateKeySigner(nsec);
      await login(signer, true);
      localStorage.setItem('nostr_private_key', nsec);
      handleClose();
    } catch (error) {
      console.error('Private key login failed:', error);
      setError('Invalid private key. Please check your nsec or hex key.');
    } finally {
      setIsConnecting(false);
    }
  };
  const handleGenerateIdentity = async () => {
    setIsConnecting(true);
    setError(null);
    try {
      const signer = NDKPrivateKeySigner.generate();
      await login(signer, true);
      const privateKey = signer.privateKey!;
      localStorage.setItem('nostr_private_key', privateKey);
      const user = await signer.user();
      // Show the keys in a more user-friendly way
      const message = `Identity created successfully!\n\nPublic Key (npub):\n${user.npub}\n\nPrivate Key (nsec):\n${privateKey}\n\nIMPORTANT: Save your private key (nsec) in a secure location. You will need it to login again.`;
      alert(message);
      handleClose();
    } catch (error) {
      console.error('Failed to generate identity:', error);
      setError('Failed to generate new identity. Please try again.');
    } finally {
      setIsConnecting(false);
    }
  };
  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Login to Nostr</DialogTitle>
          <DialogDescription>
            Choose how you'd like to connect to the Nostr network
          </DialogDescription>
        </DialogHeader>
        <div className="space-y-3 pt-4">
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          {!activeMethod && (
            <>
              <Button
                onClick={() => {
                  setActiveMethod('extension');
                  handleExtensionLogin();
                }}
                disabled={isConnecting}
                className="w-full justify-start bg-neutral-800 hover:bg-neutral-700 text-white border-neutral-600"
                variant="outline"
              >
                <Chrome className="w-4 h-4 mr-2" />
                Browser Extension (NIP-07)
                {isConnecting && activeMethod === 'extension' && (
                  <Loader2 className="w-4 h-4 ml-auto animate-spin" />
                )}
              </Button>
              <Button
                onClick={() => setActiveMethod('bunker')}
                disabled={isConnecting}
                className="w-full justify-start bg-neutral-800 hover:bg-neutral-700 text-white border-neutral-600"
                variant="outline"
              >
                <Shield className="w-4 h-4 mr-2" />
                Remote Signer / Bunker (NIP-46)
              </Button>
              <Button
                onClick={() => setActiveMethod('private-key')}
                disabled={isConnecting}
                className="w-full justify-start bg-neutral-800 hover:bg-neutral-700 text-white border-neutral-600"
                variant="outline"
              >
                <Key className="w-4 h-4 mr-2" />
                Private Key
              </Button>
              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <span className="w-full border-t border-neutral-700" />
                </div>
                <div className="relative flex justify-center text-xs uppercase">
                  <span className="bg-neutral-900 px-2 text-neutral-400">Or</span>
                </div>
              </div>
              <Button
                onClick={() => {
                  setActiveMethod('generate');
                  handleGenerateIdentity();
                }}
                disabled={isConnecting}
                className="w-full justify-start bg-purple-900/50 hover:bg-purple-800/50 text-white border-purple-700/50"
                variant="secondary"
              >
                <Sparkles className="w-4 h-4 mr-2" />
                Generate New Identity
                {isConnecting && activeMethod === 'generate' && (
                  <Loader2 className="w-4 h-4 ml-auto animate-spin" />
                )}
              </Button>
            </>
          )}
          {activeMethod === 'bunker' && (
            <div className="space-y-3">
              <Alert>
                <Info className="w-4 h-4" />
                <AlertDescription>
                  Enter your bunker URL to connect using a remote signer.
                  Example: bunker://pubkey?relay=wss://relay.url
                </AlertDescription>
              </Alert>
              <Input
                type="text"
                placeholder="bunker://..."
                value={bunkerUrl}
                onChange={(e) => setBunkerUrl(e.target.value)}
                disabled={isConnecting}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && bunkerUrl) {
                    handleBunkerLogin();
                  }
                }}
              />
              <div className="flex gap-2">
                <Button
                  onClick={handleBunkerLogin}
                  disabled={!bunkerUrl || isConnecting}
                  className="flex-1"
                >
                  {isConnecting ? (
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <Shield className="w-4 h-4 mr-2" />
                  )}
                  Connect
                </Button>
                <Button
                  onClick={() => setActiveMethod(null)}
                  variant="outline"
                  disabled={isConnecting}
                >
                  Back
                </Button>
              </div>
            </div>
          )}
          {activeMethod === 'private-key' && (
            <div className="space-y-3">
              <Alert>
                <Info className="w-4 h-4" />
                <AlertDescription>
                  Enter your private key (nsec or hex format). This will be stored locally in your browser.
                </AlertDescription>
              </Alert>
              <Input
                type="password"
                placeholder="nsec1... or hex key"
                value={nsec}
                onChange={(e) => setNsec(e.target.value)}
                disabled={isConnecting}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && nsec) {
                    handlePrivateKeyLogin();
                  }
                }}
              />
              <div className="flex gap-2">
                <Button
                  onClick={handlePrivateKeyLogin}
                  disabled={!nsec || isConnecting}
                  className="flex-1"
                >
                  {isConnecting ? (
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <Key className="w-4 h-4 mr-2" />
                  )}
                  Login
                </Button>
                <Button
                  onClick={() => setActiveMethod(null)}
                  variant="outline"
                  disabled={isConnecting}
                >
                  Back
                </Button>
              </div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="src/main.tsx">
import React from 'react';
import { createRoot } from 'react-dom/client';
import { NDKHeadless, NDKSessionLocalStorage } from '@nostr-dev-kit/ndk-hooks';
import NDKCacheAdapterDexie from '@nostr-dev-kit/ndk-cache-dexie';
import { useSettingsStore } from './stores/settingsStore';
import './i18n/config';
import './app.css';
import App from './App.tsx';
const root = createRoot(document.getElementById('root')!);
function AppWithNDK() {
  // Get relay configuration from settings store
  const relays = useSettingsStore((state) => state.relays);
  const selectedRelay = useSettingsStore((state) => state.selectedRelay);
  // If a specific relay is selected, use only that one
  // Otherwise use all enabled relays
  let relayUrls: string[];
  if (selectedRelay) {
    // Single relay mode
    relayUrls = [selectedRelay];
  } else {
    // All enabled relays mode
    const enabledRelayUrls = relays
      .filter((relay) => relay.enabled)
      .map((relay) => relay.url);
    // Fallback to default relays if none are enabled
    relayUrls = enabledRelayUrls.length > 0
      ? enabledRelayUrls
      : ['wss://relay.damus.io', 'wss://nos.lol'];
  }
  return (
    <>
      <NDKHeadless
        ndk={{
          explicitRelayUrls: relayUrls,
          cacheAdapter: new NDKCacheAdapterDexie({ dbName: 'voces-ndk-cache' }),
        }}
        session={{
          storage: new NDKSessionLocalStorage(),
          opts: {
            follows: true,
            profile: true
          }
        }}
      />
      <App />
    </>
  );
}
root.render(
  <React.StrictMode>
    <AppWithNDK />
  </React.StrictMode>
);
</file>

<file path="src/components/navigation/BottomNav.tsx">
import { Home, Store, Wallet, TrendingUp, User } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';
import { cn } from '@/lib/utils';
import { useTranslation } from 'react-i18next';
import { useNDKCurrentUser, useProfile } from '@nostr-dev-kit/ndk-hooks';
const navItemsConfig = [
  { path: '/', icon: Home, key: 'feed' },
  { path: '/marketplace', icon: Store, key: 'marketplace' },
  { path: '/wallet', icon: Wallet, key: 'wallet' },
  { path: '/trades', icon: TrendingUp, key: 'trades' },
  { path: '/profile', icon: User, key: 'profile' },
];
export function BottomNav() {
  const { t } = useTranslation();
  const location = useLocation();
  const currentUser = useNDKCurrentUser();
  const profile = useProfile(currentUser?.pubkey);
  const navItems = navItemsConfig.map(item => ({
    ...item,
    label: t(`navigation.${item.key}`)
  }));
  return (
    <nav className="fixed bottom-0 left-0 right-0 md:hidden z-40">
      {/* Clean bottom nav */}
      <div className="bg-white dark:bg-black border-t border-gray-200 dark:border-gray-800">
        <div className="flex items-center justify-around h-16 px-3">
          {navItems.map(({ path, icon: Icon, label, key }) => {
            const isActive = location.pathname === path;
            const isProfileTab = key === 'profile';
            const showAvatar = isProfileTab && currentUser && profile?.picture;
            return (
              <Link
                key={path}
                to={path}
                className="relative flex items-center justify-center w-full h-full group"
              >
                <div className="relative">
                  {showAvatar ? (
                    <div className={cn(
                      "w-7 h-7 rounded-full overflow-hidden ring-2 transition-all duration-200",
                      isActive
                        ? 'ring-gray-900 dark:ring-white'
                        : 'ring-gray-400 dark:ring-gray-500'
                    )}>
                      <img
                        src={profile.picture}
                        alt={profile?.name || 'Profile'}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  ) : (
                    <Icon
                      className={cn(
                        'w-6 h-6 transition-colors duration-200',
                        isActive
                          ? 'text-gray-900 dark:text-white'
                          : 'text-gray-400 dark:text-gray-500'
                      )}
                      strokeWidth={isActive ? 2 : 1.5}
                    />
                  )}
                </div>
              </Link>
            );
          })}
        </div>
      </div>
    </nav>
  );
}
</file>

<file path="src/components/thread/ThreadNoteCard.tsx">
import { NDKEvent } from '@nostr-dev-kit/ndk-hooks';
import { NoteCard } from '@/features/feed/NoteCard';
import { cn } from '@/lib/utils';
interface ThreadNoteCardProps {
  event: NDKEvent;
  isMainNote?: boolean;
  showConnector?: boolean;
  isLastInThread?: boolean;
}
export function ThreadNoteCard({
  event,
  isMainNote = false,
  showConnector = false,
  isLastInThread = false
}: ThreadNoteCardProps) {
  return (
    <div className="relative">
      {/* Thread connector line before the note */}
      {showConnector && !isMainNote && (
        <div className="absolute left-[29px] -top-px h-[73px] w-0.5 bg-gray-300 dark:bg-black" />
      )}
      {/* The note itself with larger text for main note */}
      <div className="relative">
        <NoteCard event={event} isLargeText={isMainNote} />
      </div>
      {/* Thread connector line after the note */}
      {!isLastInThread && !isMainNote && (
        <div className="absolute left-[29px] top-[73px] bottom-0 w-0.5 bg-gray-300 dark:bg-black" />
      )}
    </div>
  );
}
</file>

<file path="src/i18n/locales/en.json">
{
  "navigation": {
    "feed": "Home",
    "compose": "Compose",
    "notifications": "Notifications",
    "classifieds": "Classifieds",
    "marketplace": "Marketplace",
    "trades": "P2P Trades",
    "followPacks": "Follow Packs",
    "profile": "Profile",
    "wallet": "Wallet",
    "settings": "Settings",
    "logout": "Logout"
  },
  "auth": {
    "login": "Login with Nostr",
    "logout": "Logout",
    "loginSuccess": "Successfully logged in",
    "loginError": "Failed to login",
    "connecting": "Connecting..."
  },
  "feed": {
    "title": "Feed",
    "compose": {
      "placeholder": "What's on your mind?",
      "publish": "Publish",
      "publishing": "Publishing...",
      "publishSuccess": "Note published!",
      "publishError": "Failed to publish note"
    },
    "loading": "Loading notes...",
    "empty": "No notes to display",
    "error": "Error loading feed"
  },
  "classifieds": {
    "title": "Classifieds",
    "description": "Buy, sell, and trade with the Nostr community",
    "noListings": "No listings yet. Be the first to create one!",
    "createListing": "Create Listing",
    "filters": {
      "all": "All",
      "selling": "Selling",
      "buying": "Buying",
      "services": "Services"
    }
  },
  "trades": {
    "title": "Trades",
    "description": "Secure P2P trading with escrow protection",
    "noTrades": "No trades yet. Browse classifieds to start trading!",
    "browseClassifieds": "Browse Classifieds",
    "statuses": {
      "pending": "Pending",
      "active": "Active",
      "completed": "Completed",
      "disputed": "Disputed"
    }
  },
  "followPacks": {
    "title": "Follow Packs",
    "description": "Discover curated lists of people to follow",
    "noPacks": "No follow packs available yet",
    "followers": "followers"
  },
  "settings": {
    "title": "Settings",
    "description": "Manage your app preferences and configuration",
    "sections": {
      "relays": {
        "title": "Relays",
        "description": "Configure Nostr relay connections",
        "addRelay": "Add Relay",
        "relayUrl": "Relay URL",
        "urlPlaceholder": "wss://relay.example.com",
        "permissions": "Permissions",
        "read": "Read",
        "write": "Write",
        "enabled": "Enabled",
        "remove": "Remove",
        "confirmRemove": "Are you sure you want to remove this relay?",
        "invalidUrl": "Invalid relay URL",
        "relayExists": "This relay already exists",
        "connected": "Connected",
        "disconnected": "Disconnected",
        "connecting": "Connecting..."
      },
      "appearance": {
        "title": "Appearance",
        "description": "Customize app theme and display",
        "language": "Language",
        "languageDescription": "Choose your preferred language",
        "theme": "Theme",
        "themeDescription": "Choose your preferred theme",
        "themes": {
          "light": "Light",
          "dark": "Dark",
          "system": "System"
        }
      },
      "notifications": {
        "title": "Notifications",
        "description": "Control notification preferences"
      },
      "privacy": {
        "title": "Privacy",
        "description": "Manage privacy and security settings"
      },
      "profile": {
        "title": "Profile",
        "description": "Edit your profile information"
      },
      "blossom": {
        "title": "Media Servers",
        "description": "Configure Blossom media upload servers"
      },
      "followpacks": {
        "title": "Follow Packs",
        "description": "Discover and manage follow packs"
      }
    },
    "comingSoon": "Coming soon..."
  },
  "wallet": {
    "title": "Wallet",
    "balance": "Balance",
    "send": "Send",
    "receive": "Receive",
    "transactions": "Transactions",
    "noTransactions": "No transactions yet",
    "satsAvailable": "sats available"
  },
  "profile": {
    "following": "Following",
    "followers": "Followers",
    "posts": "Posts",
    "editProfile": "Edit Profile",
    "follow": "Follow",
    "unfollow": "Unfollow"
  },
  "common": {
    "loading": "Loading...",
    "error": "An error occurred",
    "retry": "Retry",
    "cancel": "Cancel",
    "save": "Save",
    "delete": "Delete",
    "edit": "Edit",
    "close": "Close",
    "confirm": "Confirm",
    "search": "Search",
    "more": "More",
    "less": "Less",
    "copy": "Copy",
    "copied": "Copied!",
    "share": "Share",
    "soon": "Soon"
  }
}
</file>

<file path="src/i18n/locales/es.json">
{
  "navigation": {
    "feed": "Inicio",
    "compose": "Redactar",
    "notifications": "Notificaciones",
    "classifieds": "Clasificados",
    "marketplace": "Mercado",
    "trades": "Intercambios P2P",
    "followPacks": "Paquetes de Seguimiento",
    "profile": "Perfil",
    "wallet": "Billetera",
    "settings": "ConfiguraciÃ³n",
    "logout": "Cerrar sesiÃ³n"
  },
  "auth": {
    "login": "Iniciar sesiÃ³n con Nostr",
    "logout": "Cerrar sesiÃ³n",
    "loginSuccess": "SesiÃ³n iniciada correctamente",
    "loginError": "Error al iniciar sesiÃ³n",
    "connecting": "Conectando..."
  },
  "feed": {
    "title": "Inicio",
    "compose": {
      "placeholder": "Â¿QuÃ© estÃ¡s pensando?",
      "publish": "Publicar",
      "publishing": "Publicando...",
      "publishSuccess": "Â¡Nota publicada!",
      "publishError": "Error al publicar la nota"
    },
    "loading": "Cargando notas...",
    "empty": "No hay notas para mostrar",
    "error": "Error al cargar el feed"
  },
  "classifieds": {
    "title": "Clasificados",
    "description": "Compra, vende e intercambia con la comunidad Nostr",
    "noListings": "No hay anuncios todavÃ­a. Â¡SÃ© el primero en crear uno!",
    "createListing": "Crear Anuncio",
    "filters": {
      "all": "Todos",
      "selling": "Venta",
      "buying": "Compra",
      "services": "Servicios"
    }
  },
  "trades": {
    "title": "Intercambios",
    "description": "Intercambios P2P seguros con protecciÃ³n de depÃ³sito",
    "noTrades": "No hay intercambios todavÃ­a. Â¡Explora los clasificados para empezar!",
    "browseClassifieds": "Explorar Clasificados",
    "statuses": {
      "pending": "Pendiente",
      "active": "Activo",
      "completed": "Completado",
      "disputed": "En disputa"
    }
  },
  "followPacks": {
    "title": "Paquetes de Seguimiento",
    "description": "Descubre listas curadas de personas para seguir",
    "noPacks": "No hay paquetes de seguimiento disponibles aÃºn",
    "followers": "seguidores"
  },
  "settings": {
    "title": "ConfiguraciÃ³n",
    "description": "Gestiona las preferencias y configuraciÃ³n de la aplicaciÃ³n",
    "sections": {
      "relays": {
        "title": "RelÃ©s",
        "description": "Configurar conexiones de relÃ© Nostr",
        "addRelay": "Agregar RelÃ©",
        "relayUrl": "URL del RelÃ©",
        "urlPlaceholder": "wss://relay.ejemplo.com",
        "permissions": "Permisos",
        "read": "Lectura",
        "write": "Escritura",
        "enabled": "Habilitado",
        "remove": "Eliminar",
        "confirmRemove": "Â¿EstÃ¡s seguro de que quieres eliminar este relÃ©?",
        "invalidUrl": "URL de relÃ© invÃ¡lida",
        "relayExists": "Este relÃ© ya existe",
        "connected": "Conectado",
        "disconnected": "Desconectado",
        "connecting": "Conectando..."
      },
      "appearance": {
        "title": "Apariencia",
        "description": "Personaliza el tema y la visualizaciÃ³n de la aplicaciÃ³n",
        "language": "Idioma",
        "languageDescription": "Elige tu idioma preferido",
        "theme": "Tema",
        "themeDescription": "Elige tu tema preferido",
        "themes": {
          "light": "Claro",
          "dark": "Oscuro",
          "system": "Sistema"
        }
      },
      "notifications": {
        "title": "Notificaciones",
        "description": "Controla las preferencias de notificaciÃ³n"
      },
      "privacy": {
        "title": "Privacidad",
        "description": "Gestiona la configuraciÃ³n de privacidad y seguridad"
      },
      "profile": {
        "title": "Perfil",
        "description": "Edita tu informaciÃ³n de perfil"
      },
      "blossom": {
        "title": "Servidores de Medios",
        "description": "Configura los servidores de carga de medios Blossom"
      },
      "followpacks": {
        "title": "Paquetes de Seguimiento",
        "description": "Descubre y gestiona paquetes de seguimiento"
      }
    },
    "comingSoon": "PrÃ³ximamente..."
  },
  "wallet": {
    "title": "Billetera",
    "balance": "Saldo",
    "send": "Enviar",
    "receive": "Recibir",
    "transactions": "Transacciones",
    "noTransactions": "No hay transacciones todavÃ­a",
    "satsAvailable": "sats disponibles"
  },
  "profile": {
    "following": "Siguiendo",
    "followers": "Seguidores",
    "posts": "Publicaciones",
    "editProfile": "Editar Perfil",
    "follow": "Seguir",
    "unfollow": "Dejar de seguir"
  },
  "common": {
    "loading": "Cargando...",
    "error": "OcurriÃ³ un error",
    "retry": "Reintentar",
    "cancel": "Cancelar",
    "save": "Guardar",
    "delete": "Eliminar",
    "edit": "Editar",
    "close": "Cerrar",
    "confirm": "Confirmar",
    "search": "Buscar",
    "more": "MÃ¡s",
    "less": "Menos",
    "copy": "Copiar",
    "copied": "Â¡Copiado!",
    "share": "Compartir",
    "soon": "Pronto"
  }
}
</file>

<file path="src/pages/ComposePage.tsx">
import { ComposeNote } from '@/features/feed/ComposeNote';
import { useNavigate } from 'react-router-dom';
import { ArrowLeft } from 'lucide-react';
export function ComposePage() {
  const navigate = useNavigate();
  return (
    <div className="max-w-2xl mx-auto">
      {/* Page header */}
      <div className="sticky top-0 z-30 bg-white/80 dark:bg-black/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800">
        <div className="flex items-center gap-4 px-4 py-3 sm:px-6">
          <button
            onClick={() => navigate(-1)}
            className="p-2 -ml-2 rounded-full hover:bg-gray-100 dark:hover:bg-neutral-900 transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h2 className="text-lg font-semibold text-gray-900 dark:text-gray-100">Compose</h2>
        </div>
      </div>
      {/* Compose section */}
      <div className="p-4 sm:p-6">
        <ComposeNote />
      </div>
    </div>
  );
}
</file>

<file path="src/pages/NoteDetailPage.tsx">
import { useParams, useNavigate } from 'react-router-dom';
import { useEvent, useProfile, useNDK, useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent, NDKKind } from '@nostr-dev-kit/ndk-hooks';
import { nip19 } from 'nostr-tools';
import { ArrowLeft } from 'lucide-react';
import { NoteCard } from '@/features/feed/NoteCard';
import { ThreadNoteCard } from '@/components/thread/ThreadNoteCard';
import { useState, useEffect } from 'react';
import { UserAvatar } from '@/components/ui/UserAvatar';
export function NoteDetailPage() {
  const { nevent } = useParams<{ nevent: string }>();
  const navigate = useNavigate();
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const [replies, setReplies] = useState<NDKEvent[]>([]);
  const [parentNotes, setParentNotes] = useState<NDKEvent[]>([]);
  const [replyContent, setReplyContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  // Decode the nevent to get the event ID
  let eventId: string | null = null;
  if (nevent) {
    try {
      const decoded = nip19.decode(nevent);
      if (decoded.type === 'nevent') {
        eventId = decoded.data.id;
      }
    } catch (error) {
      console.error('Failed to decode nevent:', error);
    }
  }
  // Fetch the main event
  const event = useEvent(eventId || '');
  const profile = useProfile(event?.pubkey);
  // Fetch parent notes (thread context)
  useEffect(() => {
    if (!event || !ndk) return;
    const fetchThreadContext = async () => {
      const parents: NDKEvent[] = [];
      let currentEvent = event;
      // Walk up the thread to find all parent notes
      while (currentEvent) {
        // Find the reply/root tag
        const replyTag = currentEvent.tags.find(tag =>
          tag[0] === 'e' && (tag[3] === 'reply' || tag[3] === 'root')
        );
        // If no reply tag, check for any 'e' tag (older format)
        const eTag = replyTag || currentEvent.tags.find(tag => tag[0] === 'e');
        if (!eTag) break;
        const parentId = eTag[1];
        const parentEvent = await ndk.fetchEvent(parentId);
        if (parentEvent) {
          parents.unshift(parentEvent); // Add to beginning to maintain order
          currentEvent = parentEvent;
        } else {
          break;
        }
      }
      setParentNotes(parents);
    };
    fetchThreadContext();
  }, [event, ndk]);
  // Fetch replies
  useEffect(() => {
    if (!event || !ndk) return;
    const fetchReplies = async () => {
      const replyEvents = await ndk.fetchEvents({
        kinds: [NDKKind.Text],
        '#e': [event.id],
      });
      const replyArray = Array.from(replyEvents);
      // Filter out only direct replies (not replies to replies)
      const directReplies = replyArray.filter(reply => {
        const replyTag = reply.tags.find(tag =>
          tag[0] === 'e' && tag[3] === 'reply'
        );
        // If there's a specific reply tag, check if it's replying to our event
        // Otherwise check if our event is the last 'e' tag (older format)
        if (replyTag) {
          return replyTag[1] === event.id;
        }
        const eTags = reply.tags.filter(tag => tag[0] === 'e');
        return eTags.length > 0 && eTags[eTags.length - 1][1] === event.id;
      });
      // Sort by creation time (oldest first for better thread reading)
      directReplies.sort((a, b) => (a.created_at || 0) - (b.created_at || 0));
      setReplies(directReplies);
    };
    fetchReplies();
  }, [event, ndk]);
  const handleReply = async () => {
    if (!currentUser || !ndk || !event || !replyContent.trim()) return;
    setIsSubmitting(true);
    try {
      const reply = new NDKEvent(ndk);
      reply.kind = NDKKind.Text;
      reply.content = replyContent;
      reply.tags = [
        ['e', event.id, '', 'reply'],
        ['p', event.pubkey]
      ];
      // Add root tag if this event is also a reply
      const rootTag = event.tags.find(tag => tag[0] === 'e' && tag[3] === 'root');
      if (rootTag) {
        reply.tags.push(['e', rootTag[1], '', 'root']);
      } else {
        reply.tags.push(['e', event.id, '', 'root']);
      }
      await reply.publish();
      // Add the new reply to the list
      setReplies(prev => [reply, ...prev]);
      setReplyContent('');
    } catch (error) {
      console.error('Failed to publish reply:', error);
    } finally {
      setIsSubmitting(false);
    }
  };
  if (!eventId) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">Invalid Note</h1>
        <p className="text-gray-600 dark:text-gray-400">The note ID is invalid or malformed.</p>
        <button
          onClick={() => navigate('/')}
          className="mt-4 px-4 py-2 bg-accent-600 text-white rounded-lg hover:bg-accent-700"
        >
          Go Home
        </button>
      </div>
    );
  }
  if (!event) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-accent-600"></div>
        <p className="mt-4 text-gray-600 dark:text-gray-400">Loading note...</p>
      </div>
    );
  }
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-black">
      {/* Header */}
      <header className="sticky top-0 z-10 bg-white/80 dark:bg-black/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800">
        <div className="flex items-center gap-4 px-4 py-3">
          <button
            onClick={() => navigate(-1)}
            className="p-2 hover:bg-gray-100 dark:hover:bg-neutral-900 rounded-lg transition-colors"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
          <h1 className="text-xl font-semibold">Thread</h1>
        </div>
      </header>
      {/* Main Content */}
      <main className="max-w-2xl mx-auto">
        {/* Parent Notes (Thread Context) */}
        {parentNotes.map((parentNote, index) => (
          <ThreadNoteCard
            key={parentNote.id}
            event={parentNote}
            showConnector={index > 0}
            isLastInThread={false}
          />
        ))}
        {/* Main Note - Highlighted */}
        <ThreadNoteCard
          event={event}
          isMainNote={true}
          showConnector={parentNotes.length > 0}
        />
        {/* Reply Box */}
        {currentUser && (
          <div className="border-b border-gray-200 dark:border-gray-800 p-4">
            <div className="flex gap-3">
              <UserAvatar
                pubkey={currentUser.pubkey}
                size="md"
                className="w-10 h-10 flex-shrink-0"
              />
              <div className="flex-1">
                <textarea
                  value={replyContent}
                  onChange={(e) => setReplyContent(e.target.value)}
                  placeholder={`Reply to ${profile?.name || 'this note'}...`}
                  className="w-full min-h-[100px] p-3 bg-gray-50 dark:bg-black border border-gray-200 dark:border-gray-700 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-accent-500"
                  disabled={isSubmitting}
                />
                <div className="flex justify-end mt-2">
                  <button
                    onClick={handleReply}
                    disabled={!replyContent.trim() || isSubmitting}
                    className="px-4 py-2 bg-accent-600 text-white rounded-lg hover:bg-accent-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    {isSubmitting ? 'Posting...' : 'Reply'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        {/* Replies */}
        <div>
          {replies.length > 0 ? (
            <>
              <div className="px-4 py-3 border-b border-gray-200 dark:border-gray-800">
                <h2 className="font-semibold text-gray-900 dark:text-white">
                  {replies.length} {replies.length === 1 ? 'Reply' : 'Replies'}
                </h2>
              </div>
              {replies.map(reply => (
                <NoteCard key={reply.id} event={reply} />
              ))}
            </>
          ) : (
            <div className="p-8 text-center text-gray-500 dark:text-gray-400">
              No replies yet. Be the first to reply!
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
</file>

<file path="src/features/feed/ComposeNote.tsx">
import { useState, type FormEvent, useRef, useEffect } from 'react';
import { useNDK, NDKEvent, useNDKCurrentUser, NDKKind, useProfile } from '@nostr-dev-kit/ndk-hooks';
import { Image, Smile, MapPin } from 'lucide-react';
import { cn } from '@/lib/utils';
export function ComposeNote() {
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const profile = useProfile(currentUser?.pubkey);
  const [content, setContent] = useState('');
  const [isPublishing, setIsPublishing] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  // Auto-resize textarea
  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = `${Math.min(textarea.scrollHeight, 300)}px`;
    }
  }, [content]);
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    if (!content.trim() || !currentUser || !ndk) return;
    setIsPublishing(true);
    try {
      const event = new NDKEvent(ndk);
      event.kind = NDKKind.Text;
      event.content = content;
      await event.publish();
      setContent('');
    } catch (error) {
      console.error('Failed to publish note:', error);
    } finally {
      setIsPublishing(false);
    }
  };
  if (!currentUser) {
    return null;
  }
  const displayName = profile?.name || 'Anonymous';
  const remainingChars = 280 - content.length;
  const isOverLimit = remainingChars < 0;
  return (
    <div className="bg-white dark:bg-black rounded-lg">
      <form onSubmit={handleSubmit}>
        <div className="flex gap-3">
          {/* Avatar */}
          <div className="flex-shrink-0">
            {profile?.picture ? (
              <img
                src={profile.picture}
                alt={displayName}
                className="w-10 h-10 sm:w-12 sm:h-12 rounded-full object-cover"
              />
            ) : (
              <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-semibold">
                {displayName[0]?.toUpperCase()}
              </div>
            )}
          </div>
          {/* Input area */}
          <div className="flex-1">
            <textarea
              ref={textareaRef}
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder="What's happening?"
              className="w-full p-0 text-lg placeholder:text-gray-500 dark:placeholder:text-gray-400 bg-transparent resize-none focus:outline-none text-gray-900 dark:text-gray-100 min-h-[60px]"
              disabled={isPublishing}
            />
            {/* Actions bar */}
            <div className="flex items-center justify-between mt-3 pt-3 border-t border-gray-200 dark:border-gray-800">
              <div className="flex items-center gap-1">
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-neutral-900 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add image (coming soon)"
                >
                  <Image className="w-5 h-5" />
                </button>
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-neutral-900 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add emoji (coming soon)"
                >
                  <Smile className="w-5 h-5" />
                </button>
                <button
                  type="button"
                  className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-neutral-900 transition-colors text-gray-500 dark:text-gray-400"
                  title="Add location (coming soon)"
                >
                  <MapPin className="w-5 h-5" />
                </button>
              </div>
              <div className="flex items-center gap-3">
                {/* Character counter */}
                {content.length > 0 && (
                  <div className="relative">
                    <svg className="w-8 h-8 -rotate-90">
                      <circle
                        cx="16"
                        cy="16"
                        r="14"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        className="text-gray-200 dark:text-gray-700"
                      />
                      <circle
                        cx="16"
                        cy="16"
                        r="14"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeDasharray={`${Math.max(0, (Math.min(280, content.length) / 280) * 88)} 88`}
                        strokeLinecap="round"
                        className={cn(
                          "transition-all duration-150",
                          isOverLimit ? "text-red-500" : 
                          remainingChars < 20 ? "text-yellow-500" : 
                          "text-purple-500"
                        )}
                      />
                    </svg>
                    {remainingChars < 20 && (
                      <span className={cn(
                        "absolute inset-0 flex items-center justify-center text-xs font-medium",
                        isOverLimit ? "text-red-500" : "text-gray-500 dark:text-gray-400"
                      )}>
                        {remainingChars}
                      </span>
                    )}
                  </div>
                )}
                {/* Publish button */}
                <button
                  type="submit"
                  disabled={!content.trim() || isPublishing || isOverLimit}
                  className={cn(
                    "px-4 py-1.5 rounded-full font-medium transition-all",
                    (!content.trim() || isOverLimit)
                      ? "bg-gray-200 text-gray-400 dark:bg-black dark:text-gray-600 cursor-not-allowed"
                      : "bg-purple-600 text-white hover:bg-purple-700 dark:bg-purple-500 dark:hover:bg-purple-600"
                  )}
                >
                  {isPublishing ? (
                    <span className="flex items-center gap-2">
                      <span className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                      Publishing
                    </span>
                  ) : (
                    'Publish'
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}
</file>

<file path="src/features/feed/NoteCard.tsx">
import { useProfile, useNDK, useNDKCurrentUser, useEvent } from '@nostr-dev-kit/ndk-hooks';
import { NDKEvent, NDKKind } from '@nostr-dev-kit/ndk-hooks';
import { Heart, MessageCircle, Repeat2, Share, MoreHorizontal, Copy, Code2, ChevronDown, ChevronUp } from 'lucide-react';
import { useState, useRef, useEffect } from 'react';
import { cn } from '@/lib/utils';
import { ZapButton } from '@/components/wallet/ZapButton';
import { walletLogger } from '@/utils/walletLogger';
import { UserAvatar } from '@/components/ui/UserAvatar';
import { Link, useNavigate } from 'react-router-dom';
import { ContentRenderer } from '@/components/content/ContentRenderer';
import { nip19 } from 'nostr-tools';
// Custom function for abbreviated timestamps
function formatTimeAgo(timestamp: number): string {
  const now = Date.now();
  const then = timestamp * 1000;
  const seconds = Math.floor((now - then) / 1000);
  if (seconds < 60) return 'now';
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes}m`;
  const hours = Math.floor(minutes / 60);
  if (hours < 24) return `${hours}h`;
  const days = Math.floor(hours / 24);
  if (days < 7) return `${days}d`;
  const weeks = Math.floor(days / 7);
  if (weeks < 4) return `${weeks}w`;
  const months = Math.floor(days / 30);
  if (months < 12) return `${months}mo`;
  const years = Math.floor(days / 365);
  return `${years}y`;
}
interface NoteCardProps {
  event: NDKEvent;
  isLargeText?: boolean;
}
export function NoteCard({ event, isLargeText = false }: NoteCardProps) {
  const profile = useProfile(event.pubkey);
  const { ndk } = useNDK();
  const currentUser = useNDKCurrentUser();
  const navigate = useNavigate();
  const [isLiked, setIsLiked] = useState(false);
  const [likeCount, setLikeCount] = useState(0);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [showRawEvent, setShowRawEvent] = useState(false);
  const [isExpanded, setIsExpanded] = useState(false);
  const [needsExpansion, setNeedsExpansion] = useState(false);
  const contentRef = useRef<HTMLDivElement>(null);
  // Determine what this note is replying to
  let replyToEventId: string | undefined;
  // First, check for explicit 'reply' marker
  const replyTag = event.tags.find(tag =>
    tag[0] === 'e' && tag[3] === 'reply'
  );
  if (replyTag) {
    replyToEventId = replyTag[1];
  } else {
    // Check for 'root' marker as fallback
    const rootTag = event.tags.find(tag =>
      tag[0] === 'e' && tag[3] === 'root'
    );
    if (rootTag) {
      replyToEventId = rootTag[1];
    } else {
      // If there's only a single 'e' tag with no marker, it's likely a reply to that event
      const eTags = event.tags.filter(tag => tag[0] === 'e');
      if (eTags.length === 1) {
        replyToEventId = eTags[0][1];
      }
    }
  }
  // Fetch the event being replied to
  const replyToEvent = useEvent(replyToEventId || '');
  const replyToProfile = useProfile(replyToEvent?.pubkey || '');
  const handleLike = async () => {
    if (!currentUser || !ndk) return;
    try {
      const reaction = new NDKEvent(ndk);
      reaction.kind = NDKKind.Reaction;
      reaction.content = isLiked ? '-' : '+';
      reaction.tags = [
        ['e', event.id],
        ['p', event.pubkey]
      ];
      await reaction.publish();
      setIsLiked(!isLiked);
      setLikeCount(prev => isLiked ? prev - 1 : prev + 1);
    } catch (error) {
      console.error('Failed to publish reaction:', error);
    }
  };
  const handleRepost = async () => {
    if (!currentUser || !ndk) return;
    try {
      const repost = new NDKEvent(ndk);
      repost.kind = NDKKind.Repost;
      repost.content = '';
      repost.tags = [
        ['e', event.id],
        ['p', event.pubkey]
      ];
      await repost.publish();
    } catch (error) {
      console.error('Failed to repost:', error);
    }
  };
  const displayName = profile?.name || 'Anonymous';
  const npub = nip19.npubEncode(event.pubkey);
  const handle = profile?.nip05 ? `@${profile.nip05.split('@')[0]}` : `@${npub.slice(5, 12)}`;
  // Check if content exceeds 60vh
  useEffect(() => {
    if (contentRef.current) {
      const viewportHeight = window.innerHeight;
      const maxHeight = viewportHeight * 0.6; // 60vh
      const contentHeight = contentRef.current.scrollHeight;
      setNeedsExpansion(contentHeight > maxHeight);
    }
  }, [event.content]);
  const handleNoteClick = (e: React.MouseEvent) => {
    // Don't navigate if clicking on interactive elements
    const target = e.target as HTMLElement;
    if (
      target.closest('a') ||
      target.closest('button') ||
      target.closest('[role="button"]')
    ) {
      return;
    }
    const neventId = event.encode();
    navigate(`/e/${neventId}`);
  };
  const handleCopyId = () => {
    navigator.clipboard.writeText(event.encode());
    setDropdownOpen(false);
  };
  const handleViewRaw = () => {
    setShowRawEvent(true);
    setDropdownOpen(false);
  };
  return (
    <>
    <article
      className="bg-white dark:bg-black border-b border-gray-100 dark:border-gray-800 hover:bg-gray-50/50 dark:hover:bg-neutral-900/50 transition-all duration-150 cursor-pointer"
      onClick={handleNoteClick}>
      <div className="px-4 py-3 sm:px-5 sm:py-4 relative">
        {/* Timestamp in top right corner */}
        <time
          className="absolute top-3 right-4 sm:top-4 sm:right-5 text-gray-500 dark:text-gray-400 text-[13px] sm:text-sm hover:underline cursor-help"
          title={new Date(event.created_at! * 1000).toLocaleString()}
        >
          {formatTimeAgo(event.created_at!)}
        </time>
        {/* Mobile: Stack layout, Desktop: Side-by-side */}
        <div className="flex flex-col sm:flex-row sm:gap-3">
          {/* Mobile header (avatar + author info) */}
          <div className="flex items-start gap-3 mb-2 sm:hidden">
            <Link to={`/p/${npub}`} className="flex-shrink-0">
              <UserAvatar
                pubkey={event.pubkey}
                size="md"
                className="w-10 h-10 ring-1 ring-neutral-200/50 dark:ring-neutral-800/50 shadow-soft"
              />
            </Link>
            <div className="flex-1 min-w-0 pr-24">
              <Link
                to={`/p/${npub}`}
                className="flex items-center gap-1 hover:opacity-75 transition-opacity"
              >
                <span className="font-medium text-[15px] text-gray-900 dark:text-white whitespace-nowrap">
                  {displayName}
                </span>
                <span className="text-gray-500 dark:text-gray-400 text-[13px] whitespace-nowrap">
                  {handle}
                </span>
              </Link>
            </div>
          </div>
          {/* Desktop avatar */}
          <Link to={`/p/${npub}`} className="hidden sm:block flex-shrink-0">
            <UserAvatar
              pubkey={event.pubkey}
              size="md"
              className="w-11 h-11 ring-1 ring-neutral-200/50 dark:ring-neutral-800/50 shadow-soft"
            />
          </Link>
          {/* Content */}
          <div className="flex-1 min-w-0">
            {/* Desktop author info */}
            <div className="hidden sm:flex items-center gap-2 pr-32">
              <Link
                to={`/p/${npub}`}
                className="flex items-center gap-1.5 hover:opacity-75 transition-opacity min-w-0"
              >
                <span className="font-medium text-base text-gray-900 dark:text-white whitespace-nowrap">
                  {displayName}
                </span>
                <span className="text-gray-500 dark:text-gray-400 text-sm whitespace-nowrap">
                  {handle}
                </span>
              </Link>
            </div>
            {/* Reply indicator */}
            {replyToEvent && (
              <div className="flex items-center gap-1 mt-1 text-sm text-gray-500 dark:text-gray-400">
                <span>Replying to</span>
                <Link
                  to={`/p/${nip19.npubEncode(replyToEvent.pubkey)}`}
                  className="font-medium hover:underline text-gray-700 dark:text-gray-300"
                >
                  @{replyToProfile?.name || replyToProfile?.displayName || `${replyToEvent.pubkey.slice(0, 8)}...`}
                </Link>
              </div>
            )}
            {/* Note content */}
            <div className="mt-2 relative">
              <div
                ref={contentRef}
                className={cn(
                  "overflow-hidden transition-all duration-300",
                  !isExpanded && needsExpansion && "max-h-[60vh]"
                )}
              >
                <ContentRenderer
                  content={event.content}
                  className={cn(
                    "text-gray-800 dark:text-gray-200 leading-relaxed",
                    isLargeText ? "text-lg sm:text-xl" : "text-[15px] sm:text-base"
                  )}
                />
                {/* Gradient fade when collapsed */}
                {!isExpanded && needsExpansion && (
                  <div className="absolute bottom-0 left-0 right-0 h-24 bg-gradient-to-t from-white dark:from-gray-900 to-transparent pointer-events-none" />
                )}
              </div>
              {/* Read More/Less Button */}
              {needsExpansion && (
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setIsExpanded(!isExpanded);
                  }}
                  className="mt-3 flex items-center gap-1.5 px-4 py-2 bg-gray-900 dark:bg-white text-white dark:text-gray-900 text-sm font-medium rounded-full hover:bg-gray-800 dark:hover:bg-neutral-900 transition-all duration-200"
                >
                  <span>{isExpanded ? 'Read Less' : 'Read More'}</span>
                  {isExpanded ? (
                    <ChevronUp className="w-4 h-4" />
                  ) : (
                    <ChevronDown className="w-4 h-4" />
                  )}
                </button>
              )}
            </div>
            {/* Action buttons */}
            <div className="flex items-center justify-between mt-4 -ml-2">
              <div className="flex items-center gap-1">
                <button
                  onClick={() => {/* TODO: Implement reply */}}
                  className="group flex items-center gap-1.5 p-2.5 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50 transition-all duration-200"
                  disabled={!currentUser}
                >
                  <MessageCircle className="w-4 h-4 text-neutral-500 group-hover:text-gray-700 dark:text-neutral-500 dark:group-hover:text-gray-300" strokeWidth={1.5} />
                  {/* Reply count will be shown when implemented */}
                </button>
                <button
                  onClick={handleRepost}
                  className="group flex items-center gap-1.5 p-2.5 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50 transition-all duration-200"
                  disabled={!currentUser}
                >
                  <Repeat2 className="w-4 h-4 text-neutral-500 group-hover:text-success-600 dark:text-neutral-500 dark:group-hover:text-success-400" strokeWidth={1.5} />
                  {/* Repost count will be shown when implemented */}
                </button>
                <button
                  onClick={handleLike}
                  className={cn(
                    "group flex items-center gap-1.5 p-2.5 rounded-lg transition-all duration-200",
                    isLiked
                      ? "bg-danger-50 dark:bg-danger-950/20"
                      : "hover:bg-neutral-100 dark:hover:bg-neutral-800/50"
                  )}
                  disabled={!currentUser}
                >
                  <Heart
                    className={cn(
                      "w-4 h-4 transition-all duration-200",
                      isLiked
                        ? "fill-current text-danger-500 dark:text-danger-400"
                        : "text-neutral-500 group-hover:text-danger-500 dark:text-neutral-500 dark:group-hover:text-danger-400"
                    )}
                    strokeWidth={1.5}
                  />
                  {likeCount > 0 && (
                    <span className={cn(
                      "text-sm font-medium",
                      isLiked
                        ? "text-pink-500 dark:text-pink-400"
                        : "text-gray-500 group-hover:text-pink-500 dark:text-gray-400 dark:group-hover:text-pink-400"
                    )}>
                      {likeCount}
                    </span>
                  )}
                </button>
                {/* Zap Button */}
                <ZapButton
                  event={event}
                  onZap={(amount, success) => {
                    if (success) {
                      walletLogger.info(`Zapped ${amount} sats to ${event.pubkey}`, 'NoteCard');
                    }
                  }}
                />
                <button
                  onClick={() => {/* TODO: Implement share */}}
                  className="group p-2.5 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50 transition-all duration-200"
                >
                  <Share className="w-4 h-4 text-neutral-500 group-hover:text-gray-700 dark:text-neutral-500 dark:group-hover:text-gray-300" strokeWidth={1.5} />
                </button>
              </div>
              <div className="relative">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setDropdownOpen(!dropdownOpen);
                  }}
                  className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800/50 transition-all duration-200"
                >
                  <MoreHorizontal className="w-4 h-4 text-neutral-400 dark:text-neutral-600" strokeWidth={1.5} />
                </button>
                {dropdownOpen && (
                  <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-black rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleCopyId();
                      }}
                      className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 dark:hover:bg-neutral-900 flex items-center gap-2 rounded-t-lg"
                    >
                      <Copy className="w-4 h-4" />
                      Copy ID
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleViewRaw();
                      }}
                      className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 dark:hover:bg-neutral-900 flex items-center gap-2 rounded-b-lg"
                    >
                      <Code2 className="w-4 h-4" />
                      View Raw Event
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </article>
    {/* Raw Event Modal */}
    {showRawEvent && (
      <>
        <div
          className="fixed inset-0 bg-black/50 z-50"
          onClick={() => setShowRawEvent(false)}
        />
        <div className="fixed inset-4 md:inset-auto md:top-1/2 md:left-1/2 md:-translate-x-1/2 md:-translate-y-1/2 md:max-w-2xl md:w-full z-50">
          <div className="bg-white dark:bg-black rounded-lg shadow-xl h-full md:h-auto max-h-[80vh] flex flex-col">
            <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
              <h3 className="text-lg font-semibold">Raw Event</h3>
              <button
                onClick={() => setShowRawEvent(false)}
                className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-neutral-900"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            <div className="p-4 overflow-auto flex-1">
              <pre className="text-xs font-mono whitespace-pre-wrap break-all bg-gray-50 dark:bg-black p-4 rounded-lg">
                <code className="language-json">
                  {event.inspect}
                </code>
              </pre>
            </div>
          </div>
        </div>
      </>
    )}
    </>
  );
}
</file>

<file path="src/App.tsx">
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { Layout } from './components/layout/Layout';
import { HomePage } from './pages/HomePage';
import { ComposePage } from './pages/ComposePage';
import { NotificationsPage } from './pages/NotificationsPage';
import { ProfilePage } from './pages/ProfilePage';
import { WalletPage } from './pages/WalletPage';
import { WalletSettingsPage } from './pages/WalletSettingsPage';
import { SettingsPage } from './pages/SettingsPage';
import { TradePage } from './pages/TradePage';
import { MarketplacePage } from './pages/marketplace/MarketplacePage';
import { CreateListingPage } from './pages/marketplace/CreateListingPage';
import { ListingDetailPage } from './pages/marketplace/ListingDetailPage';
import { FollowPacksPage } from './pages/FollowPacksPageImproved';
import { FollowPackDetailPage } from './pages/FollowPackDetailPage';
import { NoteDetailPage } from './pages/NoteDetailPage';
import { useNDKCurrentUser } from '@nostr-dev-kit/ndk-hooks';
import { useAutoLogin } from './features/auth/useAutoLogin';
const queryClient = new QueryClient();
function AppRoutes() {
  const currentUser = useNDKCurrentUser();
  useAutoLogin();
  return (
    <Routes>
      <Route path="/" element={<Layout />}>
        <Route index element={<HomePage />} />
        <Route path="compose" element={currentUser ? <ComposePage /> : <Navigate to="/" />} />
        <Route path="notifications" element={currentUser ? <NotificationsPage /> : <Navigate to="/" />} />
        <Route path="profile" element={currentUser ? <ProfilePage /> : <Navigate to="/" />} />
        <Route path="p/:identifier" element={<ProfilePage />} />
        <Route path="e/:nevent" element={<NoteDetailPage />} />
        <Route path="packs" element={<FollowPacksPage />} />
        <Route path="packs/:packId" element={<FollowPackDetailPage />} />
        <Route path="wallet" element={<WalletPage />} />
        <Route path="wallet/settings" element={<WalletSettingsPage />} />
        <Route path="trades" element={<TradePage />} />
        <Route path="marketplace" element={<MarketplacePage />} />
        <Route path="marketplace/create" element={<CreateListingPage />} />
        <Route path="marketplace/:id" element={<ListingDetailPage />} />
        <Route path="settings" element={<SettingsPage />} />
      </Route>
    </Routes>
  );
}
function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        <AppRoutes />
      </BrowserRouter>
    </QueryClientProvider>
  );
}
export default App;
</file>

<file path="package.json">
{
  "name": "voces-app",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@cashu/cashu-ts": "^2.7.2",
    "@nostr-dev-kit/ndk": "^2.14.35",
    "@nostr-dev-kit/ndk-cache-dexie": "^2.0.10",
    "@nostr-dev-kit/ndk-hooks": "^1.3.0",
    "@nostr-dev-kit/ndk-wallet": "^0.6.2",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.13",
    "@tanstack/react-query": "^5.90.2",
    "axios": "^1.12.2",
    "blossom-client-sdk": "^4.1.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.23.22",
    "i18next": "^25.5.2",
    "i18next-browser-languagedetector": "^8.2.0",
    "lucide-react": "^0.544.0",
    "nostr-tools": "^2.17.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-i18next": "^16.0.0",
    "react-router-dom": "^7.9.1",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "zustand": "^5.0.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@tailwindcss/postcss": "^4.1.13",
    "@tailwindcss/typography": "^0.5.18",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.3",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.36.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.4.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.13",
    "tsx": "^4.20.6",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.44.0",
    "vite": "^7.1.7"
  }
}
</file>

</files>
